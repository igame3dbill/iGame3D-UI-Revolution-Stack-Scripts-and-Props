-- script of stack "ig3d_UI_MAIN"
global gIdling,gIdleRate,gStackDirectory,giGame3DOutput,gCurrentOutputPath,gExtOut,gGLmouseX,gGLmouseY,gGLmouseZ
global ig3d_particle_emitter,IG3D_START

#######################
## editingmodes of this stack based on ChooseAtool
-- --
Function editingModes whatModes
  put "select_mesh,snapshot,camera,level,colors,display,light,objects,sounds,particles"into EM
  put EM & ",path,pathselect,cone,cube,cylinder,sphere,quad,plane,extrude,terrain,dropmesh" into editingModesList
  set the editingModes of stack (the mainStack of this stack) to editingModesList
    switch whatModes
      case "mesh"
      return "select_mesh,cone,cube,cylinder,sphere,quad,plane,extrude,terrain,dropmesh" 
      case "Entity"
        return "objects,light,sounds,particles,groups"
        break
    case "view"
      return "camera,color,level,display"
      case "path"
        return "path,pathSelect"
        break
    end switch
  return   editingModesList
end editingModes

## editingmodes are set to grow
-- --
on preopeniGame3D
   --  put true into gIdling
   --  put 1 into gIdleRate
   --  set the idleRate to gIdleRate
   --  emptystackProperties
   --  put folderPath("Output") into gCurrentOutputPath
   --  lock screen
   --  put 4 into ig3d_particle_emitter  #### ATTEMPTING TO MAKE LUAREV
   --  put 26 into IG3D_START   #### ATTEMPTING TO MAKE LUAREV
   --  ig3d_Init_s4i gStackDirectory, -1,-1,0,0
   --  put setMkey(DropModelMode,"objects") into setMode
   --  put windowBound() into theWIndowBounds
   --    set the rect of stack (the mainStack of this stack) to theWIndowBounds
   --  ig3d_SetWindowBounds_4i (item 1 of theWindowBounds),(item 4 of theWindowBounds+20),640,480
   startUpDefaultPath
   openStacksWithTopStyle
end preopeniGame3D
-- --
on emptystackProperties
    set the DrawnCUBESRecordArray of stack (the mainStack of this stack)  to empty
    set the DrawnRectsRecordArray of stack (the mainStack of this stack)  to empty
    set the GLMOUSEDOWNARRAY of stack (the mainStack of this stack)  to empty
    set the currentNautilusData of stack (the mainStack of this stack) to empty
    if "console" is in stackList() then set the undoEditField of stack "Console" to empty
    set the currentGridPens of stack (the mainStack of this stack)  to empty
    set the lualoadedfunctions of stack (the mainStack of this stack) to empty
    set the sceneGraphPicks of stack (the mainStack of this stack)  to empty
    set  the ScreenMouseDowns of stack (the mainStack of this stack)  to empty
    set the NautiLusPAthRecords of stack (the mainStack of this stack) to empty
    set the mKeyChangesList of stack (the mainStack of this stack)  to empty
    --set the chosenSceneGraphMatrix  of stack (the mainStack of this stack)   to empty
end emptystackProperties
-- --
Function windowBound
  if systemVersion() contains "Windows" then put "2,2,1280,92" into cRec
  else put "2,22,1280,72" into cRec
     put the windowboundingrect into WBR
  put item 3 of WBR into item 3 of cRec
  put item 1 of WBR into item 1 of cRec
  set the cardRecMemory   of stack (the mainStack of this stack)  to cRec
return cRec
end windowBound
-- --
on preOpenCard whatCard
  set the cNavigationArrows of this card to  false 
  switch  whatCard
    case "User"
       put true into gIdling
 preopeniGame3D 
      break
  end switch
end preOpenCard
-- --
on preOpenStack whatStack
  put gameRoot() into gStackDirectory
    choose browse tool
     set the cNavigationArrows of this stack to  false 
         set the backgroundColor of this stack to 200,200,200
if the tool is "browse tool" or isDevEnvironment is false then set the defaultMenuBar to "igame3dmenu1"
    if isDevEnvironment is true then  set the defaultMenuBar to "revMenuBar"
    show group "igame3dmenuGroup2" of stack (the mainStack of this stack)
if whatSTack is empty then put the short name of this stack into whatstack
 write whatStack && the time & cr  to stderr
 set itemDel to "_"
 if item 1 of whatStack is "ig3d"  then
   --put luacore() into check  -- doesn't work on windows
   put true into gIdling
 preopeniGame3D 
end if
switch (whatStack)
end switch
end preOpenStack
###################################END PREOPEN SECTION OF STACK SCRIPT
###################################FILE PATH HANDLING
--gameroot returns the path to the application
-- --
Function gameRoot
   set the itemdelimiter to "/"
   put char 2 to -1 of word 2 of the long name of stack (the mainStack of this stack) into tPath
  put itemoffset(".app",tPath) into tOS
  if tOS = 0 then return item 1 to - 2 of tPath & "/"
  else return item 1 to tOS - 1 of tPath & "/"
end gameRoot

#####OUTPUT TO FILE OUTPUTTOFILE 
-- --
Function OutputToFile TheFileName outputData
  set itemDel to "/" 
  if  item -1 of theFileName contains "." then 
  put item -1 of theFileName into FileWord  
  delete item -1 of theFileName
   if theFileName is  empty then  
   put "output" into theFileName
   end if
     put "file:/" & folderPath(TheFileName)&FileWord into gCurrentOutputPath
else   
put "file:/" & folderPath(TheFileName) into gCurrentOutputPath
end if
put outputData into giGame3DOutput
 put giGame3DOutput into URL gCurrentOutputPath
return gCurrentOutputPath & cr & outputData
end OutputToFile

-- --
Function URLPath what
  put "file:/" & folderPath(what) into tURLPATH
  return tURLPATH 
end URLPath
########RAWKEYDOWN KEYDOWNS iG3DKEYDOWNS ######## 01 08 07 --BILL
-- --
on rawKeyDown keyone,keytwo,keythree
  if word 1 of the focusedObject is "field" then pass rawkeydown
  put (the controlKey is down) into CntrBoo
    if  CntrBoo is true then checkIgame3DControlKeys
  put (the commandKey is down) into CmdBoo
  put (the shiftKey is down) into shiftBoo
  put (the capslockkey is down) into CapsBoo
 put numtochar(keyone) into keyoneStr
 put numtochar(keytwo) into keytwostr
 put keyone,keytwo,keyonestr,keytwostr,cntrboo,cmdboo,shiftboo,capsboo into keydownData
 put line 2 to 100 of the keydownDataRecord of stack( the mainStack of this stack) into ker
 put cr & keydowndata after ker
 set the keydownDataRecord of stack (the mainStack of this stack) to ker
 set the label of button "status" of stack (the mainStack of this stack) to keydownData
 CheckiGame3DKeyboardHits keyone,keytwo,keythree
pass rawkeydown
end rawKeyDown

-- --
on commandKeyDown 
  if the tool is not "browse tool" then exit commandKeyDown
  put numtochar(item 1 of keysDown()) into CHA
  put the lastKeyDown of stack (the mainStack of this stack) into LastCha
  if lastCha <> cha then   set the lastKeyDown of stack (the mainStack of this stack) to CHA
pass commandKeyDown
end commandKeyDown

-- --
on controlKeyDown
  if the tool is not "browse tool" then exit controlKeyDown
  focus btn 1 of stack (the mainStack of this stack)
   put numtochar(item 1 of keysDown()) into CHA
  put the lastKeyDown of stack (the mainStack of this stack) into LastCha
  if lastCha <> cha then   set the lastKeyDown of stack (the mainStack of this stack) to CHA
  pass controlKeyDown
end controlKeyDown
-- --
on checkIgame3DKeyBoardHits keyone,keytwo,keythree
  if  keysdown() is empty is true and keyone is empty is true then exit checkIgame3DKeyBoardHits
  put getmkey(keydownDataRecord) into KeyRec
  put line -1 of keyRec into latestKeys
  put getMkey(editingMode) into em
 if item 1 of latestKeys is "65288" and em is among the items of "select_mesh,vertex,line,connect,break,cube,quad,dropmesh,terrain" then 
    ig3d_PushMeshToUndoCache
 ig3d_DeleteMesh_b false
 mesh_tag_Menu "Clean"
 end if
if keyone is among the items of "65361,65362,65363,65364" then send arrowKey && keyone to stack (the mainStack of this stack) in 0 milliseconds
end checkIgame3DKeyBoardHits

-- --
on checkIgame3DControlKeys theKeys
  if theKeys is empty then put keysDown() into thekeys
  put numtochar(item 1 of thekeys) into charstring
  switch charstring
    case "A"
      put meshMenu("select|All Vertices") into action
      break
      case "D"
      put meshMenu("Duplicate Vertices") into action
      break
    case "L"
      put meshMenu("select|connected") into action
      break
    case "G"
            put meshMenu("Tag Vertices") into action

  end switch
end checkIgame3DControlKeys
-- --
on arrowKey theArrowKey
  put the editingMode of stack ( the mainStack of this stack) into EM
  put keysDown() into checkKeys
  put ToolUnits(EM) into gridUnitz
  put ig3d_GetMeshCentroid__3f() into XYZ
  put  line -1 of  the keydownDataRecord of stack (the mainStack of this stack) into kerone
  put  line -2 of  the keydownDataRecord of stack (the mainStack of this stack) into kertwo
  if em is among the items of "select_mesh" then put arrowMeshKeys(checkKeys) into action
  if em is among the items of "quad,cube,cylinder,cone,sphere,dropmesh" then
    repeat with ni=1 to 4
      put 6536& ni into ARo
      if Aro is among the items of checkkeys then put item ni of "left,up,right,down" & comma after ArKs 
    end repeat
    delete char -1 of arks
    repeat for each item Wark in arks
      switch wark
      case "left"
        ig3d_RotateSelectedMesh_6f (0),(-90),(0),(item 1 of xyz),(item 2 of xyz), (item 3 of xyz)
        break
      case "right"
        ig3d_RotateSelectedMesh_6f (0),(90),(0),(item 1 of xyz),(item 2 of xyz), (item 3 of xyz)
        break
      case "up"
        ig3d_RotateSelectedMesh_6f (0),(0),(90),(item 1 of xyz),(item 2 of xyz), (item 3 of xyz)
        
        break
      case "down"
        ig3d_RotateSelectedMesh_6f (0),(0),(-90),(item 1 of xyz),(item 2 of xyz), (item 3 of xyz)
        break
      end switch
    end repeat
  end if
end arrowKey

-- --
on meshNinetyDegree
    put ig3d_GetMeshCentroid__3f() into XYZ
    ig3d_RotateSelectedMesh_6f (0),(90),(0),(item 1 of xyz),(item 2 of xyz), (item 3 of xyz)
end meshNinetyDegree
-- --
Function arrowMeshKeys keyone,keytwo,keythree
put keyone,keytwo,keythree into checkKeys

  put GLrect() into GLrec
  put ig3d_GetElapsedSeconds__f()  into passed
   put ToolUnits(EM) into gridUnitz
    put 100 into yScale
           put 100 into ZScale
 put 100 into XScale
put 0 into Xrot
put 0 into Yrot
put 0 into Zrot
put 0 into boostx
put 0 into boostz
put 0 into boosty
repeat for each item theArrowNumber in checkKeys
  if theArrowNumber is empty then next repeat
  if theArrowNumber = 65505 then next Repeat

switch theArrowNumber
    case "65361" --"left"
      put 95 into Xscale
            put 95 into zscale
            put 95 into uniformscale
put -5 into yrot
put -(item 1 of gridUnitz) into boostx
put -.5 into evc
      break
         case "65363" --"right"
           put 105 into Xscale
            put 105 into zscale
            put 105 into uniformscale
           put 5 into yrot
put .5 into evc
      put item 1 of gridUnitz into boostx

      break
case "65362" ---"up"
  put item 3 of gridUnitz into boostz
put 105 into yscale
put 105 into uniformscale
     put -5 into xrot
     put 1 into Extr
  break
  case "65364"  ---"down"
         put 95 into yscale
         put 95 into uniformscale
     put 5 into xrot
     put -(item 3 of gridUnitz) into boostz 
     put -1 into Extr
    break
  end switch
  end repeat
  put Xrot,Yrot,Zrot into theRots
  put ig3d_GetMeshCentroid__3f() into meshXyz
 
  replace cr with comma in meshXyz
  put  theRootPick() into rootPick 
   
    switch rootPick
  case "rotate" 
   ig3d_RotateSelectedMesh_6f (xrot),(yrot),(zrot),(item 1 of meshXyz),(item 2 of meshXyz),(item 3 of meshXyz)
 break
 case "scale"
   if  the altKey is  down then  
ig3d_ScaleSelectedMesh_3f (uniformscale),(uniformscale),(uniformscale)
else
 ig3d_ScaleSelectedMesh_3f (Xscale),(yScale),(ZScale)
 end if
   break
case "Extrude"
  put getMkey(extrudeValue) into eV
  put evC+ev into ev
  put setMkey(extrudeValue,ev) into setit
 put ev into fld "col2" of stack "sceneGraph"
  if extr is not empty and extr is not 0 then put meshMenu("Extrude","|commandKey") into extrudit
break
case "centroid"
   put quoted((item 1 of meshXyz+(boostX))&","&(item 2 of meshXyz+(boostY))&","&(item 3 of meshXyz+(boostZ))) into setAUX
   put theAuxBodPosit(setAUX) into setTheAUx
  externalMouseDOwnEvent (setAUX)
 ig3d_SetMeshPosition_3f (item 1 of meshXyz+boostX),(item 2 of meshXyz+boosty),(item 3 of meshXyz+boostz)
    --ig3d_MeshSetFacing_b3f false, item 1 of meshXyz,(item 2 of meshXyz), item 3 of meshXyz
 break
 case "mesh_tags"
   put coln("col1")+1 into Ntag
   put ig3d_GetMesh_tagsList__s() into tlist
   if num(lines of tlist) < 2 then return checkkeys
   if ntag > num(lines of tlist) then put 1 into ntag
   set the hilitedLine of fld "col1" of stack "sceneGraph" to ntag
   send checkhilites to stack "SceneGraph" in 0 milliseconds
  mesh_tag_menu "select",ntag,(line ntag of tlist)

  
   break
 end switch
--refillColumns
return checkKeys
end arrowMeshKeys

-- --
on resetiGame3D
  preopenstack (the short name of stack (the mainStack of this stack))
end resetiGame3D
######## ig3d_EXTERNAL EVENTS #######
-- --
on externalCONSOLEEVent externalEvent
    --put consoleLogCheck() into checkConsole
  put getMkey(lastLuaCommand) into theCommand
  put char 1 to -1 of gExtOut into theLuaOutput ---ig3d_GetLuaOutput__s()
  write "[ig3d lua output]" && theLuaOutput & cr to stderr
  set the LuaOutput of stack(the mainStack of this stack) to theLuaOutput
       if "console" is in the windows then
         if number of lines of theLuaOutput =1 then delete  char -1 of fld "consoleOut" of stack "Console"
if theLuaOutput is not empty then 
put   cr & theCommand &tab &"-"&"-" && theLuaOutput & cr  after fld "consoleOut" of stack "Console"
send "consoleUpdate" to stack "console" ### new update takes care of lineNums, colorize and scroll
  set scroll of fld "consoleOut" of stack "Console" to the formattedHeight of fld "consoleOut" of stack "Console" - height of fld "consoleOut" of stack "Console"
set the nextConsole of stack (the mainStack of this stack) to empty
end if
end if
set the LuaOutput of stack (the mainStack of this stack) to empty
  set the lastLuaCommand of stack (the mainStack of this stack) to empty

end externalCONSOLEEVent
-- --
on storeRawMouseGLMOUSEDOWNDATA
  put the GLMouseDowns of stack (the mainStack of this stack) into MouseDownMemory
    put  cr & theNewXYZValues  after MouseDownMemory
    if num(items of line 1 of evMem) < 3 then delete line 1 of MouseDownMemory
    set the GLMouseDowns of stack (the mainStack of this stack) to MouseDownMemory
end storeRawMouseGLMOUSEDOWNDATA
-- --
on externalMouseDOwnEvent evData
put unquoted(evData) into theNewXYZValues
set the GLMouseDown of stack (the mainStack of this stack) to theNewXYZValues
put the UserTool of stack (the mainStack of this stack)  into TheTOOL
  put the currentGridPens of stack (the mainStack of this stack) into GridPenLIST
  put gridPen(quote&evData&quote) into theGridPen

  --exit externalMouseDOwnEvent
    #### IF THE CURRENT POSITION HAS NOT BEEN SET DURING THIS MOUSE DOWN EVENT THEN DRAW
    put setmkey(blockedEvent,"update_mesh") into blockit
if theTool is among the items of "triangle,quad,plane,cube,path,cone,sphere,terrain,dropmesh,line" then
   if  item 1 to 3 of theGridPen is in GridPenLIST then
     --put theGridPen &cr&cr&gridpenlist
     put lineOffset(theGridPen,gridpenlist) & cr & num(lines of gridpenlist) into myPen
    exit  externalMouseDOwnEvent
   end if
   
  put cr & theGridPen after GridPenLIST
if num(items of line 1 of GridPenLIST) < 3 then delete line 1 of GridPenLIST
set the currentGridPens of stack (the mainStack of this stack) to GridPenLIST
if theTool is not "dropMesh" then put newTagForToolAction(theGridPen) into NewTag
   put setMkey(blockedEvent,"update_mesh") into setBlock
 end if
--put theTool
    switch theTool
      case "DropMesh"
        dupeDropmesh
        break
      case "light"
        put chosenLight() into lightNUmber
        put ig3d_GetLightInfo_i_s(lightNumber) into lightData
        put item 4 of line 2 of lightData into typeofLight
       
        put theNewXYZValues  & "," & typeofLight into line 2 of lightData --theNewXYZValues
        ig3d_ShowLights_b true
        ig3d_SetLightInfo_is lightNumber,lightData
          put ig3d_GetLightInfo_i_s(lightNumber) into lightData

        break
      case "line"
        case "vertex"
          case "split"
            case "disconnect"
       if the altKey is down then 
     put "drawLine("&(item 1 of theGridPen),(item 2 of theGridPen),(item 3 of theGridPen) &")" into luaLine
         put ig3d_ExecuteLua_s_i(luaLine) into luaaction
         ###PUT  gridPenList
        end if
        if the controlkey is down then 
        ig3d_SetMeshPosition_3f (item 1 of theNewXYZValues),(item 2 of theNewXYZValues),(item 3 of theNewXYZValues)
end if
        break 
  case "quad" 
  case "plane"
    case "cube"
      if numtochar(item 1 of keysdown()) is space  then 
                ig3d_SetMeshPosition_3f (item 1 of thegridPen),(item 2 of thegridPen),(item 3 of thegridPen)
else
     put quad() into action
     end if
    break
    case "path"
      put PathFromMouseDown(quote&thegridPen&quote) into action
      break
    case "triangles"
      --if thegridPen is among the lines of trianglesList then exit externalMouseDownEvent
      break
      case "reposition"
        if the altKey is down then
         ig3d_DuplicateMesh
        end if
        break
        case "terrain"
                  ig3d_SetMeshPosition_3f (item 1 of theNewXYZValues),(item 2 of theNewXYZValues),(item 3 of theNewXYZValues)

        break
  end switch
  
focus btn 1 of stack (the mainStack of this stack)

end externalMouseDOwnEvent
 
-- --
on mesevent boo
  set the messageTheEvents of stack (The mainStack of this stack) to boo
  ### Test that the external is firing the expected commands by sending to messageBox --01 06 07 --bill
end mesevent

-- --
on ig3d_ext_event evName, evData
  choose browse tool
  put evName &comma & evData into theevNameevData
  put ig3d_GetSelection__s() into Tselection
  #### This function gets called by the external when certain things happen and the GUI needs to update
  ###### BLOCK EVENTS
  
  put the blockedEvent of stack (the mainStack of this stack) into evBlock
  put the blockedEventData of stack (the mainStack of this stack) into evBlockData
  put evName, evData &cr&evblock&cr&evBlockData&Cr& "triggered ig3d_ext_event" &cr& ig3d_GetSelection__s() &cr& the seconds into theExt_event_out
  
  if evBlock = "all" then exit ig3d_ext_event
  put ",update_entity" after EvBlock
  if  evName  is among the items of evBlock and evBlock is not empty then exit ig3d_ext_event
  if  evBlockdata  = evData and evBlockData is not empty then exit ig3d_ext_event
  if the messageTheEvents of stack (The mainStack of this stack)  is true then put theExt_event_out
  put the editingmode of stack (the mainstack of this stack) into EM
  put the lastig3dexternalevent of stack (the mainStack of this stack)  into checkEV
  set the lastig3dexternalevent of stack (the mainStack of this stack) to theevNameevData
  put the UserTool of stack (the mainStack of this stack) into theToOL
  switch (evName)
    case "selectBone"
      send "selBone" && evData to cd fld "bonelist" of stack "NewAnimEd"
      break
  case "resizeGL"
    break
  case default
  case "console"
    externalCONSOLEEVent
    break
  case "mouseDown"
    put item 1 of evData into gGLMouseX
    put item 2 of evData into gGLMouseY
    put item 3 of evData into gGLMouseZ
    externalMouseDownEvent (quote&evData&quote) 
    break
  case "mouseUp"
    put item 1 of evData into gGLMouseX
    put item 2 of evData into gGLMouseY
    put item 3 of evData into gGLMouseZ
    set the quadRectMemory of stack (the mainStack of this stack) to empty
    set the quadList of stack (the mainStack of this stack) to empty
    if theTOOL is among the items of "path,quad,cube,plane,cylinder,cone,sphere,triangles" then
      put setmkey(blockedEvent,"update_mesh") into unblockit
    else
      put setmkey(blockedEvent,"nothing") into unblockit
    end if
    put the GLMouseDowns of stack (the mainStack of this stack) into evMem
    put quote & evData & quote into Edata
    put cr & gridPen(Edata) into allGridpens
    put the currentGridPens of stack (the mainStack of this stack) before allGridpens 
    put recordMouseDowns(quoted(allGridpens))  into  allmouseDowns
    set the GLMouseDowns of stack (the mainStack of this stack) to empty
    set the currentGridPens of stack (the mainStack of this stack) to empty
    set the GLMouseUp of stack (the mainStack of this stack) to evData
    set the buttonhasfocus of stack (the mainStack of this stack) to true
    set the fieldhasfocus of stack (the mainStack of this stack) to false
    set the dragging of stack (the mainStack of this stack) to false
    put updateStatusField("mouseUp") into evUpd
    focus cd btn 1 of stack (the mainStack of this stack)
    break
  case "update_entity"   ##--## should there be some cases for groups and particles? --041805 --bill
    switch (the editingMode of stack (the mainStack of this stack)) 
    case "objects" --0 -- objects
      put ig3d_GetObjectInfo_s_s(line 1 of tselection) into theUpdate
      replace cr with comma in theUpdate
      replace "update_entity,pos" with (tSelection & comma & theUpdate) in numberdedIg3dExGetCameraInfotOutput
      break
    case "camera"
      put ig3d_GetCameraData_s() into theUpdate
      replace cr with comma in theUpdate
      replace "update_entity,pos" with  (tSelection & comma & theUpdate) in numberdedIg3dExtOutput
      break
    case "update_scripts" 
      break
    case 1 --lights 
      
      if "Scenegraph" is in the windows then send SceneGraphSelectEntity && "lights" to stack "Scenegraph"
      break
    case 2  --GROUPS
      
      break
    end switch
    break
  case "select_entity"
    if tSelection is "player" then put comma & ig3d_GetCameraData_s() into theUpdate
    replace cr with comma in theUpdate
    replace "select_entity" with  tSelection & comma & theUpdate in numberdedIg3dExtOutput
    //the external reports that an entity has been selected
    if "sceneGraph" is in the windows then 
      --send SceneGraphSelectEntity && evDATA to stack "SceneGraph"
      --send objectsRootPick to stack "sceneGraph"
    end if
    break
  case "update_obj_list"
    --    updateObjects
    
    if "NewAnimEd" is in the windows then send "updateNewAnimEd" to stack "NewAnimEd"
    break
  case "update_mtrl_list"
    #####"MATERIALS DO SOMETHING send "updateMaterialList" to card "materialsCard" of stack "Inspector"
    break
  case "update_mesh"
    set itemDel to comma
    set the lastMesh of stack (the mainStack of this stack) to evData
    break
  end switch
  
  put extEVENTHistory(evName, evData) & cr into numberdedIg3dExtOutput
  put the editingMode of stack the mainStack of this stack into em
  updateRootEditMode em
end ig3d_ext_event
##########  

-- --
Function extEVENTHistory evName evData
    local evHist
  put the ig3dEventKeyF of stack (the mainStack of this stack) into evHist
     split evHist by numtochar(13) and numtochar(14)
    put the keys of evHist into eventHistoryKeys
     put the number of lines of eventHistoryKeys into arrayNumber
    if evName is empty  then return evHist[number of lines of eventHistoryKeys]
     if evName is a number  then return evHist[evName]
   
    if evName is "all" then
    repeat for each line KEYLINE in eventHistoryKeys
      put evHist[keyline] & cr after allLines
    end repeat
    filter allLines with  evData 
    return allLines
    end if

    if arrayNumber > 100  then
              set the ig3dEventKeyF of stack (the mainStack of this stack) to empty
      repeat for each line KEYLINE in it
      put evHist[keyline] & cr after allLines
      put empty into evHist[keyline]
    end repeat
    put allLines into evHist[1]
    put 1 into arrayNumber
    end if
put arrayNumber+1 into nextStateMem
    put evName &","& evData into evHist[nextStateMem]
    combine evHist with numtochar(13) and numtochar(14)
    set the ig3dEventKeyF of stack (the mainStack of this stack)  to evHist
   ##handler missing -- if nextStateMem is not empty then put setCurStateKey(nextStateMem) into setState
put  cr & num(lines of evHist)+1 &comma & evName &comma & evData after evHist

    return nextStateMem , evName ,evData
end extEVENTHistory
##### iGame3D STACK SETUP STEP 2 #####
##### DIRECTORIES AND PROPERTIES #####
-- --
Function folderPath aDataFolder
   put gameRoot() into gStackDirectory
   set itemDel to "/"
   repeat for each item i in aDataFolder
      if i is "Data" then
         put item itemOffset(i,aDataFolder)+1 to  -1 of aDataFolder into aDataFolder
         exit repeat
      end if
   end repeat
   put gStackDirectory&"Data/" into theDirectory
   --put specialFolderPath("Documents") & "/Data/" into theDirectory
   set the folder to theDirectory
   if theDirectory is in aDataFolder  then 
      put aDataFolder into FolderPath
   else
      put theDirectory & aDataFolder into FolderPath
   end if
   
   if  item -1 of FolderPath contains "." then delete  item -1 of FolderPath
   if last char of FolderPath is not "/" then put "/" after FolderPath
   replace "//" with empty in folderpath
   
   put createFullFolderPaths(FolderPath) into CreateTheFolder
   set the folder to gStackDirectory
   set the Directory to gStackDirectory
   if char -1 of folderPath <> "/" then put "/" after folderpath
   return FolderPath
end folderPath

-- --
Function allFolders  where
  put unquoted(where) into whatFolders
  put folderPath() into igame3dFolderPath
  put gameRoot() into theRootPath
  set itemDel to "/"
  if num(items of whatFolders) < num(items of igame3dfolderpath) then
    if item  1 of whatFolders is "Data" then delete char 1 to 5 of whatFolders
    put igame3DFolderPath & whatFolders into whatFolders
    end if
  if whatFolders is empty then put igame3dFolderPath into whatFolders 
  put whatFolders into tPath
  set the folder to tPath
  put folders() into allFolders
  filter allFolders without "*.*"
  filter allFolders without "*..*"
     put ",external,fmod,rev,.,archive,clean" into foldersToIgnore
       put allFolders into checkFolders
  repeat for each item x  in foldersToIgnore
    filter checkFolders without ("*"&x&"*")
  end repeat
 put checkFolders into listFolderUpdate
  replace "+" with space in listFolderUpdate
       set the folder to theRootPath
  filter listFolderUpdate without "*.*"
  return listFolderUpdate
end allFolders

-- --
Function createFullFolderPaths tPath
  set itemDel to "/"
  put "/" & item itemOffset("Data",tPath)+1 to -1 of tPath into theShortPath
  replace gstackDirectory with empty in theShortPath
  put gstackDirectory & "Data/"  into iGame3DDataPath
  replace iGame3DDataPath with empty in theshortPath
  replace "//" with empty in theshortpath
  set the folder  to (iGame3DDataPath)
  put iGame3DDataPath into LongERPATH
  repeat for each  item x in theshortPath
    set the folder  to LongERPATH
    put folders() into  LongerList
    filter longerList without "*.*"
    if last char of LongERPATH <> "/" then  put  "/" after LongERPATH
    put x    after LongERPATH
    if last char of LongERPATH <> "/" then  put  "/" after LongERPATH
    replace "//" with "/" in longerPath
    if x is not among the lines  of  LongerList   then
      create folder x  --- LongERPATH
      put LongERPATH & cr after creatorList
      next repeat
    end if
  end repeat
  
  
  set the folder to theRootPath
  set the directory to theRootPath
  return creatorList
end createFullFolderPaths

-- --
Function filesin where withFilter
  put folderPath() into igame3dFolderPath
  put gameRoot() into theRootPath
  set the folder to theRootPath
  replace quote with empty in where
   set itemDel to "/"
   if item 1 of where is "Data" then delete item 1 of where
 
  if item 1 to num(items of igame3dFolderPath) of where  is igame3dFolderPath  then
    put where into thePath
  else
    put FolderPath()  & where into thePATH
  end if
 replace "//" with "/" in thepath
  if last char of thePath is not "/" then put "/" after thePath
  set the folder to thePATH
  put files() into allFiles
  set itemDel to comma
  put " *DS_Store*,.*,Icon*" into freaks
  repeat for each item x in freaks
    filter allFiles without x
  end repeat
  replace (cr & cr) with empty in AllFiles
  replace "%22" with quote in allFiles
  replace "+" with space in allFiles
 
  set the folder to rem
  if withFilter is not empty then 
    if char 1 of withFilter is "-" then 
      delete char 1 of withFilter
    filter allFiles without withFilter
  else
      filter allFiles with withFilter
    end if
end if
set the folder to theRootPath
  return  allFiles
end filesin

--commented out because of problems without external ope2021
-- --
Function thisLevel what
   --   put ig3d_GetLevelName__s() into thisLevelReturn
   --   if thisLevelReturn is empty then
   --     put "Data/Levels/" & nextLevelName() into Nam
   --     ig3d_SetLevelName_s Nam
   --     end if
   --    switch what
   --      case empty
   --        set itemDel to "/" 
   --        put item -1 of ig3d_GetLevelName__s() into thisLevelReturn
   --        break
   --      case "long"
   --         put ig3d_GetLevelName__s() into thisLevelReturn
   --        break
   --        case "r"
   --          case "w"
   --         put "file:/" & folderPath(thisLevelReturn) into  thisLevelReturn
   --         break
   --       case "path"
   --         put folderPath(thisLevelReturn) into  thisLevelReturn
   --         break
   --    end switch
   --    return thisLevelReturn
end thisLevel

-- --
Function pathAndFile where
  put folderPath(Where) into newhere
 put filesIn(where) into allfiles
  repeat for each line W in allFiles
    put newhere & W & cr after listFileName
  end repeat
  delete char -1 of listfilename
  return listFileName
end pathAndFile
###### LIST FILE FUNCTIONS  ######
-- --
Function listFilesFiltered daFilta where
  put filesIn(where) into listScripts
  filter listScripts with "*" & daFilta
  sort listScripts
  return listScripts
end listFilesFiltered

-- --
Function listWTF where
  put filesIn(where) into myList
  filter myList with "*.wtf"
  return myList
end listWTF

-- --
Function listTextures where
  if where is "all" then
    put allFolders() into realList
    repeat for each line x in realList
      put pathAndFile(x) & cr after isitaTex
      --  --put isitaTex
    end repeat
  else
    put pathAndFile(where) into isitaTex
  end if
  put "png,jpg,gif,mov" into kinds
  repeat for each item c in kinds
    put isitatex into finalCheck
    filter finalCheck with ("*."&c)
    put finalCheck & cr after finalTex
    delete last char of finalTex
  end repeat
  sort finalTex
  replace "+" with space in finalTex
  return finalTex
end listTextures

-- --
Function stackList what
  --put unquoted(word 2 the name of stack (the mainStack of this stack)) & return & the substacks of stack (the mainStack of this stack) into stackList
  get the substacks of stack (the mainStack of this stack)
  sort it
       put the short name of stack (the mainStack of this stack) & cr & it  into allStacks
  if what is not empty then 
  if char 1 of what is "-" then
  filter allStacks without what
else
  filter allStacks with what
end if
 end if
  return allStacks
end stackList

-- --
Function pathToLuaScript luaFilename  -- find the file in either LUA or scripts
put luaFilename & ".lua" into tfile
if tfile is in filesin("help/ig3d_Lua") then put "help/ig3d_Lua" into prepath
if tfile is in filesin("help/ig3d_Lua") then  put "help/ig3d_Lua" into prepath
if tfile is in filesin("Scripts") then put "Scripts/" into prepath
if tfile is in filesin("Scripts/Functions") then put "Scripts/Functions/" into prepath
if tfile is in filesin(ig3d_GetLevelName__s()) then put  ig3d_GetLevelName__s() &"/" into prepath
put "file:/" & FolderPath(prepath) & tfile into luaFile
put URL luaFile into LuaCheck
put filterLuaForFunctions(luaFile) into funcs
return luaFile
end pathToLuaScript
 function UserInfo whatInfo
   replace quotes with empty in whatInfo
   --------------RETURN THE USER INFO
    put "$User$Home$Path$Shell" into uGlobalVars
  delete char 1 of uGlobalVars
  set itemDel to "$" 
  repeat with x = 1 to the number of items of uGlobalVars
    put "$" & item x of uGlobalVars  && "into TheVal" into theVar
   do "put" && theVar 
    put "$" & item x of uGlobalVars & tab   & theVal & cr after USERVAR
  end repeat
  put "gStackDirectory"   & tab & folderPath() & cr after USERVAR
  put specialFolderList() after USERVAR
  put  "processor()" & tab & processor() & cr after USERVAR
  put "platform()"&tab & platform()  & cr after USERVAR
  put "systemVersion()" & tab  & systemVersion()  & cr  after USERVAR

  if whatINfo is empty then   return  USERVAR
  if whatInfo is a number then return line whatInfo of UserVar
  repeat with x = 1 to num(lines of userVar)-1
    put word 1 of line x of UserVar & comma after theUserFolders
      end repeat
      delete last Char of theUserFolders
put lineOffset(whatInfo,USERVAR) into OffsetPick
    if whatInfo is char 1 of line OffsetPick of USERVAR then return line OffsetPick of USERVAR
  if whatInfo is not empty then return line OffsetPick of USERVAR
  put userPPath() into theUserPreferencesPath
end UserInfo

-- --
Function specialFolderList which
  put "Desktop,Preferences,System,Fonts" into folderList
  repeat for each item x in folderList
    put x& tab & specialFolderPath(x)  &"/" & cr after FPLIST
  end repeat
  if which is a number then return line which of FPLIST 
  if which is "" then 
  return FPLIST
  else
  put "*" & which & "*" into filta
  filter FPLIST with filta
    return word 2 of FPLIST
    end if
end specialFolderList

###### iGame3D TOOLS #################################################################################
######################################################################################################
-- --
Function ToolsList whichstak,whichgroup,whichcontrols
--put "objects,triangles,PlayGame,dropModel,reposition,view,select,vertex,line,split,disconnect,pathselect,path,quad,plane,cube,cylinder,cone,sphere,light,GLtext,particle,sounds,camera" into ToolPickerToolistout
put controlsList(whichstak,whichgroup,whichcontrols) into ToolPickerToolistout
replace "button " with empty in ToolPickerToolistout
replace quote with empty in ToolPickerToolistout
replace cr with comma in ToolPickerToolistout
return ToolPickerToolistout
end ToolsList

-- --
Function ig3dToolIndex whatTool
  put "objects,line,select_mesh,vertex,split,disconnect,pathSelect" into DefaultTools
  if whatTool is  among the items of DefaultTools  then  return itemOffset(whatTool,"objects,line,select_mesh,vertex,split,disconnect,pathSelect")-1
if whatTool is among the items of "particles,sounds" then return 0
return 999 ----was 999 out of range for empty tool
end ig3dToolIndex

-- --
Function chooseATool whatTool
hidefone
  put 999 into ig3dToolIndexValue
  put the userTool of stack (the mainStack of this stack) into theTOOL
  put editingModes() into MODES
   put the short name of stack (the mainStack of this stack) into ig3dMainStack
  if whatTool is among the items of MODES then  
    put whatTool into  tEditingMode
    set the editingMode of stack (the mainStack of this stack) to tEditingMode
  end if
  if whatTool  is among  items of ToolsList(ig3dMainStack,"ig3d_Editing_Mode_Tools_Group","button") then
    put the loc of btn whatTool of stack ig3dMainStack into TLOC
    set the loc of grc "pickit" of stack ig3dMainStack to TLOC
    updateRootEditMode whatTool
  end if
   
  put ig3dToolIndex(whatTool) into ig3dToolIndexValue
  if ig3dToolIndexValue > 7 then ig3d_SetSelection_s ""
  switch whatTool
  case "object"
  case "objects"
    ig3d_SelectWholeMesh
    ig3d_InvertMeshSelection
    break
  case "path"
  case "pathselect"
    put visibleElements("paths",true) into action ---ig3d_SetPathsVisible_b true
    break
   
  case "light"
    case "lights"
      put visibleElements("lights",true) into action
    ig3d_ShowLights_b true
    put 0 into ig3dToolIndexValue
    break
  end switch

  if ig3dToolIndexValue = 0 or ig3dToolIndexValue > 7 then put setMkey(blockedEvent,"update_mesh") into setBlock
  else put setmkey(blockedEvent,"nothing") into setblock
  put (the altKey is Down)&(the shiftKey is down) into AB
  put "snapShot,level,colors,display,camera" into  NoChangeVals
  if ig3dToolIndexValue is a number and whattool is not among the items of NoChangeVals then ig3d_SetMeshTool_i ig3dToolIndexValue
  if whatTool is among the items of "vertex,line,split,disconnect" then 
  set the editingMode of stack (the mainStack of this stack) to "select_mesh"
  end if
  put setMkey(UserTool,whatTool) into setUserTool
  put updateStatusField(whatTool) into updateStatusEditingMode
 
  --if the editigmode of stack (the mainStack of this stack) is not "select_mesh" then deselectAllmesh
   replace "select_" with empty in whattool
   set the title of stack "sceneGraph" to  whattool &"::"& therootpick()
  return ig3dToolIndexValue,whatTool
end chooseATool

######################################################################################################
-- --
Function ToolUnits wTool,Witem,WValue

  put the toolUnits of stack (the mainStack of this stack) into TVals
  put "quad,cube,dropmesh,cone,cylinder,sphere,path,objects" into DTools
  put getMkey(editingmode)into em
  put em & comma & "Width,Height,Depth" into toolOptions
  if em is "quad" then 
    put em & comma & "Width,Depth,Material" into toolOptions
    if wvalue is not empty  then
      if  Witem is "Material" or witem is 3 then 
        if witem > num(lines of ig3d_GetMeshMaterialsList__s()) then put ig3d_GetCurrentMaterialNumber__i() into wvalue
--        ig3d_SetCurrentMaterialNumber_i (wvalue)
      end if
    end if
  end if
  if em is "Cube" then put em & comma & "Width,Height,Depth,Face,Floor,Top,Front,Back,Left,Right" into toolOptions
  if witem is "root" then return item 2 to -1 of tooloptions
  
  if witem is not empty then
    if witem is a number then  add 1 to witem
    if witem is not a number then put itemOffset(witem,tooloptions) into witem
    if witem <2 then put 2 into witem 
  end if
   
  
  if tVals is empty or wTool is empty then
    repeat for each item ts in dtools
      put ts & ",1,1,1,0,0" &cr after toolOset
    end repeat
    delete char -1 of tooloset
    put "cube,1,1,1,out,true,true,true,true,true,true" into line 2 of tooloset
    set the toolUnits of stack (the mainStack of this stack) to tooloset
    put tooloset into tvals
    return tvals
  end if
  
  put lineoffset(wTool,Tvals) into TLINEN
  
  if TLINEN < 1 then put 1 into TLINEN
  put line TLINEN of tvals into tline
  if witem is empty then return item 2 to -1 of tline
  if wvalue is empty  then return item witem of tline
  
  if wvalue is empty  then 
    put itemOffset("high",toolOptions) into H
    put itemOffset("Low",toolOptions) into L
    put item  H of tline into hrnd
    put item L of tline  into lrnd
    if hrnd < 1 then put 1 into hrnd
    if lrnd < 1 or lrnd > hrnd  then put 1 into lrnd
    put hrnd into item h of tline
    put lrnd into item L of tline
    put tline into line tLinen of tvals
    set the toolunits of stack (the mainStack of this stack) to tvals
  end if
  
  
  put wvalue into item witem of line lineoffset(wtool,tvals) of tvals
  set the toolUnits of stack (the mainStack of this stack) to TVals
  return tvals
   
end ToolUnits
  
  function lowRandToolUnits wTool,WItem,WValue
    put the LowToolUnits of stack (The mainstack of this stack) into Tvals
    put "quad,cube,dropmesh,cone,cylinder,sphere,path,objects" into DTools
  put getMkey(editingmode)into em
  put em & comma & "Width,Height,Depth" into toolOptions
  if em is "quad" then put em & comma & "Width,Depth,Material" into toolOptions
  if witem is not empty then
if witem is a number then  add 1 to witem
      if witem is not a number then put itemOffset(witem,tooloptions) into witem
      if witem <2 then put 2 into witem 
      end if
if tVals is empty or wTool is empty then
    repeat for each item ts in dtools
      put ts & ",1,1,1" &cr after toolOset
      if ts is "Quad" then delete put "quad,1,1" into line 1 of tooloset
    end repeat
    delete char -1 of tooloset
    set the LowToolUnits of stack (the mainStack of this stack) to tooloset
    put tooloset into tvals
    return tvals
  end if
 put lineoffset(wTool,Tvals) into TLINEN
  if TLINEN < 1 then put 1 into TLINEN
  put line TLINEN of tvals into tline
if wvalue is empty  then 
  put em & "," & toolunits(em) into ToolVals
  repeat with n = 1 to num(items of ToolOptions)
    put item n of ToolVals into Hrnd
    put item n of Tline into Lrnd
    if hrnd < 1 then put 1 into hrnd
      if lrnd < 1   then put 1 into lrnd
      if lrnd > hrnd then 
      put hrnd into h
      put lrnd into hrnd
      put h into lrnd
      end if
      put toolunits(em,(item n of toolOptions),hrnd) into setToolHi
      put lrnd into item n of tline
  end repeat
     put tline into line tLinen of tvals
set the LowToolUnits of stack (the mainStack of this stack) to tvals
end if
if witem is empty then return item 2 to -1 of tline
  if wvalue is empty  then return item witem of tline
    if wvalue is not empty then
      put wvalue into item witem of line lineoffset(wtool,tvals) of tvals
      set the LowToolUnits of stack (the mainStack of this stack) to TVals
      return tvals
    end if

end lowRandToolUnits
-- --
Function randomizeToolUnits
  put getmkey(editingmode) into em
  put toolUnits(em) into Tline
  put toolUnits(em,"root") into ToolOptions
  put lowRandToolUnits(em) into Rline
  put itemOffset("depth",toolOptions) into N
  repeat with W = 1 to N
    put item W of Tline into H
    put item W of Rline into L
    if H <> L then 
      put random(H) into rndnum
      if rndnum < L then put L into rndnum
      put rndnum into item W of tline
    end if
  end repeat
  return Tline
end randomizeToolUnits
-- --
Function unquoted thestring
  replace quote with empty in thestring
  return thestring
end unquoted
-- --
Function quoted what
  return (quote & what & quote)
end quoted

 function isPropBad theProp
    if theProp is among the items of globalNames() then return true
if theProp is among the lines of the commandNames then return true
if theProp is among the lines of the propertyNames then return true
if theProp is among the lines of the functionNames then return true
if theProp is among the lines of the constantNames then return true
if theProp is "scriptLineCount" then return true

    if theProp is "" or theProp is "Sound" then return true
    if theProp is  a number  then return true 
    if   number of chars of theProp < 2 then return true
    if theProp is " " then return true 
	 if theProp is cr then return true 
	 if theProp is "empty" then return true 
    put "a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z" into ALPHABET
    if char 1 of theProp is not among the items of ALPHABET then return true
    if theProp contains "/" then return true
    if theProp contains "-" then return true
    if theProp is "player" then return true
     if number of words of theProp > 1 then return true
    return false
end isPropbad

-- --
Function setMkey whatProp whatVal
if whatProp is a number then return empty
 replace (quote & quote) with (qoute) in whatVal
 if whatVal is quote then put "empty" into whatVal
 if whatVal is empty then put "empty" into whatVal
  put "1,2,3,4,5,6,7,8,9,0," & "~,`,!,@,#,$,%,^,&,*,(),-.[.].;'.<.>.?./." into freaks
  if whatProp is "" or whatProp is cr then return empty
  put paramcount() into n
  if whatVal contains comma then
  if n > 2 then
  repeat with x  = 2 to  paramCount()
    put param(x) & comma after whatVal
  end repeat
  delete last char of whatVal
end if
  end if
    if whatProp contains space or char 1 of whatProp is among the items of freaks or char 1 of whatProp is among the items of freaks then 
    put the customKeys of stack (the mainStack of this stack) into cList
    put lineOffset(whatProp,clist) into nkil
    if line nkil of clist is whatprop then delete line nkil of clist
    set the customKeys of stack (the mainStack of this stack) to cList
      return empty
    end if
  if char 1 of whatVal is quote then delete char 1 of whatVal
    if char -1 of whatVal is quote then delete char -1 of whatVal
    if whatVal is cr or whatVal is empty or whatVal is (quote & quote) then put  "the" && whatProp && "of stack (the mainStack of this stack) to empty" into doSetProp
else put "the" && whatProp && "of stack (the mainStack of this stack) to" && quoted(whatVal)   into dosetProp
replace (quote & quote) with (quote) in dosetProp
try
  do "set" && dosetProp
  end try
put line 1 to 100 of the mKeyChangesList of stack(the mainStack of this stack) into mKeyChanges
if dosetProp <> line 1 of mKeyChanges then
put dosetProp & cr before mKeyChanges
if mKeyChanges <> "" then set the mKeyChangesList of stack (the mainStack of this stack) to  mKeyChanges
end if
return dosetProp 
end setMkey

-- --
Function getMKey what
--  return what
  if what is "" then return empty
  replace quote with empty in what
  replace space with empty in what
   put "put the" && what && "of stack (the mainStack of this stack) into thePropOfStk" into doGetProp
do doGetProp
return thePropOfStk
end getMKey
-- --
Function updateStatusField what,Whattext
  if gidling is false then return "updateStatusField no idle"
  if the tool is not "browse tool" then return "updateStatusField pointer tool"
if what is among the items of "tooltip,askwith,popup,drag" then 
set the label of btn "status"  of stack (the mainStack of this stack) to Whattext
return What,whatText
end if 

  put the userTool of stack (the MainStack of this stack) into theTool
    put item 1 to 2 of keysDown() into KeyzDown
put numtoChar(KeyzDown) into Keyz
if item 1 of what is a number then put what into theStatus
  --put  ig3d_GetMeshCentroid__3f() into newMeshCenter
if theTool is among the items of "select,vertex,line,quad,plane,cube,cylinder,cone,sphere" then 
put  tab & "|" & "Centroid:" & newMeshCenter& tab & "|" & tab & "Polygons:" & ig3d_GetNumberOfPolys__i() after theStatus  
end if
return newmeshcenter
put   theTool &tab & "|"&  tab   &"key "& Keyz  & tab &"key# " & keyzdown &tab &  "|" & tab  before theStatus
 put ig3d_GetPlaneInfo__if() into checkgrid
if item 1 of chekgrid is 0 then put "xz" into thePLane
else if item 1 of chekgrid is 1 then put "xy" into thePlane
else if item 1 of chekgrid is 2 then put "yz" into thePlane
put tab  & "Plane: " & thePlane && item 2 of checkGrid after theStatus
put the lastig3dexternalevent of stack (the mainStack of this stack) into LiG
if what is not in LIG then 
set theLastIg3dExternalEvent of stack (the mainStack of this stack) to empty
put Lig& tab before theStatus 
end if
put "-"&what&"-" & tab before  thestatus
if what is "tooltip" then put whatText & space before theStatus
replace cr with " | " in theStatus
set the label of btn "status"  of stack (the mainStack of this stack) to theStatus
return theStatus
  get the windowSnapTo of stack(the mainStack of this stack)
  if it is true then windowSnap
end updateStatusField

-- --
on windowSnap theStyle
  exit windowsnap  ---- stop windowsnap during editing 11 27 2006 -- bill
  put GLTitleShadowChange() into checkGLTS
  if item 1 of checkGLTS is "false" then put 0 into GLtitleShift
  else put 18 into GLtitleShift
  
  ----if the commandKey is down then 
  put  the windowSnapStyle of stack (the mainStack of this stack) into oldStyle
  if theStyle is empty then put oldStyle into theStyle
  set the windowSnapStyle of stack (the mainStack of this stack) to thestyle
  put ig3d_GetWindowBounds__4i()  into GLBOUNDS
   
  put windowbound() into WINdrec
  put the windowboundingrect into theWindowBounds
  put item 4 of theWindowBounds into FR
  
  if the shadow of stack "SceneGraph" is true then  set the shadow of stack "SceneGraph" to false
    set the decorations of stack "fileslibrary" to "title,menu,minimize,close"
  --if the shadow of stack "filesLibrary" is true then  
  --set the shadow of stack "filesLibrary" to true
   
  switch theStyle
  case "playgame"
    put item 3 of Glbounds into R
    put item 2 of GLbounds into T
    set the topLeft of stack "FilesLibrary" to R,T
    exit windowSnap
    break
  case default
  case "top"
   
    
    break
  case "bottom"
    put item 1 of  GLBounds into W
    put item 1 of glbounds &"," & item 4 of Glbounds into TR
    --    set the topLeft of stack "toolpicker" to TR
    --    set the height of stack "toolPicker" to 24
    --put item 4 the rect of stack "toolPicker"+18 into B
     
    ##Put item 4 of GLBounds+b
    put "sceneGraph,previewStack" into COLONE
    repeat for each item S in COLONE
       
      if S is in the windows then 
        set the left of stack S to w
        set the top of stack S to B
        put the rect of stack S into WB
        put item 4 of WB into B
      end if
    end repeat
    put item 3 the rect of stack "sceneGraph"+1 into Wid
    put "filesLibrary,dev,message box" into ColTwo
    put top of stack "scenegraph" into w
    repeat for each item S in ColTwo
      if S is in the windows then 
        set the left of stack S to Wid
        set the top of stack S to W
        put the rect of stack S into WB
        put item 3 of WB into Wid
      end if
    end repeat
    
    --set the topRight of stack "filesLibrary" to bottomRight of stack "toolpicker"
    put width of stack "filesLibrary" & "," & height of stack "filesLibrary" into xy
    ##send resizestackStack && xy to stack "filesLibrary"
    break
  case "free"
    break
  case "main"
    put the rect of stack (the mainStack of this stack) into Mbound
    --    set the topLeft of stack "toolPicker" to (item 1 of mbound,item 4 of mbound)
    break
  end switch
  
  choose browse tool
  --send isnapped to cd btn 1 of stack (the mainStack of this stack) in 40 milliseconds
  checkpopPreviewStack
end windowSnap
-- --
Function absminusdif  itemsDifs
  set itemDel to comma
  put number of items of line 1 of itemsDifs into n
  if n is 0 then return empty
  put 1 into cnc
  repeat with x = 1 to 3
    put item x of line 1 of itemsDifs into vD
    put  item x of line 2 of itemsDifs into vDS
    put  vD & "," & vDS & comma after theVS
    try
      put abs(vD - vDS) & comma after checkITEMDIF
    end try
  end repeat
  delete last char of checkITEMDIF
  return checkITEMDIF
end absminusdif

--function iGame3DFileMenuFill What
--  put "New/N,Import,Export,Save Level/S,,,," into menuHead
--  replace comma with cr in menuhead
--return menuHead
--end iGame3DFileMenuFill
###### iGame3D MENUS ######
#####    FILE MENU   #####
-- --
Function iGame3dFIleMenuPick whatPick
  --put iGame3DFileMenuFill()  into btn "File" of group "igame3dMenu1" of stack (the mainStack of this stack)
  replace quote with empty in whatPick
  
  switch whatPick
  case "Mesh|Clear"
    answer "Do you want to save the current mesh?" with "Yes" and "No" and "Cancel"
    put it into theAnswer
    if theAnswer is  "Yes" then 
      put listWTF("WTF") into mlist
      filter mlist with "untitled-*"
      filter mlist with "*.wtf"
      put "untitled-" & num(lines of mlist)+1 into namewithnumber
      ask "Save mesh to file:" with namewithnumber
      if it is not empty then 
        replace ".wtf" with empty in it
        put folderPath("WTF") & it & ".wtf" into theFILE
        ig3d_SaveMeshAsWTF_sf theFILE,100
      else
        return empty
      end if
    end if
    if theAnswer is not "Cancel" then 
      ig3d_SelectWholeMesh
      ig3d_DeleteMesh_b true
    end if
    break
  case "Level|New"
    put "Do you want to save" && thisLevel() && "before closing?" into asktosaveLevel
    answer asktosaveLevel with "Yes" and "No" and "Cancel"
    if it is "cancel" then return empty
    if it is "Yes" then ig3dSaveLevel
    ask "New Level Name"
    if it is not empty then
      ig3d_ClearScene_b true
      put "Data/Levels/" & it into newLevel
      put folderPath(newLevel) into makeafolder
      ig3d_SetLevelName_s newLevel
      ig3dSaveLevel
    end if
    break
  
    case "Level|Reset"
      put thisLevel("long") into tLevel
       put "loadLevel(" & quoted(tLevel) & ")" into tScriptExe
               --put tScriptExe
               --put ig3d_ExecuteLua_s_i(tScriptCheck) into output
            SendLuaCommand(tScriptExe)

      break
  case "Mesh|Export"
    set the loc of stack inspector to -1000,-1000
    palette stack "inspector"
    go card "default" of stack "inspector"
    go card "MeshExport" of stack "inspector"
    --open stack "Export3D"
    break
  case "Level|Save/S"
    case "Level|Save"
  case "Save Level"
    save this stack
    ig3dSaveLevel
    break
  case "Mesh|Save In Level"
    ig3dSaveLevel "andMesh"
    break
  end switch
  
end igame3dFileMenuPick

-- --
Function nextLevelName whatName
  if whatname is empty then put "level" into whatName
  put allFolders("levels") into tList
  filter tList with ("*"&whatName&"-*")
  ##Put tlist
  put num(lines of tlist)+1 into n
  put whatName & "-" & n into nextName
  put allFolders("levels") into tList
  filter tList with ( "*"&nextName&"*")
  if num(lines of tList) >1 then  put whatName & "-" & n+num(lines of tList)  into nextName
  return nextName
end nextLevelName

-- --
Function GetLevelMesh
     put thisLevel("w") & "load script.lua" into theLUaF
      put URL theLUAF into theLUA
      put theLua into Luaout
      filter theLua with "loadMesh(*"
set itemDel to quote
put item 2 of line 1 of theLua into theMeshFile
    set itemDel to "/"
    put itemOffset("data",theMeshFile) into N
return item n to -1 of theMeshFile
end GetLevelMesh
-- --
on ig3dSaveLevel How
  put ig3d_GetLevelName__s() into theLevel
  if theLevel is empty then put "Data/levels/" & nextLevelName() into theLevel
  put thisLevel("path") into fullPath
  put thisLevel("w") & "load script.lua" into theLUaF
  put URL theLUAF into theLUA
  put theLua into Luaout
  filter theLua with "loadMesh(*"
  set itemDel to quote
  put item 2 of line 1 of theLua into theMeshFile
  set itemDel to "/"
  put itemOffset("data",theMeshFile) into N
  put item -1 of theLevel & ".wtf" into LevelWTF
  if   how is "andMesh" or themeshFile is empty or item -1 of theLevel is item -1 of theMeshFile then
    put fullPath & LevelWTF into SavedLevelmesh
  else
    put folderPath() & item n+1 to -1 of theMeshFile into SavedLevelmesh
  end if
  if how is "andMesh" then put ig3d_SaveMesh_sf_b(SavedLevelmesh,100) into ReturnMesh
  put theLevel &"/load script.lua" into theFileName
  ig3d_SaveLevel_s theFileName 
end ig3dSaveLevel
#####iGame3d WINDOW MENU
  function ig3dWindowMenuPick theITEMS
  set itemDel to "/"
  put item 1 of theItems into realItems
  switch realItems
  case "Scene Graph"
    case "scenegraph"
    if the commandKey is down then 
      set style of stack "sceneGraph" to topLevel
      open stack "sceneGraph"
    else
      palette stack "sceneGraph"
    end if
    break
    break
 
  case " Window Snapping"
    put "Window Snapping" into line 1 of btn "Window" of group "igame3dMenu1"
    put setMkey(windowSnapTo,false) into setSile
    break
  case "Window Snapping"
    put "!c Window Snapping" into line 1 of btn "Window" of group "igame3dMenu1"
    put setMkey(windowSnapTo,true) into setSile
    --------windowsnap
    break
  case "Console"
    put "Console" into theWindowToOpen --open stack "Console"
    break
  case "Inspector"
    put "Inspector" into theWindowToOpen

    break
  case "Animation Editor"
    put "NewAnimED" into theWindowToOpen
    --open stack "NewAnimED"
    break
  case "Level Collect"
    put "CollectForOutput" into theWindowToOpen
    --open stack "CollectForOutput"
    put allFolders("Levels") into fld "levelslistofme" of stack "CollectForOutPut"
    break
  case "Macros"
  
    break
  case "Particles"
      --open stack "Emitters"
    break
  case "Quad Map"
     
    --open stack "QuadMapper"
    break
  case "Snapshot"
    --put "Snapshot" into theWindowToOpen
    --open stack "Snapshot"
    break
  case "Library"
    put "filesLibrary" into theWindowToOpen
    break
  end switch
  set itemDel to "|"
  switch item 1 of RealItems
    case "Layout"
       if item 2 of RealItems is not empty then windowSnap(item 2 of realItems)
      break
   
        
  end switch
   if theWindowToOpen is not empty then
    if the commandKey is down then
      set the style of stack theWindowToOpen to topLevel
    else 
      set the style of stack theWindowToOpen to palette
    end if
  end if

   open stack theWindowToOpen
end ig3dWindowMenuPick

##SCRIPT HARVESTED as #VITAL
-- --
Function ManageFScript bool
  put line  lineoffset("1042",the frontScripts) of the frontScripts into reF
  put reF is in the frontScripts into refLives
  if bool is "" then return  refLives
  
  put "revFrontScript" && refLives   into ManagerevFMessage
  if bool <> "" then
     if bool is "false"  and  refLives is "true" then   remove script of reF from front
     -- revlibary stack deprecated at some point? bill -2021
    --if bool is "true" then insert script of button "revFrontScript" of stack "revlibrary" into front
  end if
  put reF is in the frontScripts into refAfterAction
  put "," && refAfterAction after ManagerevFMessage
  put setMkey(allowFrontS,bool) into AllowFrontsBOOL

  return bool
end ManageFScript
-- --
on pointerAction
   if environment() is "development" then 
  lock screen
  put ManageFScript(true) into OkFrontS
  write "tool not browse tool:" && the tool & cr to stderr
 
  set the defaultMenuBar to "revMenuBar"
  palette stack "revTools"
  if "revTools" is in the windows then choose pointer tool
  write "pointerAction" && the tool & cr to stderr
  put setMkey(lastTool,the tool) into setTOOL
  set the defaultMenuBar to "revMenuBar"
  select stack (the mainStack of this stack)
 palette stack "Message Box"
 end if
if "Message Box" is in the windows then
  set the height of stack "Message Box" to the Height of stack "scenegraph"
  set the width of stack "Message Box" to 401
  set the topLeft of stack "Message Box" to left of stack "filesLibrary",bottom of stack "filesLibrary"+20
  end if
end pointerAction
########  SUBSTACKS FILESLBRARY AND PREVIEWIMAGE   DRAG AND DROP ########
-- --
on LibrarymenuPick mypick  --- moved to mainstack 012307
  if the commandKey is down then 
    set style of stack "filesLibrary" to toplevel
    set the decorations of stack "filesLibrary" to the decorations of stack (the mainStack of this stack)
  else
    if "filesLibrary" is among the lines of the windows is false then 
      palette stack "filesLibrary" 
    end if
  end if
put getMkey(pickedLibrary) into OldPick
 put field "nameFilter" of stack "filesLibrary"  into oldname
 put empty into fld "nameFilter" of stack "FilesLibrary"
  put setMkey(pickedLibrary,myPick) into tLibraryPick
  send ClickLibraryTab to stack "filesLibrary"
  put setMkey(setLibraryOpen,true) into consoleStat
put the width of stack "fileslibrary" into b
put the height of stack "filesLibrary" into r
send "resizeStack" && b &"," & r to stack "Fileslibrary"
put oldName into fld "nameFilter" of stack "Fileslibrary"
 send "parseFilter" to fld "list" of stack "filesLibrary" in 50 millisecs
end LibrarymenuPick

-- --
on checkLibraryDrag
  if  fld "fullpathlabel" of stack "filesLibrary" is not empty then
    put fld "fullpathlabel" of stack "filesLibrary"  into tFP
    set the pickedLongFile of stack (the mainStack of this stack) to tFP
    replace gameRoot() with "" in tFP
    set the pickedShortFile of stack (the mainStack of this stack) to tFP
    set itemdel to "/"
    put last item of tFP into FNM
    put char -4 to -1 of tFP into EXTN
    put  setPreviewStack(extn) into setuppre
    if the mouse is down then send dragit to fld "List" of stack "filesLibrary" in 10 millisecs
  end if
end checkLibraryDrag
-- --
on setPreviewImageOnPick n
  set the loc of stack "previewImage" to -256,-256
  lock screen
  show stack "previewImage"
  set the decorations of stack "previewImage" to none
  set the width of stack "previewImage" to n
  set the height of stack "previewImage" to n
  set the rect of image "previewImage" of stack "PreviewImage" to 0,0,n,n
  hide    stack "previewImage"
end setPreviewImageOnPick

-- --
Function setPreviewStack  whatEXTN
  lock screen
  put the pickedLibrary of stack (the mainStack of this stack) into MN
  put the pickedShortFile of stack (the mainStack of this stack) into shortedFile
  put the pickedLongFile of stack (the mainStack of this stack) into LongedFile
  set itemDel to "/"
  put char 1 to -5 of last item of shortedFile into extLessFileShortNAM
  --  --put extLessFileShortNAM
  set itemDel to comma
  put ".aif,.ogg,.mp3,.mov" into theSounds
  if whatExtn is among the items of theSounds then
    put  image "soundicon22x22.png" of stack (the mainStack of this stack) into image "previewImage" of stack "previewImage"
    set the windowShape of stack "previewImage" to the ID of  image "previewImage" of stack "previewImage"
    
  end if
  switch whatEXTN
  case ".png"
    show player "previewPlayer"
    set the fileName of image "previewImage" of stack "previewImage" to LongedFile
    set the fileName of player "previewPlayer" of stack "filesLibrary" to LongedFile
    set the fileName of player "previewPlayer" of stack "previewStack" to LongedFile
    if "tryout" is in the windows then set the filename of image "Image" of stack "tryout" to fld LongedFile
    set the windowShape of stack "previewImage" to the ID of  image "previewImage" of stack "previewImage"
    break
  case ".emt"
    put  image "particles.png" of stack (the mainStack of this stack) into image "previewImage" of stack "previewImage"
    set the windowShape of stack "previewImage" to the ID of  image "previewImage" of stack "previewImage"
    break
  case ".ogg"
    put  image "soundicon22x22.png" of stack (the mainStack of this stack) into image "previewImage" of stack "previewImage"
    set the windowShape of stack "previewImage" to the ID of  image "previewImage" of stack "previewImage"
    break
  case ".lua"
  case ".txt"
    --put  image "console.png" of stack (the mainStack of this stack) into image "previewImage" of stack "previewImage"
    set the windowShape of stack "previewImage" to the ID of  image "previewImage" of stack "previewImage"
    break
  case ".wtf"
    put listTextures("data/WTFPreviews") into TList
    put folderpath()& "WTFPreviews/" into clearit
    replace clearit with empty in Tlist
    put extLessFileShortNAM & "_WTF.png" into Tname
    put folderPath("WTFPreviews") & tName into FNAM
    if Tname is among the lines of TList then
      set the fileName of image "previewImage" of stack "previewImage" to FNAM
      set the windowShape of stack "previewImage" to the ID of  image "previewImage" of stack "previewImage"
    else
      --put  image "WTFICon.png" of stack (the mainStack of this stack) into image "previewImage" of stack "previewImage"
      set the windowShape of stack "previewImage" to the ID of  image "previewImage" of stack "previewImage"
    end if
    break
  end switch
  palette stack "previewImage"
end setPreviewStack

-- --
on SnapPreviewStack
--  if "previewStack" is among the lines of the windows is false then palette stack "previewStack"
--  set the decorations of  stack "previewStack" to none
--  put the fileName of player "previewImage" of stack "fileslibrary" into FNM
--  set the fileName of image "previewImage" of stack "previewStack" to FNM
--  put the rect of image "previewImage" of  stack "previewStack" into myR
--  set the rect of   stack "previewStack" to myR
--  put the topRight of stack "filesLibrary" into FLR
--  set the topleft of  stack "previewStack" to FLR
--  set the topleft of player "previewPlayer" of  stack "previewStack" to FLR
end SnapPreviewStack
-- --
on checkDRAGS

  set the dragging of stack (the mainStack of this stack) to true
  set  itemDel to "/"
  put the pickedShortFile of stack (the mainStack of this stack) into shortedFile
  put the pickedLongFile of stack (the mainStack of this stack) into LongedFile
  put the last item of LongedFile into FNM
  put char -4 to -1 of FNM into DRAGGEDWHAT
  put the screenMouseLoc into MSLOC
  put the mouseloc into xy
  put the short name of the current card of stack "inspector" into whatCard
  set itemDel to comma
  put word -1 of the pickedLibrary of stack (the mainStack of this stack) into DragFromCard
  if MSLOC is within the rect of stack "filesLibrary" then
    switch DRAGGEDWHAT
    case ".wtf"
      break
    case ".png"
      prepDropTexture
      break
    end switch
  end if
  if msloc is within  glrect() then
    libraryToGlDrag
    exit checkDrags
  end if
end checkDRAGS

-- --
on checkDrop
  choose browse tool
  hide stack "previewImage"
  set the cursor to busy
  set  itemDel to "/"
  set the dragging of stack (the mainStack of this stack) to false
  put the pickedShortFile of stack (the mainStack of this stack) into shortedFile
  put the pickedLongFile of stack (the mainStack of this stack) into LongedFile
  put the screenMouseLoc into MSLOC
  put the editingmode of stack (the mainStack of this stack) into em
  put item 1 of shortedFile into firstFolder
  put the last item of LongedFile into FNM
    put glrect() into GLR
  if "levels" is among the items of longedFile then put true into loadexeable
  set itemDel to "."
  put item 1 of FNM into ShortErName
  put char -4 to -1 of FNM into DroppedEXT
  put ".png,.jpg,.pdf,.mov,.tif" into theimagetypes
  set itemDel to comma

  #####DROP IN sceneGraph
  if the screenmouseloc is within the rect of stack "scenegraph" then
    if DroppedEXT is among the items of theimagetypes then dropNewTexture
    if DroppedEXT is ".wtf"  then droppedWTF
    if droppedEXt is among the items of ".lwo,.3ds,.obj,.mesh" then DropAMesh
    if droppedExt is ".emt" then droppedEmitter
  end if
    if the screenMouseloc is within GLR  then put GLDRopDragged(LongedFile) into action

  ###DROP IN GL RECT
 
if the screenmouseLoc is within the rect of stack "filesLibrary" then
  set itemDel to "="
  put getMkey(OriginalMaterialData) into OGMat
  set itemDel to comma
  put item 2 of  line lineOffset("texture",ogMat) of OGMat into oldTex
  put gameroot() & oldTex into fullpath
 set the fileName of image "previewImage" of stack "previewStack" to fullpath
set the dropMatTexture of stack (the mainStack of this stack) to fullpath
    if em & theRootPick() is "meshMaterials" then put ig3d_GetCurrentMaterialNumber__i()  into CN
    put ig3d_GetMeshMaterialInfo_i_s(CN) into matINFO
     put  1 & cr & "texture=" & oldTex into matInfo
  ig3d_SetMeshMaterialInfo_is cn,matInfo
  ##put cn,matinfo
 setTOMeshMaterial CN --origin
end if
  

if the screenmouseloc is within the rect of stack "Console" then
  if DroppedEXT is ".lua" then 
    send addToConsoleOpenFiles && (shortedFile,"open") to stack "console"
  end if
  end if
  choose browse tool
end checkDrop

-- --
on libraryToGlDrag
  set  itemDel to "/"
  put the pickedShortFile of stack (the mainStack of this stack) into shortedFile
  put the pickedLongFile of stack (the mainStack of this stack) into LongedFile
  put the last item of LongedFile into FNM
  put char -4 to -1 of FNM into DRAGGEDWHAT
  put the screenMouseLoc into MSLOC
  put the mouseloc into xy
--  put the short name of the current card of stack "inspector" into whatCard
  set  itemDel to comma
  put  getMkey(UserTool) into UTOOL
  
  if UTOOL is "objects" then
    if DRAGGEDWHAT is ".txt" then
      put ig3d_GetSelection__s() into sel
      put ig3d_GetObjectInfo_s_s(sel) into objstart
     ig3d_HandleClick
      ig3d_FoolMousePosition_2i (item 1 of MSLOC),(item 2 of MSLOC) ---Click in the GLWindow at x,y
    put ig3d_GetObjectInfo_s_s(sel) into objafter
      if linecount(objafter) < 2 then
        ig3d_SetObjectInfo_2s (line 1 of objstart),objstart 
      else
        SendLuaCommand("get(" && quoted(line 1 of objafter)&")")
      end if
    end if
  end if
 
  
end libraryToGlDrag

-- --
Function GLDropDragged what
  put getMkey(Glrect) into GLR
  put GLmouseloc() into XYZ
  put setMkey(droppedXYZ,xyz) into dropXYZ
  set the cursor to busy
  set  itemDel to "/"
  put the pickedShortFile of stack (the mainStack of this stack) into shortedFile
  put the pickedLongFile of stack (the mainStack of this stack) into LongedFile
  put the screenMouseLoc into MSLOC
  put item 1 of shortedFile into firstFolder
  put the last item of LongedFile into FNM
  if levels is among the items of longedFile then put true into loadexeable
  set itemDel to "."
  put item 1 of FNM into ShortErName
  put char -4 to -1 of FNM into DroppedEXT
  
  put ".png,.jpg,.pdf,.mov,.tif" into theimagetypes
  set itemDel to comma
  
  switch DroppedEXT
  case ".lua"
    if ShortEdFile contains "load script" and  ShortEdFile contains "Levels" then   then
      put "file:/" & LongedFile into tFile
        put url tFile into tScriptCheck
        put "-- Begin of auto-script"& cr & "mesh(" into MeshLIN
        put "-- Begin of auto-script"& cr & "loadMesh(" into MeshLIN
        replace meshLin with newmeshLin in tScriptCheck
        put tScriptCheck into URL tFiles
##Put tscriptCheck
            set itemDel to "/"
            delete item -1 of shortedFile
            put "loadLevel(" & quoted(item 1 to -1 of shortedFile) & ")" into tScriptExe
               --put tScriptExe
               --put ig3d_ExecuteLua_s_i(tScriptCheck) into output
            SendLuaCommand(tScriptExe)
            ##Put tScriptExe
      else
      if loadexeable is true  then
        put "file:/" & LongedFile into tFile
        put url tFile into tScriptExe
        put ig3d_ExecuteLua_s_i(tScriptExe) into output

      end if
    end if
    break
  case ".wtf"
    droppedWTF
    break
  case ".emt"
    droppedEmitter
    break
  case ".lwo"
    case ".3ds"
      case ".mesh"
        case ".obj"
        dropAmesh
        break
  end switch
  --    ###PUT  what
  return what
end GLDropDragged

-- --
on DropAMesh what
  if what is not empty then 
    replace folderPath() with empty in what
  put folderPath() & what into theFile
  else
  put getMkey(pickedLongFile) into theFile
  put getMkey(pickedShortFile) into sfile
end if
put getmkey(EditingMode) into EM
put theRootPick() into RP
put randomizeToolUnits() into DropMeshScale
if em & RP is "levelmesh" then 
 if replaceLevelMesh() is not empty then exit dropamesh
end if
ig3d_PushMeshToUndoCache
ig3d_SelectWholeMesh
    ig3d_InvertMeshSelection
  if theFile is not empty then  
  put ig3d_LoadMesh_sf_b(theFile,100) into loadig3DMeshFile --,100
  put glMouseLoc() into xyz
put item 2 of dropMeshScale/2 into Noff
  if em is "DropMesh" then ig3d_ScaleSelectedMeshTo_3f item 1 of DropMeshScale,item 2 of DropMeshScale,item 3 of DropMeshScale
 
   put ig3d_GetMeshBounds__6f() into theSize
set itemDel to comma
  put 1 into cnc
  repeat for each item x in "1,3,5"
    put item x of theSize into vD
    put  item x+1 of theSize into vDS
    put  vD & "," & vDS & comma after theVS
    try
      put abs(vD - vDS) & comma after SMI
    end try
  end repeat
  delete  char -1 of SMI
put item 2 of smi/2 into noff
if char -3 to -1 of theFile is not "WTF" then
repeat for each item n in SMI
  if n > 5000 then
    put DropMeshScale into SMI
    exit repeat
    end if
end repeat
ig3d_ScaleSelectedMeshTo_3f (item 1 of SMI),(item 2 of SMI),(item 3 of SMI) --added 010607--bill
end if
if char -3 to -1 of theFile is "WTF" then ig3d_SetMeshPositionNoUndo_3f (item 1 of xyz),(item 2 of xyz+noff),(item 3 of xyz)
 end if
end DropAMesh

-- --
on DuplicateMesh ntag
  put gridPen() into xyz
   put ig3d_GetMeshCentroid__3f() into mxyz
  put the editingMode of stack (the mainStack of this stack) into em
      ig3d_DuplicateMesh
    put num(lines of ig3d_GetMesh_tagsList__s()) into M
    repeat with RmvNum = 1 to M
    ig3d_RemoveFromMesh_tag_i RmvNum
  end repeat
  
    if ntag is empty then put newTagForToolAction() into ntag
   
    ig3d_AddToMesh_tag_i ntag
put line ntag of ig3d_GetMesh_tagsList__s() into Ttag
  put setMKey(dropMeshTag,ttag) into setTtag
  put setMkey(MeshTagNumber,ntag) into setTag
  put not (the shiftKey is down) into tbool
    put meshActualSize() into Tscale
    repeat with nwhd = 1 to 3   
      put item nwhd of "width,height,depth" into NA
      put toolUnits("dropmesh",NA,item nwhd of tscale) into setToolunits
      put lowRandToolUnits("dropmesh",Nwhd,item nwhd of tscale) into lowrands
    end repeat
    put toolUNits(em) into HWD
    add item 1 of tscale to item 1 of mxyz
    add item 3 of tscale to item 3 of mxyz
      put (item 2 of Tscale/2) into Tdelta
     if em is "cube" and Tdelta < item 2 of HWD then put round(item 2 of HWD/2) into Tdelta
     put false into AllTrue
     repeat with nn=1 to 3
       if item nn of xyz = item nn of mxyz then put true into allTrue
     end repeat
     if allTrue is "true" then add item 2 of tscale to item 2 of xyz
  if the mouse is down then ig3d_SetMeshPositionNoUndo_3f (item 1 of xyz),(item 2 of xyz)+tDelta, (item 3 of xyz)
 else ig3d_SetMeshPositionNoUndo_3f (item 1 of xyz),(item 2 of xyz), (item 3 of xyz)
 put ig3d_GetMeshCentroid__3f() into Lastxyz
 set the lastCentroid of stack the mainStack of this stack to xyz
end DuplicateMesh
-- --
on DupeDropMesh tNum
  put randomizeToolUnits(dropmesh) into HWD
  put gridPen() into xyz
  put the lastcentroid of stack (the mainstack of this stack) into OldCent
  put the editingMode of stack (the mainStack of this stack) into em
  put getMKey(dropMeshTag) into Ttag
  
  put ig3d_GetMesh_tagsList__s() into tlist
  if  num(lines of tlist) = 0 then exit dupeDropMesh 
  if tnum is empty then put getMkey(MeshTagNumber) into tnum 
  put not (the shiftKey is down) into tbool
   ig3d_SelectMesh_tagVertices_ib tnum,tbool
  ig3d_DuplicateMesh
  
   ig3d_RemoveFromMesh_tag_i tnum
    put newTagforToolAction() into ntag

    ig3d_AddToMesh_tag_i ntag
    if em is "dropMesh" and the mouse is down then ig3d_ScaleSelectedMeshTo_3f (item 1 of hwd),(item 2 of hwd),(item 3 of hwd)
    put meshActualSize() into Tscale
      put (item 2 of Tscale/2) into Tdelta
     if em is "cube" and Tdelta < item 2 of HWD then put round(item 2 of HWD/2) into Tdelta
     put false into AllTrue
     repeat with nn=1 to 3
       if item nn of xyz = item nn of oldcent then put true into allTrue
     end repeat
     if allTrue is "true" then add item 2 of tscale to item 2 of xyz
  if the mouse is down then ig3d_SetMeshPositionNoUndo_3f (item 1 of xyz),(item 2 of xyz)+tDelta, (item 3 of xyz)
 else ig3d_SetMeshPositionNoUndo_3f (item 1 of xyz),(item 2 of xyz), (item 3 of xyz)
 put ig3d_GetMeshCentroid__3f() into Lastxyz
 set the lastCentroid of stack the mainStack of this stack to xyz
end DupeDropMesh
-- --
Function replaceLevelMesh
    put getMkey(pickedLongFile) into theFile
  put getMkey(pickedShortFile) into sfile
  put thisLevel("w") & "load script.lua" into theLUaF
      put URL theLUAF into theLUA
      put theLua into Luaout
      filter theLua with "loadMesh(*"
  put line 1 of theLUA into LM
 set itemDel to quote
 put item 2 of LM into OldNam
set itemDel to "/"
put item -1 of sfile into NN
put item -1 of oldNam into Oln
if oln is not empty then
 answer "replace " &&  oln && "  with  " && nn with "Cancel" and "OK"
 if it is not "Cancel" then 
    ig3d_SelectWholeMesh
    ig3d_DeleteMesh_b true
      put ig3d_LoadMesh_sf_b(theFile,100) into loadig3DMeshFile --,100
  ig3d_SetMeshPosition_3f 0.00,0.00,0.00
replace oldnam with sfile in luaout
put luaout into url theluaf
    end if
     refillcolumns
    return it
  end if
  
end replaceLevelMesh
-- --
on droppedWTF
  put glrect() into GLR
  set  itemDel to "/"
  put getMKey(pickedShortFile) into shortedFile
  put getMKey(pickedLongFile) into LongedFile
  put the screenMouseLoc into MSLOC
  put the last item of LongedFile into FNM
  put setMkey(defaultDropName,FNM) into theModelName
  put item 2 of shortedFile into put
  set itemDel to "."
  put item 1 of FNM into ShortErName
  put char -4 to -1 of FNM into DRAGGEDWHAT
  put char -4 to -1 of FNM into DropEXT
  put getMkey(UserTool) into theTOOL
put getmkey(EditingMode) into EM
put theRootPick() into RP
if em & RP is "levelmesh" then 
if replaceLevelMesh() is not empty then exit droppedWTF
end if
  if em is "DropMesh" then put TOOLUNITS("Dropmesh") into CTV
ig3d_SelectWholeMesh
    ig3d_InvertMeshSelection
  set itemDel to comma
  
--  #### COPY WTF LEVEL FILE INTO WTF FOLDER
--  if SecondFolder <> "WTF" then
--    put "file:/" & LongedFile into GetU
--    put URL GetU into loadWTFToCopy
--    put "file:/" & FolderPath("WTF") & fnm into WTFToWrite
--     put "Data/WTF/"&fnm into shortedFile
--     put setMkey(pickedShortFile,shortedFile)  into setShortfile
--     put folderPath("WTF") & fnm into longedFile
--     put setMkey(pickedLongFile,longedFile) into setLongfile
--     put shortedFile & cr & longedFile into TheWTFPATH
--    put loadWTFToCopy into URL WTFToWrite
--  end if
  
 if msloc is within GLR then put  GLmouseloc() into XYZ
else put theAuxBodPosit() into xyz

  if MSLOC is within GLR or msloc is within the rect of stack "SceneGraph" then
    put getMkey(dropModelMode) into checkMode
    switch checkMode
    case "select_mesh"
    case "dropMesh"
  put gStackDirectory & shortedFile into meshDropped
  fixAc3DWTFExportTextures meshDropped
 write meshDropped & cr to stderr
put setMkey(DropMeshFile,meshDropped) into saveit
put newTagForToolAction() into NTag
      put ig3d_LoadMesh_sf_b(meshDropped,100) into r
        put getMkey(lastAuxiliaryBodyPosition) into LAstuaxBodxyz
    ig3d_SetMeshPosition_3f (item 1 of LAstuaxBodxyz),(item 2 of LAstuaxBodxyz),(item 3 of LAstuaxBodxyz)
    ig3d_AddToMesh_tag_i  Ntag
put line ntag of ig3d_GetMesh_tagsList__s() into tagName
put setmkey(dropMeshTag,tagname) into setdropmeshtag
      put chooseATool("select_mesh") into chosenTOOL
      break
         case "make"
      put ig3dList("objects") into OList
      filter oList with fnm&"*"
      put num(lines of olist)+1 into noo
      replace ".wtf" with empty in fnm
      put ig3d_GetObjectsList__s() into EarlyList
      put FNM &noo& "=make(ig3d_object," && quoted(FNM&".wtf")&")" into luaCommand
    put ig3d_ExecuteLua_s_i(luaCommand) into luamakecom
     ###POSITION THE IMPORTED OBJECT HERE
     put ig3d_GetObjectsList__s() into SecondList
     repeat for each line T in secondList
       put T into ThenewName
       if T is not in earlylist then exit repeat
     end repeat
      if theTOOL is not empty then put chooseATool("objects") into theTool
      put getMkey(lastAuxiliaryBodyPosition) into LAstuaxBodxyz
      put ig3d_GetObjectInfo_s_s(ThenewName) into theData
      put line 1 of LAstuaxBodxyz into line 2 of theData
      ig3d_SetObjectInfo_2s ThenewName,theData
      break
    end switch
  end if
  set the cursor to arrow
end droppedWTF

-- --
on fixAc3DWTFExportTextures PathToWTF
  put "file:/" & pathToWTF into WTFfile
  put url WTFfile  into WTFFileText
  put lineOffset("#Animations:",WTFFileText)-1 into e
  put lineoffset("#Materials:",WTFFileText) into b
  repeat with n = b to e
    set itemDel to "="
    put line n of WTFFileText into WTFLine
     put item 1 WTFLine into theAttribute
    put item 2 WTFLine into tPath
        if char 1 to 7 of theAttribute is  "texture" then 
    set itemDel to "/"
    if num(items of tPath) = 1 then put "Data/Images/" before tpath
  put itemOffset("Data",tpath) into DataN
   put item DataN to -1 of tpath into fpath
    put theAttribute & "="  & fPath into line n of WTFFileText
    put theAttribute & "="  & fPath & cr after checkPaths
      end if
  end repeat
replace "emission=0.000000,0.000000,0.000000,1.000000" with "emission=0.700000,0.700000,0.700000,1.000000" in WTFFileTextWDWRDFSWD
 set itemDel to "/"
 if "Data" is not in PathToWTF then put "Data/WTF/" & item -1 of PAthToWTF into PathToWTF
 put WTFFileText into URL WTFfile

end fixAc3DWTFExportTextures
-- --
on dropNewTexture
  put the pickedShortFile of stack (the mainStack of this stack) into shortedFile
  put the pickedLongFile of stack (the mainStack of this stack) into LongedFile
    put the short name of the current card of stack "inspector" into whatCard
switch whatCard
  case "materialsCard"
    set the filename of image "materialsTexture" of card "materialsCard" of stack "inspector" to fld "fullpathlabel"
     put ig3d_GetCurrentMaterialNumber__i()  into n
      put ig3d_GetMeshMaterialInfo_i_s(n) into myMat
      put line lineOffset("texture=",myMat) of mymat into myTex
      set itemDel to "="
      put item 2 of myTex into myFil
      put folderPath() & myFil into myMatfil
      set the fileName of  image "materialsTexture" of card "materialsCard" of stack "inspector" to myMatfil
      DropMaterialTexture
    break
    case "particlesCard"
      put setMkey(pickedTexture,shortedFile) into setmpick
               updateParticleTexture (shortedFile)
               put emitParticles() into wherePart
      break
end switch
end dropNewTexture
-- --
on DropMaterialTexture
  set the wholeMatches to true
    set topleft of  stack "previewImage" to -1000,-1000
  put glrect() into theGL
  put the screenmouseloc into xy
  send resetPreviewStack &&"corner" to stack "previewImage"
  set itemDel to "/"
  put fileName of image "previewImage" of  stack "previewImage" into fileP
put item -2 to -1 of fileP into shortFile
put shortFile  & cr & "on DropTexture " into checkDroppedTextureAction
put item -2 to -1 of fileP into shortFile
   set itemDel to comma
   
   
put the short name of the current card of stack "inspector" into shn
if xy is within the rect of stack "inspector" and shn is among the items of "materialsCard,meshCard,tagsCard" then
  --set the fileName of image "Materialstexture" of card "materialsCard" stack "INspector" to fileP
put shortFile into fld "texture" of card "materialsCard" stack "INspector"
    put ig3d_GetCurrentMaterialNumber__i()  into n
put   ig3d_GetMeshMaterialInfo_i_s(n) into matData
  put matData into matName
  put matName & cr & 1 & cr & "texture=" & shortFile into matInfo
  ig3d_SetMeshMaterialInfo_is n,matInfo
end if
--put updateInspectorFromMaterial() into updateInspec
end DropMaterialTexture
####### GL SCREEN DATA ######
-- --
Function GLRECT
   put the glRect of (stack the mainStack of this stack) into tGLRECT
  put ig3d_GetWindowBounds__4i()  into GLBOUNDS
  put glrect & cr & glbounds into ChecQ
  replace comma with empty in ChecQ
put abs(item 1 of GLBOUNDS-item 3 of GLBOUNDS) into GlWidth
  put abs(item 2 of GLBOUNDS-item 4 of GLBOUNDS) into GlHeight
  put abs(item 3 of GLBounds-(Glwidth/2)) into GLCenterX
  put abs(item 4 of GLBounds-(GlHeight/2)) into GLCenterY
  set the GLWidthHeight of stack the Mainstack of this stack to GLwidth & "," & Glheight
set the GLCENTERXY of stack the (mainStack of this stack) to round(GlCenterX) & "," &  round(GLCenterY)
  return GLBOUNDS
end GLRECT
-- --
Function SubDivisionValue what
  put the GLSubDivisionValue of stack (the mainStack of this stack) into TheSubDivisionValue
  if what is not empty then
    if what is "ask" then 
      ask "Plane Subdivisions Integer:" with TheSubDivisionValue
  if it is empty or it  < 1 then put 1 into it
  put it into TheSubDivisionValue
end if
else
put what into TheSubDivisionValue
end if
  set the GLSubDivisionValue of stack (the mainStack of this stack) to TheSubDivisionValue
return TheSubDivisionValue
end SubDivisionValue

-- --
Function theAuxBodPosit orSetit
  replace quote with empty in orSetIt
  put the lastAuxiliaryBodyPosition of stack (the mainStack of this stack) into AUXILLARYXYZ
  if num(chars of line 1 of AUXILLARYXYZ) < 2 then delete line 1 AUXILLARYXYZ
  if num ( items of line 1 of  AUXILLARYXYZ) < 3 then 
  put gridPen() into AUXILLARYXYZ
end if
if orsetit is not empty then put orSetit into AUXILLARYXYZ
 set the lastAuxiliaryBodyPosition of stack (the mainStack of this stack) to AUXILLARYXYZ
  return AUXILLARYXYZ
end theAuxBodPosit

###
-- --
Function GLMouseLoc
  put the screenMouseloc into scrnmslc
  put item 1 of scrnmslc into screenMouseX
  put item 2 of scrnmslc into screenMouseZ
  if the tool is not "browse tool" then return (screenMouseX&",0,"&screenMouseZ) 
  ### EXIT WHEN NOT IN GLRECT
  put the glRect of stack (the mainStack of this stack) into glrectCheck
  put ig3d_GetWindowBounds__4i()  into GLBOUNDS
  --  if scrnmslc is not within glbounds then  
  --    put (the GLMouseUp of stack (the mainStack of this stack)) into GLMousePosition
  --    put item 1 of GLMousePosition into gGLmouseX
  --    put item 2 of GLMousePosition into gGLmouseY
  --    put item 3 of GLMousePosition into gGLmouseZ
  --    ig3d_SetAuxiliaryBodyPosition_3f (item 1 of gGLmouseX),(item 2 of gGLmouseY),(item 3 of gGLmouseZ)
  --    return empty
  --  end if
  put the editingmode of stack (the mainStack of this stack) into theTool
  put item 1 to 3 of getToolOffsets() into GridUnitz
  ig3d_SetAuxiliaryBodySize_3f item 1 of GRidUNITZ,item 2 of GRidUNITZ,item 3 of GRidUNITZ
  ig3d_SetAuxiliaryBodyVisibility_b true
   
  put the lastAuxiliaryBodyPosition of stack (the mainStack of this stack) into LASTXYZ
  put the DrawPlaneHeight of stack (the mainStack of this stack) into Y
  put  ig3d_Get3DPositionFrom2DCoordinates_2ib_3f((screenMouseX),(screenMouseZ),false) into GLMousePosition
  set the GLMouseLoc of stack (the mainStack of this stack) to GLMousePosition
  #### Get the Center of a  Rounded Rectangle BASED ON GRIDSpace Unit Size
  put quote& glmouseposition & quote into GetMP
  
  put roundRectPoint(GetMP ) into MP ### GRIDPEN
  put (item 1 of mp),(item 2 of mp),(item 3 of mp) into theRoundedMouseCoordinates
  ##### MOVE THE AUXILLARY BODY
  --put mp
  if theTOOL is among the items of "path,quad,cube,plane,cylinder,cone,sphere,triangles" then
    put (item 1 of mp),(item 2 of mp),(item 3 of mp) into GLMousePosition
    ig3d_SetAuxiliaryBodyPosition_3f (item 1 of mp),(item 2 of mp),(item 3 of mp)
  else
    ig3d_SetAuxiliaryBodyPosition_3f (item 1 of GLMousePosition),(item 2 of GLMousePosition),(item 3 of GLMousePosition)
    put (item 1 of GLMousePosition),(item 2 of GLMousePosition),(item 3 of GLMousePosition) into GLMousePosition
  end if
  set the lastAuxiliaryBodyPosition of stack (the mainStack of this stack)  to GLMousePosition
  ##### GET THE MOUSEDOWNS
  put absminusdif(3,GLMousePosition)  into MouseDif
  put item 1 of GLMousePosition into gGLmouseX
  put item 2 of GLMousePosition into gGLmousey
  put item 3 of GLMousePosition into gGLmouseZ
  
  return GLMousePosition
end GLMouseLoc

-- --
Function ExecuteLuaS whatString
  
  put ig3d_ExecuteLua_s_i(whatString) into output
  return output
end ExecuteLuaS
-- --
on updateLuaScriptMemory
 put getMkey(ReloadluaList) into myList
 if thisLevel(Long) & "/load script.txt" is not  in myList then put thisLevel(Long) & "/load script.txt" &cr before myList
 repeat for each line LuaScriptFilePathName in myList
   put quote&LuaScriptFilePathName&quote into LSFPN
   ig3d_UpdateScript_s (LSFPN)
 end repeat
 ##put LSFPN
 end updateLuaScriptMemory

-- --
Function switchBool theText
  if theText is "true" then put "false" into boo
  if theText is "false" then put "true" into boo
if boo is not empty then put boo into theText
return theText
end switchBool
####### LUA TO CONSOLE #######
-- --
on SendLuaCommand theCommand
 set the lastLuaCommand of stack (the mainStack of this stack) to theCommand
  put ig3d_ExecuteLua_s_i(TheCommand) into dotheLuaCommand

end SendLuaCommand 
-- --
Function getLuaCom what
getLuaCommandList
put getMkey("luacommands") into LUaCOM
put getMkey("luaLoadedFunctions") into loadedF
put loadedF & cr before LUaCOM
put "file:/" & folderPath("help/ig3d_lua") & "luafullcommands.lua" into theHelpFile
put "gLuaCommands=[["& cr & LUaCOM & "]]" & "output(gLuaCommands)" & cr into URL theHelpFile
if what is not empty then  filter LUaCOM with  "*"&what & "*"
sort luacom
return luaCom
end getLuaCom

-- --
on getLuaCommandList   --- use getMkey(luacommands) to see lua commands
put "file:/" & folderPath("help/lua_help") & "LueReferenceManual.html" into tFile
put the LuaReferenceManual of stack (the mainStack of this stack) into tGetFile
put URL tGetFile into rawhtml
put rawhtml into URL tFile
put "<H3><A NAME=" & quote & "functions" & quote & ">Lua functions</A></H3>" into FunHead
put line lineOffset(FunHead,rawhtml)+1 to -1 of rawhtml into startFun
put line 1 to lineOffset("<H3>C API</H3>",startFun)-3 of startFun into luawords
replace quote & ">" with quote & ">" & cr in luawords
replace "<" with cr & "<" in luawords
filter luawords without "*>*" 
filter luawords without "*<*"
put "?,do,for,end,while,function,return,elseif,if,local,global" into luaStatements
replace comma with cr in luaStatements
put "file:/"&folderpath("help/ig3d_lua")&"ig3dEnginecommands.txt" into commandsURL
put cr &  URL commandsURL after luaStatements
put luaStateMents & cr before luawords
sort luawords
replace cr & cr with cr in luawords
set the luacommands of stack (the mainStack of this stack) to luawords
put "file:/" & folderPath("scripts") & "gLuaCommands.lua" into theHelpFile
put "gLuaCommands=[["& cr & luawords & "]]" &cr& "print(gLuaCommands)" & cr into luaFileLuaCommands
put luaFileLuaCommands into URL theHelpFile
end getLuaCommandList

-- --
Function ig3d_CoreLua fltWith,fltWithout
  put "file:/" & folderPath("Scripts") & "core.lua" into CORELUA
put URL CORELUA into tCore
if tCore is empty then 
Answer "iGame3D needs to write core.lua and restart" 
put the luaCoreStoreInStack of  stack (The mainstack of this stack) into LCSIS
put LCSIS into URL coreLua
answer "restart" with   "cancel" and "ok"
if it is "ok" then 
  save this stack
quit 
end if
else
set the luaCoreStoreInStack of  stack (The mainstack of this stack) to tCore
end if
put tCore into storeCoreIg3dCommands
filter storeCoreIg3dCommands with "*IG3D_*"
filter storeCoreIg3dCommands without "*(*"
set the ig3dLuaCommands of stack (the mainStack of this stack) to storeCoreIg3dCommands

if fltWith is not empty then 
  if fltWith is not a  number then 
  if char 1 to 3 of fltWith is "fun" then
filter tCore with "*function *"
replace "Function " with empty in tCore
set the luaLoadedFunctions of stack (the  mainStack of this stack) to tcore
else
filter tcore with "*"&n1&"*"
end if
end if
if fltWithout is not empty and fltWithout is a number and fltWith is a number then  return line fltWith to fltWithout of tcore  
end if
if fltWithout is not a number and fltWithout is not empty then filter tcore without "*" & fltWithout & "*"
return tcore
end ig3d_CoreLua
-- --
Function pathToLuaScript luaFilename  -- find the file in either LUA or scripts
put luaFilename & ".lua" into tfile
if tfile is in filesin("help/ig3d_Lua") then put "help/ig3d_Lua" into prepath
if tfile is in filesin("help/ig3d_Lua") then  put "help/ig3d_Lua" into prepath
if tfile is in filesin("Scripts") then put "Scripts/" into prepath
if tfile is in filesin("Scripts/Functions") then put "Scripts/Functions/" into prepath
if tfile is in filesin(ig3d_GetLevelName__s()) then put  ig3d_GetLevelName__s() &"/" into prepath
put "file:/" & FolderPath(prepath) & tfile into luaFile
put URL luaFile into LuaCheck
put filterLuaForFunctions(luaFile) into funcs
return luaFile
end pathToLuaScript
-- --
Function filterLuaForFunctions theLUAFilePath
if theLuaFilePath contains  folderPath() is false then put folderPath()  before theLUAFilePath
if theLUAFilePath contains "file:/" is false then put "file:/" before theLuaFilePath
put URL theLUAFilePath into readLuaFile
filter readLuaFile with "function *"
if readLuaFile is not empty then
replace "function " with empty in readLuaFile
put the luaLoadedFunctions of stack (the mainStack of this stack) into LUACOMS
set itemDel to "("
repeat for each line F in readLuaFile
put item 1 of F into aLuaFunc
if aLuaFunc is not in LUACOMS then 
put aLuaFunc & cr before LUACOMS 
set  the luaLoadedFunctions of stack (the mainStack of this stack) to LUACOMS
end if
end repeat
return readLuaFile
end if
end filterLuaForFunctions 
-- --
Function consoleLogCheck
---returns the last few lines of console.log Obsolete and unused
put "file://Volumes/" & line 1 of drives()  &"/Library/Logs/Console/" & word 2 of line 1 of userinfo() & "/console.log" into tFile
put URL tfile into consoleLogTextData
filter consoleLogTextData with "*,console,*"
filter consoleLogTextData without "*-multiline-"

put num(lines of consoleLogTextData) into tnum
put the lastConsoleCount of stack (the mainStack of this stack) into toldNum
if toldNum <1 then put tnum-1 into toldNum
if toldNum <> tNum then
put toldNum-tnum into tstart
set the lastConsolecount of stack (the mainStack of this stack) to tNum
put line tstart to -1  of consoleLogTextData into Consolereturns
set the  ConsoleLogData of stack (the mainStack of this stack) to consoleReturns

--if char 1 of checkForError = "[" then return ( "--!"&&checkforError &cr)

delete last char of consoleReturns
replace ",console," with ",-,error," in consoleReturns
if consoleReturns is not empty then 
  set itemDel to comma
repeat for each line CLogReturn in consoleReturns
   put item  -2 to -1 of CLogReturn into ErrorOut
   put "output("&quoted(ErrorOut)&")" into errormess
    put ig3d_ExecuteLua_s_i(errormess) into siledo
end repeat
end if

return Consolereturns

end if
return tNum
end consoleLogCheck
###### REVOLUTION TRANSCRIPT TO CONSOLE ######
-- --
on revolutionaryInput
  put me into termln
  if last word of termln is in "n.txt /n" then 
    put revComLastFile("new") into tDummy
    replace "n.txt" with "" in termln
    replace " /n" with "" in termln
  else
    put revComlastfile() into tRIF
    put offset(tRif,fld "leftList") into tL
    put num(lines in char 1 to tL of fld "leftlist") into tL
    send "actonselection" && tL to fld "leftList"
  end if
  if char 1 of termln = "." then replace "." with empty in char 1 of termln
  checkTail
  --put merge("[[cr]]>> [[termln]][[cr]]") after fld "editfield"
  put merge(">> [[termln]][[cr]]") after fld "editfield"
  lock error dialogs
  put DummyFunction() into tJunk
  if ConsoleBoxIndex = "" then init
  --set defaultStack to the topStack
  put cr & termln after ConsoleBoxHistory
  if the number of lines in ConsoleBoxHistory > 20
  then delete line 1 of ConsoleBoxHistory
  if word 1 of termln is not in the commandnames then 
    if word 1 of termln is "the" \
        or word 1 of termln is a number \
        or token 2 of termln is "("
    --then put value(termln, this card) & cr after fld "editfield" of stack "console"
    then put value(termln) & cr after fld "editfield" of stack "console"
    else send termln to this card
  else 
    if word 1 of termln = "put" then
      if " into " is not in termln and " after " is not in termln then
        put merge(" after fld [[quote]]editField[[quote]] of stack [[quote]]Console[[quote]]") after termln  ### :-)
      end if
    end if
    try
      do "global" && the globals & return & termln
    catch revError
      if item 1 of revError is a number and item 1 of revError >= 0 then
        put merge("//Message execution error:[[cr]]    Error description:") && line (item 1 of line 1 of revError) of the cErrorsList of fld "consoleIn" & cr after fld "editfield"
      else
        replace cr with cr & "   - " in revError
        put  merge("//Error: [[termln]][[cr]]   - [[revError]]") after fld "editfield" of stack "Console" 
      end if
    ----- finally
      if the result <> "" then 
        if "~revCom" is in word 1 of the result then 
          --do nothing
        else
          if line 1 to - 1 of the result = line (num(lines of the result) * -1) to -1 of fld "editfield" then
            --do nothing
          else
            put merge("//result of: [[termln]][[cr]]    - [[the result]]") & cr after fld "editfield"
          end if
        end if
      end if
    end try 
  end if
  if char -2 to -1 of fld "editfield" = cr&cr then
    --do nothing
  else put cr after fld "editfield"  of stack "Console"
  set scroll of cd fld "editfield" of stack "Console" to the formattedHeight of cd fld "editfield" of stack "Console"
  updatelinenums
  colorizeAll
  put "" into fld "consoleIn" of stack "Console"
  select after fld "consoleIn" of stack "Console"
end revolutionaryInput

-- --
Function FixMouseColor what 
  ### NEEDED TO CONVERT COLORS
  put item 1 of what * 1.032258 into rc
  put item 2 of what * 1.032258 into gc
  put item 3 of what * 1.032258 into bc
  return (round(rc) & "," & round(gc) & "," & round(bc))
end FixMouseColor

##### COLOR STACK   ######
-- --
Function updateCardColorGraphic RGB
  put the short name of the current card of stack "color" into whatCard
  put bigcolorval(RGB)  into screenRGB
  replace "card" with empty in whatcard
  if exists (grc whatcard of the current card of stack "color") then  set the secondColor of grc whatcard of the current card of stack "color" to screenRGB
  put "the" && whatCard & "ColorMemory" && "of stack (the mainStack of this stack)" && "to screenRGB" into doSetCardColor
  do "set" && doSetCardColor
  return screenRGB
end updateCardColorGraphic

#### EDIT MENU CUT MESH
-- --
on cutMesh
  put getMkey(MeshCutTagList) into tList
  put cutMesh & the num(lines of tList)+1 into cutTagName

  ig3d_InvertMeshSelection
  ig3d_MakeInvisible
  ig3d_SelectWholeMesh
  ig3d_DuplicateMesh
  ig3d_InvertMeshSelection
  ig3d_DeleteMesh_b false
    ig3d_SelectWholeMesh

  ig3d_ShowAll
end cutMesh

###### GRIDS AND QUADS #########
-- --
Function gridPen XYZ
      if XYZ is empty then put glmouseloc() into XYZ
  put roundRectPoint( xyz ) into GRIDPENVALUES
  return GridPenValues 
end gridPen

-- --
Function roundRectPoint roundTotheNumbers
 
  replace quote with empty in roundToTheNumbers
  put getMKey(editingMode) into em

put  getToolOffsets() into TheVars

if number of lines of roundToTheNumbers = 1 then
  put num(items of roundtothenumbers) into NI
  put item 1 to 3 of TheVars into TL
  put item 1 to 3 of roundTothenumbers into BL
  if em is "quad" then
  put item 2 of tl into item 3 of tl
  put 0 into item 2 of tl
  end if
else
  put line 1 of roundToTheNumbers into TL
  put line 2 of roundTotheNumbers into BL
end if
put num(items of BL) into R

repeat with x = 1 to r
  put item x of TL into N
    if n<1 then put 1+n into n
    put item x of BL into XYZ
    if XYZ is not empty then
     put round( (round(((XYZ-.01))/n)*n) +.01) into VARRound
    put VARRound & comma after  theRoundNumbers
    end if
end repeat

  delete last char of theRoundNumbers
  return theRoundNumbers
end roundRectPoint

-- --
Function theChosenPath n
  ### ESTABLISH PATH N 
put the chosenPathAttributeLine of stack (the mainStack of this stack) into LineNofPath

 put ig3d_GetPathsList__s() into thePathList
 put num(lines of thePathList) into Pc
 if n is not empty then put n into LineNofPath
 if lineNofPath < 1 then put PC into lineNofpath
 put line LineNofPath of thePathList into thepathName
 put thePathList into shortList
 set itemDel to "_"
  filter shortList with "*"&item 2 thePathName &"*"
 if thepathName is empty or  LineNofPath < 1 or num(lines of thePathList) < 1 then 
    put "path"&num(lines of shortList)+1 into ThenewName
    ig3d_CreatePath_s ThenewName
       put ig3d_GetPathsList__s() into thepathlist
put lineOffset(ThenewName,thepathlist) into LineNofPath
       put num(lines of thePathList) into numlinespath
      end if
put setMkey(chosenPathAttributeLine,LineNofPath) into setNewPickedlineOfList
put ig3d_GetPathInfo_i_s(lineNofPath) into allPoints
return (lineNofPath & cr & allPoints)
end theChosenPath

-- --
on startUpDefaultPath
  ig3d_CreatePath_s "path1"
  put setMkey(chosenPathAttributeLine,1) into setup
end startUpDefaultPath
-- --
Function PathFromMouseDown thePosition

if thePosition is empty then put gridPen() into thePosition
put thePosition into auxPos
  replace quote with empty in thePosition
put theChosenPath() into ThePathData
put line 1 of thePathData into lineNofpath
put line 2 to -1 of ThePathData into allPoints
if linenofpath < 1 or lineNofPath > num(lines of ig3dlist("paths")) then put 1 into linenofpath
### PATH  N IS ESTABLISHED CONTINUTE
      if thePosition is not among the lines of allPoints then 
      put  cr & line 1 of thePosition & cr after allPoints
      end if
if num(items of line 1 of allPoints)<3 then put auxPos into line 1 of allPoints
put the editingMode of stack the Mainstack of this stack into EM
--put em
if EM is "path" then ig3d_SetPathInfo_is linenofpath,allPoints
 return allPoints
end PathFromMouseDown

-- --
Function  recordMouseDowns mouseDownValues
  local mouseDownRecords
  put  theAuxBodPosit(line -1 of mouseDownValues) into AuxUpdate
  if mouseDownValues is "empty" then
    set the GLMOUSEDOWNARRAY of stack (the mainStack of this stack) to empty
    set the mouseDownCount of stack (the mainStack of this stack) to 0
  return empty
end if
  replace quote with empty in mouseDownValues
if num(items of line 1 of mouseDownValues) = 1 then
  put (item 1 of line 1 of mouseDownValues) into nextStateMem
  delete line 1 of mouseDownValues
  end if
if num(items of line 1 of mouseDownValues) = 4 then 
repeat for each line MK in mouseDownValues
  put item 2 of mk & "," &  item 3 of mk & "," &item 4 of mk & "," & cr after GridPens
end repeat
else
put mouseDownValues into GridPens
end if
--put mouseDownValues
  put the GLMOUSEDOWNARRAY of stack (the mainStack of this stack) into mouseDownRecords
     split mouseDownRecords by numtochar(13) and numtochar(14)
    get the keys of mouseDownRecords
    if nextStateMem is empty then put the number of lines of it+1 into nextStateMem
    put GridPens into mouseDownrecords[nextStateMem]
    combine mouseDownRecords with numtochar(13) and numtochar(14)
    set the GLMOUSEDOWNARRAY of stack (the mainStack of this stack)  to mouseDownRecords
    set the MouseDownCount of stack (the mainStack of this stack) to nextStateMem
    put setMkey(chosenMouseDownRecord,nextStateMem) into mouseDownUpate
    return nextStateMem
end recordMouseDowns

-- --
Function  getTagNumber whatName
    put ig3d_GetMesh_tagsList__s() into theTAGSList
put lineOffset(whatName,theTAGSList) into ig3dMeshTagIndexValue
 return ig3dMeshTagIndexValue
 end getTagNumber
  
-- --
Function newTagForToolAction NXYZ
    put the editingMode  of stack (the mainStack of this stack) into theTool
 put ig3d_GetMesh_tagsList__s() into Tlist
if theTool is "dropmesh" then put "drop_"& char 1 to -5 of getMkey(defaultDropName) into theTool
  if NXYZ is  empty then 
  put "-" into tagIdentity
else
put nxyz into tagIdentity
  replace quote with "|" in tagIdentity
  replace comma with "|" in tagIdentity
end if
  filter Tlist with theTool & "_*"
  put  theTool &"_" &num(lines of Tlist)+1&"_"&tagIdentity into newTagName
 ig3d_CreateMesh_tag_s newTagName
  put ig3d_GetMesh_tagsList__s() into MeshTagList
 put num(lines of MeshTagList) into NewTagNumber
 set the dropMeshTag  of stack (the mainStack of this stack) to newTagName
  set the MeshTagNumber of stack (the mainStack of this stack)  to newTagNumber
    ig3d_SetDefaultMesh_tag_i  NewTagNumber
return NewTagNumber
end newTagForToolAction

-- --
Function defaultTagNumber newTagNumber
  if newTagNumber is empty then return the MeshTagNumber of stack (the mainStack of this stack)
  ig3d_SetDefaultMesh_tag_i  NewTagNumber
  set the MeshTagNumber of stack (the mainStack of this stack)  to newTagNumber
return newTagNumber
end defaultTagNumber
-- --
Function setPath pathNumber,PathRecord
  local mouseDownRecords
  replace quote with empty in mouseDownValues
  put the GLMOUSEDOWNARRAY of stack (the mainStack of this stack) into mouseDownRecords
     split mouseDownRecords by numtochar(13) and numtochar(14)
    get the keys of mouseDownRecords
    put mouseDownrecords[pathRecord] into mouseDownValues
    combine mouseDownRecords with numtochar(13) and numtochar(14)
    ig3d_SetPathInfo_is pathNumber,(mouseDownValues)
    return mouseDownValues
end setPath

-- --
Function ClosedPolygonFrompath lineNofPaths
  put toolUnits("paths") into NXYZ
  put item 1 of NXYZ into GridUNITZ
  if lineNofPaths is empty then put getMkey("chosenPathAttributeLine") into lineNofPaths
  put ig3d_GetPathsList__s() into tlist
  if lineNofPaths is not 0 then 
    put ig3d_GetPathInfo_i_s(lineNofPaths) into allPoints
    
  
    if num(lines of allPoints) > 0 then
--      ig3d_ShowAll
      ig3d_PushMeshToUndoCache
      ig3d_SelectWholeMesh
      ig3d_MakeInvisible
      put "drawVertex(" & line 1 of AllPoints & ")" & cr into FirstOrigins
      put line 2 of allPoints into lastPoints
      put cr & line 1  of allpoints after allPoints
      repeat for each line drawAtPoint in allPoints
        put item 1 of NXYZ into GridUNITZ
                if abs(item 1 of lastPoints-item 1 of drawAtPoint) <> gridunitz or abs (item 3 of lastPoints-item 3 of drawAtPoint) <> gridunitz then put gridunitz*.1 into gridunitz 
        put -(GridUNITZ) into xval
        put -(GridUNITZ) into zval
        if item 1 of drawAtPoint < 0 then put -xval into xVal
        if item 3 of drawAtPoint < 0 then put -Zval into zVal

        put item 1 of drawAtPoint +xval into item 1 of DrawAtPoint
        put item 3 of drawAtPoint +zVal into item 3 of DrawAtPoint
        put "drawLine("&drawAtPoint&")"  into Firstorigin
        put  Firstorigin & cr after firstOrigins
        put drawAtPoint into lastPoints
      end repeat
      delete last char of firstOrigins
      put cr & line 1 of firstOrigins     after FirstOrigins
      
filter firstOrigins without "*,,*"
      put ig3d_ExecuteLua_s_i(firstOrigins) into luaaction
      ig3d_SelectConnectedMesh
      ig3d_CombineSelectedMeshOverlaps_f (.01)
      --put ig3d_GetMeshCentroid__3f() into matrixXYZ
      put ig3d_ExecuteLua_s_i("drawLine("&drawAtPoint&")" ) into luaaction
      ig3d_SelectConnectedMesh
      ig3d_MeshFaceAwayFromCamera
      ig3d_InvertMeshFaces
      put ig3d_GetMeshCentroid__3f() into matrixXYZ
      set the lastCentroid of stack (the mainStack of this stack) to matrixXYZ
    end if
  end if
  ig3d_ShowAll
end ClosedPolygonFrompath

-- --
Function QuadsFromPaths NXYZ
  replace quote with empty in nxyz
  put item 1 of nxyz into gridunitz
   if GridUnitz is empty then put  toolunits("quad",1) into GridUNITZ
  put getMkey("chosenPathAttributeLine") into LineNofPaths
  put ig3d_GetPathsList__s() into tlist
  if LineNofPaths <> 0 then 
    put ig3d_GetPathInfo_i_s(LineNofPaths) into PathsPoints
    if num(lines of PathsPoints) > 0 then
       ig3d_ShowAll
   ig3d_PushMeshToUndoCache
  ig3d_SelectWholeMesh
  ig3d_MakeInvisible
  put 1 into nLines
  repeat with dPoint = 1 to (number of lines of PathsPoints)-1
    put gridunitz&","&line dpoint of pathspoints into nxyz
    put lineMakeRect() into theFirstRects
     put DrawLineScript(quoted(theFirstLines)) into theFirstLines
   put line dpoint+1 of pathspoints into nxyz
    put lineMakeRect() into theSecondRects
    put DrawLineScript(quoted(theSecondRects)) into theSecondLinestheSecondLines
    replace (cr & cr)  with cr in theFirstLines
  replace (cr & cr)  with cr in theSecondLines
 
  put line 1 of theFirstLines & cr & line 3 to 4 of theSecondLines & cr  after SourcesOne
  put line 2 of theFirstLines & cr after SourcesTwo
  put Line 3 of theFirstLines & cr after SourcesThree
  put line 4 to 5 theFirstLines & cr after Closings
  end repeat
 
  put quoted(SourcesOne) into DataSend
put drawLineScript(DataSend) into theScript

put ig3d_ExecuteLua_s_i(theScript) into luaaction
end if
end if
###PUT  theScript
end QuadsFromPaths

###ATTEMPTED QUAD VIA TWO PATH POINTS INSTEAD OF CENTERED ON PATH POINT
-- --
Function  makeRectXZFromTwoPoints nxyzXXYYZZ
  replace quote with empty in nxyzXXYYZZ
  put item 1 of nxyzXXYYZZ into n
  put item 2 of nxyzXXYYZZ into x
  put item 3 of nxyzXXYYZZ into y
  put item 4 of nxyzXXYYZZ into z
  put item 5 of nxyzXXYYZZ into NEX
  put item 6 of nxyzXXYYZZ into NEY
  put item 7 of nxyzXXYYZZ into NEZ
  
  put X&","&Y&","&Z&cr  into XZ ## Point 1 origin X,Z
  put   X+N&","&Y&","&Z into XNZ     ## Point 2  X,Z to X+N,Z RIGHT+N
  put X+N&","&Y&","&Z+N into XNZN  ## Point 2 X+N,Z to X+N,Z+N 
  put X& ","&Y&","&Z+N into XZN ## Point  4 X+Gridunits,Z+GridUnits
  put  XZ into  ClosedCUBE ## POINT 5 CLOSE X,Z ## REctangle
  put  XNZN into ClosingDiagonal  
  put XZ&cr&XNZ&cr&XNZN&CR&XZN&cr&xZ into Cube
  put Cube & cr &XNZN into ClosedQuad
  return ClosedQuad
end makeRectXZFromTwoPoints

 
-- --
Function DrawQuadsAlongpaths LineNofPaths
  put getMkey(userTool) into theTOOL
  put TOOLUNITS("quads",1) into gridUnits
  if lineNofPaths is empty then put getMkey(chosenPathAttributeLine) into LineNofPaths
      put ig3d_GetPathInfo_i_s(lineNofPaths) into PathPoints
      put quoted(gridUnits & "," & line 1 of pathPoints & "," & line -1 of pathPoints) into tagidentity 
      put setMkey(userTool,"draw") into setDraw
         put newTagForToolAction(tagidentity) into NewtagNumber
         put setMkey(lastDrawID,NewtagNumber) into lastDrawSet
repeat with SU =1 to num(lines of  PathPoints)-1
  put line SU of pathPoints into SendUnits
  put line SU+1 of pathPoints into NextUnits
  put abs(item 1 of sendUnits - item 1 of NextUnits) into DifX
  put abs(item 3 of sendUnits - item 3 of NextUnits) into DifZ
-- if difx <gridunits or difz < (gridunits*.95) then_
  put gridPen(quoted(SendUnits)) into SendUnits 
  put theAuxBodPosit(quoted(SendUnits)) into newUnits
  ig3d_SelectWholeMesh
  ig3d_InvertMeshSelection
    put drawquad() into QuadMeshDraw

    put quadMeshDraw & cr after allDraw
end repeat
put setmkey(userTool,theTOOL) into ressettheTool

ig3d_ShowAll
 ig3d_SelectMesh_tagVertices_ib NewtagNumber,false
end DrawQuadsAlongpaths
-- --
Function drawQuad NXYZ
  replace quote with empty in NXYZ
  put getMkey(editingmode) into em
  put  toolUnits(em) into TUS
 
  put 1 into W --item 1 of TUS into W
  put 1 into H -- item 2 of TUS into H
  put 1 into H --item 3 of TUS into D
  put theAuxBodPosit() into AUXXYZ
 
  put defaultTagNumber() into newTagNumber
  ig3d_SetDefaultMesh_tag_i newTagNumber
  put toolUnits("quad","Material") into nmat
   put lineMakerect() & cr into LinesofRectangleData
 

  if nMat is empty or nMat is 0 then
    put 1 into nMat
    put toolUnits("quad","Material",nmat) into nmat
  end if
  --ig3d_SetCurrentMaterialNumber_i nMat
 
put "ok"
  if em is "Cube" then put LinesofRectangleData into LineDrawingRectangle
  else put DrawLineScript(quote&LinesofRectangleData&quote) into LineDrawingRectangle  ### NXYZ is grid units xyz rounded
  ig3d_PushMeshToUndoCache
  ## CREATE THE QUAD FROM VALUES
  put true into faceB
  if  getMkey(editingmode) is not "cube" then 
    ig3d_SetFacePos_b3f true,(item 1 of AUXXYZ),(-99999),(item 3 of AUXXYZ)
  else 
    put toolUnits("cube") into TUN
    put toolUnits("cube","root") into TRN
    if item itemOffset("Face",TRN) of TUN is "in" then put false into FaceB
    ig3d_SetFacePos_b3f FaceB,(0),(0),(0)
  end if
  if em is "quad" then 
    put H into D
    put 1 into H
  end if
  put ig3d_ExecuteLua_s_i(LineDrawingRectangle) into LUACTIONS
  ig3d_SelectMesh_tagVertices_ib NewtagNumber,false
  ig3d_SetMeshPositionNoUndo_3f 0.0,0.0,0.0
  ig3d_ScaleSelectedMeshTo_3f (W),(H),(D)
  put meshActualSize() into Tscale
  put (item 2 of Tscale/2) into Tdelta
  if em is "cube" and Tdelta < item 2 of tus then put round(item 2 of tus/2) into Tdelta
  ig3d_SetMeshPositionNoUndo_3f (item 1 of AUXXYZ),(item 2 of AUXXYZ)+tDelta, (item 3 of AUXXYZ)
  put ig3d_GetMeshCentroid__3f() into matrixXYZ
  set the lastCentroid of stack (the mainStack of this stack) to matrixXYZ
  --put ig3d_GetCurrentMaterialNumber__i() into nMat
  AutoApplyUVToQuad nmat
  --"usize, vsize, umod, vmod, ya, fixed, fx,fy,fz"
  ig3d_ShowAll
 
  return LineDrawingRectangle
end drawQuad

-- --
on AutoApplyUVToQuad nmat
 put "0.0,0.0,0.0,false,0.0,1.0,0.0" into SetUV
  if nmat is empty then put 1 into nmat
  put ig3d_GetCurrentMaterialNumber__i() into nMat
put 4 into nmat
  put ig3d_GetMatchingUVSizesForMesh_fb3f_2f(0,false,0,1,0) into nut
if item 1 of nut < 0 or item 2 of nut < 0 then put (1,1) into nut
ig3d_GenerateAndApplyMeshUVMapping_5fb3f item 1 of nut,item 2 of nut,item 1 of SetUV, item 2 of SetUV, item 3 of SetUV,item 4 of SetUV,item 5 of SetUV,item 6 of SetUV,item 7 of SetUV
      ig3d_SetMaterialForSelectedMesh_i nmat
end AutoApplyUVToQuad
-- --
Function quad what
  put the userTool of stack (the mainStack of this stack) into theTOOL
  put getMkey(editingMode) into em
  put   ToolUnits(em)  into UnitSize
  put glMouseloc() into GLMLOC
  if what is not empty then put what into glmloc
  --  if checkPosition is empty or checkPosition is GLMLOC then put theAuxBodPosit() into CheckPosition  ##gridPenMouseloc
  put defaultTagNumber() into newTagNumber
  switch theTOOL
  case "quad"
    put drawQuad() into QuadMeshDraw
    break
  case "triangles"
    put drawTriangles() into QuadMeshDraw
     
    ig3d_SelectMesh_tagVertices_ib NewtagNumber,false
    ig3d_SetMeshPositionNoUndo_3f (item 2 of NXYZ),(item 3 of NXYZ),(item 4 of NXYZ)
    break
  case "cube"
    put drawQuad() into QuadMeshDraw
    ig3d_SelectMesh_tagVertices_ib NewtagNumber,false
    break
  end switch
   
  ig3d_ShowAll
  return QuadMeshDraw
end quad

-- --
Function lineMakerect 
  local allMyRects
  put the DrawnRectsRecordArray of stack (the mainStack of this stack) into allMyRects
     split allMyRects by numtochar(13) and numtochar(14)
    get the keys of allMyRects
    put the number of lines of it+1 into NextRectNumber
  put getMkey(lineMakerectcount) into NCount
 put getMkey(editingMode) into EM
  if EM is "Cube" then 
  return complexCube() 
  else 
    put makeRectXZ()  after myLineScr 
    put the ALLRECORDEDRECTS of stack (the mainStack of this stack) into nxyzrec
  if  nxyzrec contains myLineScr  then return myLineScr
  put cr after myLineScr
    put myLineScr & cr after nxyzrec
        put myLineScr into allMyRects[NextRectNumber]
combine allMyRects with numtochar(13) and numtochar(14)
 set the DrawnRectsRecordArray of stack (the mainStack of this stack) to allMyRects
  add 1 to CNT
  put setMkey(lineMakeRectCount,CNT) into setMakeRectCount
  delete last char of mylinescr
end if
return mylineScr
end lineMakerect

##### ADD AUTO UV MAPPING TO A VARIATION OF THIS
-- --
Function complexCube 
  ###TRACK THE CUBES IN AN ARRAY
   local allMyCUBES
  put the DrawnCUBESRecordArray of stack (the mainStack of this stack) into allMyCUBES
     split allMyCUBES by numtochar(13) and numtochar(14)
    get the keys of allMyCUBES
    put the number of lines of it+1 into NextCUBENumber
#####
put the ALLRECORDEDCubes of stack (the mainStack of this stack) into CubeRecord
 put  makeRectZY()  into WallMinusX  ---Wall-X
  put makeRectXY()  into WallMinusZ   ---WALL-Z
    put makeRectXZ()  into tFloorQuad  --- FLOOR
    put tFloorQuad into tRoof
put WallMinusX into twallThree
put WallMinusZ into twallfour
    put drawLineScript(WallMinusX) into WallOne
put drawLineScript(WallMinusZ) into WallTwo
put drawLineScript(tFloorQuad) into tFloor
repeat with n = 1 to num(lines of tFloor)
  if num(items of line n of troof) = 3 then
     put -(item 2 of line n of troof) into item 2 of line n of troof
     end if
   end repeat
   repeat with n = 1 to num(lines of WallOne)
       if num(items of line n of twallThree) = 3 then
     put -(item 1 of line n of twallThree) into item 1 of line n of twallThree
     end if
   end repeat
 repeat with n = 1 to num(lines of WallTwo)
     if num(items of line n of twallfour) = 3 then
     put -(item 3 of line n of twallfour) into item 3 of line n of twallfour
     end if
   end repeat
    put drawLineScript(troof) into ROOF
put drawLineScript(twallThree) into WallThree
put drawLineScript(twallfour) into WallFour

put toolUnits("cube") into Cunits
put toolUnits("cube","root") into Copts

repeat with W=1 to num(items of copts)
  put item W of Copts & item W of Cunits into CoptUnits
  switch CoptUnits
    case "FloorTrue"
      put tfloor & cr after cubeScript
      break
      case "TopTrue"
         put Roof & cr after cubeScript
        break
        case "FrontTrue"
          put wallone & cr after Cubescript
          break
          case "BackTrue"
            put wallthree & cr after Cubescript
            break
            case "LeftTrue"
               put WallTwo & cr after Cubescript
              break
              case "RightTrue"
                 put wallfour & cr after Cubescript
                break
  end switch
end repeat
if cubescript is empty then return empty

   ##### NOW CREATE LUA DRAWING COMMANDS
put tfloor & cr & wallone & cr & wallThree & cr & wallfour & cr & walltwo & cr &roof into cubescript
      if CubeRecord contains cubescript then   return cubescript
       put cr & cubescript after CubeRecord
        put CubeRecord into allMyCUBES[NextCubeNumber]
combine allMyCUBES with numtochar(13) and numtochar(14)
 set the DrawnCUBESRecordArray of stack (the mainStack of this stack) to allMyCUBES
 return cubescript
end complexCube

-- --
Function DrawLineScript stringOfFloats
  replace "to" with cr in stringOfFloats
  if stringOfFloats is empty then put  getmkey(CurrentmakeXZRECT) into stringOfFloats
  replace quote with empty in stringOfFloats
    put "drawVertex("   & stringOfFloats&")" into lineScr
  replace cr with (")" & cr & "drawLine(") in lineScr
  replace "drawLine()" with "" in lineScr
return lineScr
end DrawLineScript

-- --
Function drawTriangles NXYZ
  replace quote with empty in NXYZ
  put  ToolUnits("quad",1) into gridunits
  put theAuxBodPosit() into AUXXYZ
  put ig3d_GetMesh_tagsList__s() into tList
  put num(Lines of tList)+1 into newTagNumber
  filter tList with "*tri*"
  put "tri_"&num(Lines of tlist) into newTagName
  ig3d_CreateMesh_tag_s newTagName
  put defaultTagNumber(newTagNumber) into upDateStackTagnum
  if num(items of NXYZ) =3    then  put gridUnits & "," & NXYZ into nXYZ
  if num(items of NXYZ) =1 then put NXYZ & comma & AUXXYZ into NXYZ
  if NXYZ is empty then  put gridunits & "," & AUXXYZ into NXYZ
  put quoted(NXYZ) into getXZRECT
  put lineMakerect() & cr into LinesofRectangleData
   
  put LinesofRectangleData into thLines
  put glMouseloc() into glLoc
  put gridUnits/2 into halfU
  ### NXYZ is grid units xyz rounded
  replace quote with empty in NXYZ
  put item 1 of NXYZ/2 into halfN
  put item 2 of NXYZ+halfN into MidX
  put item 3 of NXYZ+halfN into MidY
  put item 4 of NXYZ+halfN into MidZ
 put ((item 1 of glLoc)-item 1 of line 1 of LinesofRectangleData) into cx
 put ((item 3 of glLoc)-item 3 of line 1 of LinesofRectangleData ) into cy
put halfn into halfn
  if cx < 0  or cy < 0 then
    put "<" into mesa 
    put line 5 of LinesofRectangleData &   cr & line 3 of LinesofRectangleData & cr &  line 6 of LinesofRectangleData & cr & line 5 of LinesofRectangleData & cr & cr &  line 6 of LinesofRectangleData into TLL
--put line 5 of LinesofRectangleData into line 6 of LinesofRectangleData
    --delete line 1  LinesofRectangleData
   put TLL into LinesofRectangleData
 --put cr & line 1 of LinesofRectangleData after line 2 of LinesofRectangleData
--delete line 1 to 6 of LinesofRectangleData 
 
  else
  put ">" into mesa 
  put line 4 of LinesofRectangleData into line 1 of LinesofRectangleData
  put line 3 of LinesofRectangleData into line 6 of LinesofRectangleData
  end if
     ##Put mesa & cr  & cx,cy,halfn& cr &  LinesofRectangleData
  put DrawLineScript(quote&LinesofRectangleData&quote) into LineDrawingRectangle
  ig3d_PushMeshToUndoCache
  ## CREATE THE QUAD FROM VALUES
  if  getMkey(userTool) is not "cube" then 
    ig3d_SetFacePos_b3f false,(MidX),(100),(MidZ)
  else 
    ig3d_SetFacePos_b3f true,(MidX),(MidY),(MidZ)
  end if
  put ig3d_ExecuteLua_s_i(LineDrawingRectangle) into LUACTIONS
  ig3d_SelectMesh_tagVertices_ib NewtagNumber,false
  put ig3d_GetMeshCentroid__3f() into matrixXYZ
  put getMkey(chosenMaterialsAttributeLine) into nmat
  ig3d_SetMaterialForSelectedMesh_i nmat
  put  item 1 to - 4 getMkey(currentUV) into setUV
  put ",0,1,0" after setUV
  set itemDel to comma
  ig3d_GenerateAndApplyMeshUVMapping_6fb3f (item 1 of SetUV),(item 2 of SetUV),(item 3 of SetUV),(item 4 of SetUV),(item 5 of SetUV),(item 6 of SetUV),(item 7 of SetUV),(item 8 of SetUV),(item 9 of SetUV),(item 10 of SetUV)
  ## (usiz),(vsiz),(uof),(vof),(texrot),(ADIFFU),(fxplane),(nrmx),(nrmy),(nrmz)
  set the lastCentroid of stack (the mainStack of this stack) to matrixXYZ
  ig3d_ShowAll
  return LineDrawingRectangle
end drawTriangles

-- --
Function triangles what
  put  ToolUNits("quad",what)  into UnitSize
  put glMouseloc() into GLMLOC
   
  put GLMLOC into AUXXYZ
  --put getMkey(chosenMesh_TagsAttributeLine) into newTagNumber
  replace quote with empty in what
  if the num(items  of what) = 1 then
    put item 1 of what into UnitSize
    put ToolUNits("triangle","unit",item 1 of what)  into setUnitSize
  end if
  if the num(items  of what) = 3 then
    put item 1 to 3 of what into AUXXYZ
  end if
  if the num(items  of what) = 4 then
    put item 1 of what into UnitSize
    put item 2 to 4 of what into AUXXYZ
  end if
  put AUXXYZ into checkPosition
  if checkPosition is empty or checkPosition is GLMLOC then put theAuxBodPosit() into CheckPosition  ##gridPenMouseloc
  put CheckPosition into checkPEns
  put UnitSize&"," &gridPen(quoted(checkPens)) into NXYZ
  put drawTriangles(NXYZ) into QuadMeshDraw
  ig3d_SelectMesh_tagVertices_ib NewtagNumber,false
  ig3d_SetMeshPositionNoUndo_3f (item 2 of NXYZ),(item 3 of NXYZ),(item 4 of NXYZ)
  ig3d_ShowAll
  --put ig3d_ExecuteLua_s_i("render()")  into luacAction
  return QuadMeshDraw
end triangles
-- --
on remakeFromQuadMemory
  put getmkey(CurrentmakeXZRECT) into TheQuads
  delete char -1 of theRects
  put 1 into n
  repeat for each line DrawIt in TheQuads
    if num(chars of drawIt) > 3 then 
      put DrawLineScript(quoted(drawIt)) & cr after drawLines 
else
delete char -1 of drawLines
put ig3d_ExecuteLua_s_i(drawLines) into luaaction
put "" into DrawLines
ig3d_SelectConnectedMesh
  ig3d_CombineSelectedMeshOverlaps_f .01
  ig3d_MeshFaceAwayFromCamera
  ig3d_InvertMeshFaces
ig3d_SelectWholeMesh
ig3d_InvertMeshSelection
 put "render()"   into drawVert
put ig3d_ExecuteLua_s_i(drawVert) into luaaction
add 1 to qCount
end if
    add 1 to n
  end repeat
  ###PUT  qcount
 ig3d_ShowAll
end remakeFromQuadMemory

######################## 
### Functions to make XYZ quad data for line statements
######################## 
-- --
Function  makeRectXZ 
  put 9999 into N
  put -N into NN
  put n,nn,n into xz ## Point 1 origin X,Z
  put nn,nn,n into xnz   ## Point 2  X,Z to X+N,Z
  put nn,nn,nn into xnzn ## Point 2 X+N,Z to X+N,Z+N
  put n,nn,nn into xzn ## Point  4 X+Gridunits,Z+GridUnits
  put  XNZN into ClosingDiagonal  
  put XZ&cr&XNZ&cr&XNZN&CR&XZN&cr&xZ into Cube
  put Cube &  cr &XNZN  into ClosedQuad
  return ClosedQuad
end makeRectXZ

-- --
Function makeRectXY 
  put 9999 into N
  put -N into NN
put n,n,nn into xz ## Point 1 origin X,Z
put nn,n,nn into xnz   ## Point 2  X,Z to X+N,Z
put nn,nn,nn into xnzn ## Point 2 X+N,Z to X+N,Z+N
put n,nn,nn into xzn ## Point  4 X+Gridunits,Z+GridUnits
  put  XNZN into ClosingDiagonal  
  put XZ&cr&XNZ&cr&XNZN&CR&XZN&cr&xZ into Cube
  put Cube &  cr &XNZN  into ClosedQuad
  return ClosedQuad

end makeRectXY

-- --
Function makeRectZY 
  put 9999 into N
  put -N into NN
put nn,n,n into xz ## Point 1 origin X,Z
put nn,n,nn into xnz   ## Point 2  X,Z to X+N,Z
put nn,nn,nn into xnzn ## Point 2 X+N,Z to X+N,Z+N
put nn,nn,n into xzn ## Point  4 X+Gridunits,Z+GridUnits
  put  XNZN into ClosingDiagonal  
  put XZ&cr&XNZ&cr&XNZN&CR&XZN&cr&xZ into Cube
  put Cube &  cr &XNZN  into ClosedQuad
  return ClosedQuad
end makeRectZY

-- --
Function getToolOffsets
  put getMkey(editingMode) into Em
  put the toolUnits of stack (the mainStack of this stack) into Ttoolunits
  put line lineOffset(em,ttoolunits) of Ttoolunits  into Tline
  put item 2 to -1 of Tline into NU
return NU
end getToolOffsets
####### MOVE TOOLS ########
-- --
Function ghostMod xmod ymod zmod
  put ig3d_GetElapsedSeconds__f() into tp
  put the toolsAffectWhat of stack (the mainStack of this stack) into Affected
  if Affected is "" then
    put "camera" into Affected
    put setMkey(toolsAffectWhat,camera) into setAffected
  end if
  put the ghostOffset of stack (the mainStack of this stack) into ghost
  if ghost is "" then 
    put 10 into ghost
    put setMkey(slideOffset,ghost) into setSpinOffset
  end if
  put (0.1*(-xmod)*tp * ghost) into xghost
    put (-0.1*ymod*tp * ghost) into yghost
    put (-0.1*zmod*tp * ghost) into zghost
  switch Affected
  case "camera" 
    put ig3d_GetCameraInfo__s() into cam
    ig3d_MoveCameraInDirection_3f xghost,yghost,zghost
    break
  case "objects"
--    put ig3d_GetObjectInfo_s_s() into objData
--    put item 2 of line 3 of objData into resetData
--    add 90*xghost to item 2 of line 3 of objData
--    if item 2 of line 3 of objdata > 180 then put -180 into item 2 of line 3 of objData
--      if item 2 of line 3 of objdata < -180 then put 180 into item 2 of line 3 of objData
--    T3DSetInfo "object",objData
--    put (zghost)*ghost into howfar
--    put T3DCommand("setf 1," && howfar) into ghostDist
--    put T3DCommand("ghost") into ghosting
    break
 end switch
  return empty
end ghostMod

###CUBEACTION REMOVED, QUAD HANDLES IT

-- --
Function GridAsRects what   --- this version is horizontal
  put comma into c
  put item 1 of what into XgridDepth
  put item 2 of what into YgridDepth
  put item 3 of what into evenOffset
  put item 1 of what+2 into Xcross
  put item 2 of what +2 into Ycross
  repeat with y = 0 to YgridDepth
    put y * evenOffset into ywhat
    put ywhat+evenOffset into nexty
    repeat with x = 0 to XgridDepth
      put x * evenOffset into xwhat
      put xwhat+evenOffset into nextx
      put xwhat & c & ywhat  & c & nextx & c & nexty & cr after thePointz
    end repeat
  end repeat
  
  delete last char of thePointz
  return thePointz
end GridAsRects

-- --
Function GreenGRIDRECTS what
  put the greenGridRectsList of stack (the mainStack of this stack) into ggrid
  
  if ggrid is empty or what is not empty then  
  put gridasrects("150,150,2") into ggrid
  set the greenGridRectsList of stack (the mainStack of this stack) to ggrid
  end if
  return ggrid
end GreenGRIDRECTS

-- --
on deselectAllmesh
  ig3d_SelectWholeMesh  -- "Select All"
ig3d_InvertMeshSelection   -- "Invert Selection"
end deselectAllmesh

-- --
on hideAllmesh
  ig3d_SelectWholeMesh  -- "Select All"
ig3d_MakeInvisible   -- "HideMesh"
end hideAllmesh

-- --
on ShowAllmesh
ig3d_ShowAll   -- "Show All"
end ShowAllmesh
############# THE MESH MENU   ##########
-- --
Function meshMenu menuItem1 menuItem2
  ig3d_PushMeshToUndoCache
  put  item 1 to 3 of getToolOffsets() into CubeVals
  replace tab with empty in menuItem2  
put menuItem1  & menuItem2 into chkit
set itemDel to "|"
  switch (item 1 of chkit)
  case "Duplicate Vertices"
DuplicateMesh
    break
  case "Extrude"
  if item 2 of chkit is a number then 
  put item 2 of chkit into ExtrudeFloat
else
 set itemDel to comma
   put  getMkey(extrudeValue) into ExtrudeFloat
   end if
    put ig3d_GetMesh_tagsList__s() into tlist
  filter tlist with "*ext_*"
  put "ext_"&num(lines of tlist)+1 into extrusionTag
ig3d_CreateMesh_tag_s extrusionTag
  put ig3d_GetMesh_tagsList__s() into tlist
  put lineOffset( extrusionTag,tlist) into newTagnumber
   set itemDel to comma
    if  ExtrudeFloat is empty then 
    put  item 3 of cubeVals into ExtrudeFloat  
    ask "Extrude Length" with ExtrudeFloat
    if it is not empty then 
         put it into  ExtrudeFloat
    put setMkey(extrudeValue,ExtrudeFloat) into setLength
  end if
end if
 ig3d_InvertMeshSelection
 ig3d_MakeInvisible
   ig3d_SelectWholeMesh
     ig3d_CombineSelectedMeshOverlaps_f 0.01
 put ig3d_GetMeshCentroid__3f() into blah
  ig3d_ExtrudeSelectedMesh_fb ExtrudeFloat,false
ig3d_AddToMesh_tag_i newtagNumber
  put setMkey(chosenTag,newtagNumber) into updateTagData
  put setMkey(chosenMesh_tagsAttribute,extrusionTag) into updateTagData
    put setMkey(chosenMesh_tagsAttributeLine,newTagnumber) into updateTagData
     if the altKey is not down then
       ig3d_SelectConnectedMesh 
     ig3d_InvertMeshFaces
     ig3d_SelectWholeMesh
     ig3d_CombineSelectedMeshOverlaps_f 0.01
    ig3d_InvertMeshSelection
   end if
   ig3d_ShowAll
   ig3d_SelectMesh_tagVertices_ib newTagNumber,false
    break
case "Focus Mesh"
 ## focusMeshSelection
  break
  case "Delete Vertices"
   ig3d_DeleteMesh_b false  ---Delete Vertices
    break
 case "Goto Points"
 put ig3d_GetCameraInfo__s() into cam
 put ig3d_GetMeshCentroid__3f() into line 1 of cam
 
   ig3d_SetCameraInfo_s cam
    break
    case "Group Vertices"
      groupVertices
break
  case "Combine Overlaps"
  ask "Set Combine Tolerance" with ".01"
  if it is not empty then 
  if it is not a number then put ".01" into it
  ig3d_CombineSelectedMeshOverlaps_f it --"combine overlaps"
end if
  break
case "Subdivide"
ig3d_SubdivideMesh  --subdivide
break
end switch

set itemDel to "|"
switch (item 2 of chkit)
   case "Visible"
ig3d_HideFaces_b true --- "show Mesh Faces"   -- "Make Visible"
break
case "Invisible"
  ig3d_HideFaces_b false   -- "Make Invisible"
  break
  case "X"
    ig3d_MirrorSelectedMesh_3i 1,0,0 --MIRRORX
    break
  case "Y"
    ig3d_MirrorSelectedMesh_3i  0,1,0 --MIRRORY
    break
  case "Z"
   ig3d_MirrorSelectedMesh_3i  0,0,1 --MIRRORZ
    break
  case "Double Side"
    put ig3d_GetMeshCentroid__3f()  into theMesh
      put item 1 of theMesh into xpo
       put item 2 of theMesh into ypo
    put item 3 of theMesh into zpo
       ig3d_DuplicateMesh --  duplicate
     ig3d_ScaleSelectedMesh_3f 99.8,99.8,99.8
    ig3d_InvertMeshFaces --case "Invert Faces"
ig3d_SetMeshPosition_3f (xpo),(ypo),(zpo)
    break
    case "Face Out"
ig3d_MeshFaceAwayFromCamera
    break
  case "Face In"
    ig3d_MeshFaceAwayFromCamera
ig3d_InvertMeshFaces
    break
  case "Invert Faces"
    ig3d_InvertMeshFaces
    break

  case "All Vertices"
   ig3d_SelectWholeMesh ---Select All
    -- mesh editor point size control
    put setmkey("verticesize",4) into  setn
ig3d_SetPointSize_f 4.0
    break
  case "Connected"
   ig3d_SelectConnectedMesh ---Select Connected
    break
   case "Invert"
    ig3d_InvertMeshSelection  ---Invert Selection
    break
  case "Invert Faces"
    ig3d_InvertMeshFaces  ---Invert Faces
    break
  case "Hide"
    ig3d_MakeInvisible ---Hide Selection
    break
  case "Hide Other"
       ig3d_InvertMeshSelection   ---Invert Selection
      ig3d_MakeInvisible ---Hide Selection
       ig3d_SelectWholeMesh ---Select All ig3d_ShowAll  --showall
      break
case "Switch"
      ig3d_SelectWholeMesh  ---Select All
   ig3d_ShowAll --showall
      ig3d_InvertMeshSelection   ---Invert Selection
          ig3d_MakeInvisible  ---Hide Selection
         ig3d_SelectWholeMesh ---Select All
  break
  case "Show All"
    put visibleElements("select_mesh",true) into MeshMenuReturn
    break
  case "Hide All"
     put visibleElements("select_mesh",false) into MeshMenuReturn
    break
    case "Hide Faces"
  ig3d_HideFaces_b true --- "Hide Mesh Faces"
break

case "Show Faces"
   ig3d_HideFaces_b false --- "show Mesh Faces"
  break
  case "Select Attached To Bone"
    ask "BoneName"
    if it is not empty then put it into boneName
    ig3d_SelectMeshBone_s boneName

end switch
return chkit
end meshMenu

-- --
on GetFog
put ig3dExecuteLuas("xyz=getSceneInfo(IG3D_FOG)") into SetSeceninfo
SendLuaCommand("output(xyz)")
end GetFog
-- --
on resizeStack
  
end resizeStack
#####DROP TEXTURES
-- --
on prepDropTexture 
  put updateStatusField("prepDropTexture") into stat
  put getMkey(pickedLongFile) into FullDropPath
  put getMkey(pickedShortFile) into ShortP
  put folderPath() into rem
put getMkey(chosenMaterialsAttributeLine)  into matN
put getMkey(terrainData) into tTerrainData
put shortP into item -1 of tTerrainData
set the terrainData of stack (the mainStack of this stack) to  tTerrainData

--set the fileName of image "materialsTexture" of card "materialsCard" of stack "inspector" to FullDropPath
set the dropMatTexture of stack (the mainStack of this stack) to FullDropPath
--put ShortP into fld "texture" of card "materialsCard" of stack "Inspector"
    put ig3d_GetCurrentMaterialNumber__i()  into CN
    put ig3d_GetMeshMaterialInfo_i_s(CN) into matINFO
    set the OriginalMaterialData of stack (the mainStack of this stack) to matINFO
   setTOMeshMaterial CN --origin
     put matName & cr & 1 & cr & "texture=" & ShortP into matInfo
  ig3d_SetMeshMaterialInfo_is cn,matInfo
--    break
--    case "Models"
--      break
--      case "particlesCard" 
--        if the screenmouseloc is within the rect of stack "inspector" then
--         set the fileName of image "emitterTexture" of card "particlesCard" of stack "inspector" to FullDropPath
--
--put ShortP into fld "texture" of card "particlesCard" of stack "Inspector"
--end if
--        break
--        case "Scripts"
--          break
--end switch

end prepDropTexture

 

######## GET THE NAMES OF THE CONTROLS OF  A STACK ###########
-- --
Function controlsList stak Groop WhatControl setwhat towhat

if stak is empty then put the short name of  this stack into stak
  
  if WhatControl is not empty then
    put tab & tab & WhatControl into specific
    put (stak & cr & groop & cr & specific) into subreturn
    replace  (cr & cr) with cr subreturn
  end if
  put  "of stack" && quoted(stak) into ofGroupofStak
  
  if groop is not "" then 
     put "of group" && quoted(groop) && "of stack" && quoted(stak) into ofGroupofStak
  put   "the number of controls"&& ofGroupofStak &&"into n" into whosen
  else 
  put  "the number of controls of stack" && quoted(stak) && "into n" into whosen
end if

  do "put" && whosen

  repeat with x = 1 to n
      put "the name of control" && x && ofGroupofStak  && "into checkName"  into doGetName
      do "put" && doGetName
      put checkName & cr after allNamesOfAllControls
  end repeat
  delete last char of allNamesOfAllControls
sort AllNamesOfAllControls

if whatControl is not empty then filter AllNamesOfAllControls with whatControl&"*"
  return allNamesOfAllControls
end controlsList

-- --
on getInfoFieldSelectedLine
  -----------UNUSUSED from ig3dWTFeditor
  put therootPick() into rootPick
  put getMkey(EditingMode) into em
  put em&rootPick into WhatFielddata
  if em is "path" then put em into whatfieldata
 switch WhatFielddata
  case "meshMaterials"
    ig3d_CombineEqualMeshMaterials
    put ig3d_GetMeshMaterialsList__s() into me
      repeat with CL =1 to 3 
      put  ""  into line 1 of fld ("Edit"&&CL)
    end repeat
    break
  case "Path"
      case "pathselect"
    put ig3d_GetPathsList__s() into ig3dPaths
      put lineOffset(pickedMeshEntityAttribute,ig3dPaths) into n
      put ig3d_GetPathInfo_i_s(n) into PATHPOINTS
    set itemDel to comma
    put "x,y,z" into flabels
    repeat for each item C in infoData
      add 1 to xyz
    end repeat
    break
  case "MeshMesh_tags"
    put ig3d_GetMesh_tagsList__s() into me
      repeat with CL =1 to 3 
      put  ""  into line 1 of fld ("Edit"&&CL)
    end repeat
    break
  end switch
end getInfoFieldSelectedLine

-- --
Function switchItems A,B,StringOfData
  replace quote with empty in stringofData
  repeat for each line L in StringOfData
    put item A of L into HoldA
    put item B of L into HoldB
    put holdA into item B of L
    put holdB into item A of L
    put L & cr after Switched
  end repeat
  delete  char -1 of Switched
  return Switched
end switchItems

  function BigColorVal what
    replace quote with empty in what
   set itemDelimiter to comma

  put abs((item 1 of what  * 256)/1.032258) into rc
  put abs((item 2 of what  * 256)/1.032258) into gc
  put abs((item 3 of what  * 256)/1.032258) into bc
  if rc >= 256 then put 256 into rc
   if gc >= 256 then put 256 into gc
    if bc >= 256 then put 256 into bc
  return (round(rc) & "," & round(gc) & "," & round(bc))
end BigColorVal

####GL WINDOW SHADOW AND TITLE
-- --
Function GLTitleShadowChange which
put getMkey(visibleElementsList) into visbools
put item -2  of visbools into TitleBool
put item -1 of visbools into shadowbool
 put TitleBool &","& shadowbool into myNewTitle
 if item 1 of myNewTitle is empty then 
   put "true,true" into myNewTitle
   put item 1 to -3 of visbools & ","& mynewTitle into visbools
   put setMKey(visibleElementsList,(visbools)) into setit
 end if
 lock screen

 if which is empty then return mynewtitle
   put item 1 of myNewTitle into titleBool
  put item 2 of myNewTitle into shadowBool
 
 put windowBound() into Tb
  put item 4 of tb into t
 
  switch titleBool
    case "true"
      put glrect() into GLR
            put the bottom of stack (the mainStack of this stack) into item 2 of GLR
            --ig3d_SetWindowBounds_4i (item 1 of GLR),(item 2 of GLR),(item 3 of GLR),(item 4 of GLR) --missing handler 11 05 2013
          break
        case "false"
            put glrect() into GLR
--            put the bottom of stack (the mainstack of this stack) +1 into item 2 of GLR
            ig3d_SetWindowBounds_4i (item 1 of GLR),(item 2 of GLR),(item 3 of GLR),(item 4 of GLR) --missing handler 11 05 2013
          break
   end switch
  -- ig3d_ShowWindowTitleBarAndShadow_2b titleBool,shadowBool   ##ig3d! --missing handler 11 05 2013
 put item 1 to -3 of visbools & ","& mynewTitle into visbools
   put setMKey(visibleElementsList,(visbools)) into setit
return mynewTitle
end GLTitleShadowChange

######CAMERA/object DRAG ON BUTTON MOTION
-- --
Function DragSpinMod  xmod ymod zmod
  put ig3d_GetElapsedSeconds__f() into tp
  put the toolsAffectWhat of stack (the mainStack of this stack) into Affected
  if Affected is "" then
    put "camera" into Affected
    put setMkey(toolsAffectWhat,camera) into setAffected
  end if
  put the spinOffset of stack (the mainStack of this stack) into SO
  if SO is "" then 
    put 10 into SO
    put setMkey(spinOffset,SO) into setSpinOffset
  end if
  switch Affected
  case "camera"
    put ig3d_GetCameraInfo__s() into cam
    add (xmod*tp *(SO)) to item 1 of line 2 of cam
    add (ymod*tp *(SO)) to item 2 of line 2 of cam
    add (zmod*tp *(SO)) to item 3 of line 2 of cam
    ig3d_SetCameraInfo_s cam
    break
  case "objects"
     put ig3d_GetObjectInfo_s_s() into obj
    add (0.1*xmod*tp * SO) to item 1 of line 3 of obj
    add (0.1*ymod*tp * SO) to item 2 of line 3 of obj
    add (0.1*zmod*tp * SO) to item 3 of line 3 of obj
   ig3d_SetObjectInfo_2s (line 1 of obj),obj 
    break
  end switch
  return empty
end DragSpinMod

-- --
Function DragSlideMod  xmod ymod zmod
  put ig3d_GetElapsedSeconds__f() into tp
  put the toolsAffectWhat of stack (the mainStack of this stack) into Affected
  if Affected is "" then
    put "camera" into Affected
    put setMkey(toolsAffectWhat,camera) into setAffected
  end if
  put the slideOffset of stack (the mainStack of this stack) into SO
  if SO is "" then 
    put 10 into SO
    put setMkey(slideOffset,SO) into setSpinOffset
  end if
  switch Affected
  case "camera"
      put ig3d_GetCameraInfo__s() into cam
    add (0.1*xmod*tp * SO) to item 1 of line 1 of cam
    add (0.1*ymod*tp * SO) to item 2 of line 1 of cam
    add (0.1*zmod*tp * SO) to item 3 of line 1 of cam
   ig3d_SetCameraInfo_s cam
    break
  case "object|position"
     put ig3d_GetObjectInfo_s_s() into obj
    add (0.1*xmod*tp * SO) to item 1 of line 2 of obj
    add (0.1*ymod*tp * SO) to item 2 of line 2 of obj
    add (0.1*zmod*tp * SO) to item 3 of line 2 of obj
     ig3d_SetObjectInfo_2s (line 1 of obj),obj 
    break
    case "object|size3D"
      put ig3d_GetObjectInfo_s_s() into obj
    add (0.1*xmod*tp * SO) to item 1 of line 4 of obj
    add (0.1*ymod*tp * SO) to item 2 of line 4 of obj
    add (0.1*zmod*tp * SO) to item 3 of line 4 of obj
    ##put T3DCommand("size3D" && line 5 of obj) --
     ig3d_SetObjectInfo_2s (line 1 of obj),obj 
    break

  end switch
  return empty
end DragSlideMod

-- --
on checkpopPreviewStack
   set the width of stack "previewStack" to the width of stack "inspector"
   set the top of stack "previewStack" to the bottom of stack "Inspector"
   set the left of stack "previewStack" to the left of stack "Inspector"
   if the fileName of image "previewImage" of stack "PreviewStack" is empty then hide stack "PreviewStack"
   else show stack "PreviewStack"
end checkpopPreviewStack

-- --
on openstackswithplaygamestyle
  put windowBound() into Tb
  put item 4 of tb into t
put setMKey(GLTitleShadowState,("true,true")) into setit
put GLTitleShadowChange("Gltitle") into newTitle
put item 1 of tb + 700 into W
put T+640 into B
##Put (item 1 of tb),(T),(W),(B)
 put ig3d_GetWindowBounds__4i()  into GLBOUNDS
                    ig3d_SetWindowBounds_4i (item 1 of tb),(T+24),(W),(B)
palette stack "filesLibrary"
 put setMkey(windowSnapStyle,"playgame") into ws
set the topLeft of stack "filesLibrary" to (W),(T)
send menuPick && "Levels" to btn "Library" of group "igame3dmenu1" of stack (the  mainStack of this stack)
end openstackswithplaygamestyle

-- --
on openStacksWithTopStyle
  lock screen
  put windowBound() into mainStackRect
  put item 4 of mainStackRect into mainStackBottom
      palette stack "sceneGraph"
    libraryMenuPick "Levels"
 set the decorations of stack "Fileslibrary" to "title,menu,minimize,close"
 set the height of stack "FilesLibrary" to the height of stack "sceneGraph"
 set the left of stack "sceneGraph" to  item 1 of mainStackRect+8
 set the width of stack "filesLibrary" to the width of stack "scenegraph"
 set the topLeft of stack "FilesLibrary" to (item 1 of mainStackRect+8),(item 4 the rect of stack "SceneGraph"+20)
 put the item 3 the rect of stack "SceneGraph"+4 into GLStartLeft
 put GLTitleShadowChange("GlTitle") into gltitle
 put ig3d_GetWindowBounds__4i()  into GLBOUNDS
 ig3d_SetWindowBounds_4i (GLStartLeft),(mainStackBottom+20),(GLStartLeft+480),480
--  put setMkey(windowSnapStyle,"top") into ws
put ig3d_GetWindowBounds__4i() into GLBOUNDS
unlock screen
end openStacksWithTopStyle
##########################################################
##### SCENE GRAPH POP UP BUTTON 1 SCRIPT
-- --
Function SceneGraphPopUp1Pick lpath,myline,LineN
  put getmkey(editingMode) into em
  put theRootPick() into rootPick
  put coln() into COLNS
  put chosenSceneGraphField() into pCOL
  if em is among the items of "quad,cube,cone,cylinder,sphere" then
    put toolUnits(em,"Material",lineN) into newMat
    put toolUnits(em) into fld "Col1" of lpath
    end if
    switch em
    case "snapshot"
      put snapShotSettings() into myLines
      replace cr with comma in mylines
      put myLine into item 6 of myLines
      set the snapShotDefault of stack the mainStack of this stack to myLines
      replace comma with cr in myLines
      put myLines into fld "col1" of lpath
      break
    case "path"
    case "pathSelect"
      put pathsmenuPicks(myline) into meshModVals
      break
    case "terrain"
      put getmkey(terrainData) into MeshModvals
      put myline into item coln("col1") of meshModVals
      set the terrainData of stack (the mainStack of this stack) to meshModVals
      replace comma with cr in meshModVals
      put meshModVals into fld "col2" of lpath
      set the hilitedLine of fld "Col2" of lpath to coln("col1")
      return meshModVals
      break
      
    case "select_mesh"
      switch rootpick
      case "mesh_tags"
        mesh_tag_Menu myline,(item 2 of colns) 
        return myline,(item 2 of colns)
        break
      end switch
      break
      
      switch myLine
      case "New"
        NewEntity
        break
      case "Rename"
        put renameEntity(pCOL) into newEntName
        break
      case "Delete"
        ---deleteEntity 
        break
      case "Delete All"
        deleteEntity "All"
        break
      case "Unset"
        break
      case "Set"
        --setmeshEntity
        break
      case "Select Connected"
        put selectMeshEntity() into selectMeshEntity
        break
      case "Select All"
        put selectMeshEntity("all") into selectall
        break
      case "Clean"
        break
      end switch
      break
    case "Particles"
      put ig3d_GetParticle_emitterInfo_s_s(rootpick) into Emdata
      switch colt("col1")
        case "file"
          put "file:/" & folderPath("emitters") & myLine & ".emt" into Tfile
          put url tfile into emdata

          break
          case "texture"
                      put "file:/" & folderPath("images") & myLine & ".png" into Tfile

            break
        
      end switch
      break
    end switch
    refillColumns 
    return em && rootPick && colns
  end SceneGraphPopUp1Pick
#########IG3D WTF EDITOR FUNCTIONS SELECT_MESH FUNCTIONS
-- --
on mesh_tag_Menu myPick,myLine
       put coln() into COLNS
         put chosenSceneGraphField() into pCOL
  switch myPick
    case "New"
      NewEntity
      break
case "Rename"
  put renameEntity(pCOL) into newEntName
      break
case "Delete"
 ig3d_DeleteMesh_tag_i (item 2 of colns)
      break
case "Delete All"
  put ig3d_GetMesh_tagsList__s() into tlist
  put num(lines of tlist) into n
  repeat with k = 1   to n
    ig3d_DeleteMesh_tag_i 1
  end repeat
  break
  case "Unset"
 ig3d_RemoveFromMesh_tag_i myLine
    break
case "Set"
  ig3d_AddToMesh_tag_i myLine
      break
case "Select Connected"
      break
      case "Select All"
        put selectMeshEntity("all") into selectall
        break
case "Clean"
  put ig3d_GetMesh_tagsList__s() into tlist
  put num(lines of tlist) into n
  repeat with k = n down   to 1
     ig3d_SelectMesh_tagVertices_ib k,true
     
     put ig3d_GetMeshCentroid__3f() into xyz
     ig3d_SetMeshPositionNoUndo_3f 1,2,3
      put ig3d_GetMeshCentroid__3f() into abc
      if abc is not xyz then 
     ig3d_SetMeshPosition_3f (item 1 of xyz),(item 2 of xyz),(item 3 of xyz) 
        else
    ig3d_DeleteMesh_tag_i k
    end if
  end repeat
      break
      case "select"
         put not (the shiftKey is down) into SHiftedBOOL
  ig3d_SelectMesh_tagVertices_ib myLine,SHiftedBOOL

        break
  end switch
   refillColumns 
end mesh_tag_Menu
-- --
Function pathsmenuPicks myline
         put coln() into COLNS
         put chosenSceneGraphField() into pCOL
         put item 1 of colns into pickedPath
         put item 2 of colns into pickedPathLine
  switch myline
    case "New"
      NewEntity
      break
case "Rename"
  put renameEntity(pCOL) into newEntName
      break
case "Delete"
 ig3d_DeletePath_i (item 1 of colns)
      break
case "Delete All"
  put ig3d_GetPathsList__s() into tlist
  put num(lines of tlist) into n
  repeat with k = 1   to n
  ig3d_DeletePath_i 1
  end repeat
  break
end switch
   refillColumns 
return tlist
end pathsmenuPicks --pathsmenuPicks

-- --
Function renameEntity col
  #### THIS NEEDS TOTAL REDO
  put  therootPick()  into Renamedentity
  put coln(col) into n
  put colt(col) into oldName
  ask "Please enter a name for the" && Renamedentity && n&& ":" with oldName
  if it is empty then exit renameEntity
  else put it into newName
  switch Renamedentity
  case "Materials"
    ig3d_SetMeshMaterialName_is n,(newName)
    break
  case "Path"
    ig3d_SetPathName_is n,(newName)
    break
  case "Mesh_tags"
    ig3d_SetMesh_tagName_is n,(newName)
    break
  end switch
if newName is not empty then 
  put newName into line n of fld col of stack "SceneGraph"
  set the hilitedLine of fld col of stack "SceneGraph" to n
  end if
end renameEntity

-- --
on NewEntity E,newName
  if E is empty then put getMkey(editingmode) into e
  if e is "select_mesh" then put theRootpick() into e
put "chosen" & e & "Attribute" into ChosenAttribute
  put "chosen" & e & "AttributeLine" into ChosenAttributeLine
  if newName is empty then 
  ask "Please enter a name for the new" && e & ":"
  if it is empty then exit newEntity
  else put it into newName
  end if
    switch e
    case "Materials"
      ig3d_CreateMaterial_s newName
          put ig3d_GetMeshMaterialsList__s() into newList
put lineOffset(it,newList) into pickedMaterial
put setMkey(chosenAttributeLine,pickedMaterial) into pickedN
      break
    case "Path"
      ig3d_CreatePath_s newName
      put newName &"_path_tag" into newTag
      ig3d_CreateMesh_tag_s newTag
       put ig3d_GetPathsList__s() into newList
      break
    case "Mesh_tags"
      ig3d_CreateMesh_tag_s newName
      put ig3d_GetMesh_tagsList__s() into newList
          put lineOffset(newName,newList) into NewTagNumber
          put defaultTagNumber(NewTagNumber) into updateTagnumber
ig3d_AddToMesh_tag_i NewTagNumber
      break
    case "Boness"
      ##whatDoWeDo?
      break
  end switch
  
  put setMkey(ChosenAttribute,newName) into setNewName
put setMkey(ChosenAttributeLine,lineOffset(newName,newList)) into setNewNameLine
end NewEntity
###### CAMERA MOVER
-- --
Function freeCamPlayer x,y
    put the screenMouseLoc into mLoc
  put x - item 1 of mLoc into xmod
  put item 2 of mLoc - y into ymod
  put ig3d_GetElapsedSeconds__f() into passed
      put   the ghostOffset of stack (the mainStack of this stack) into ghost
   ig3d_MoveCameraInDirection_3f (0.1*(-xmod)*passed * ghost),0,-(0.1*ymod*passed * ghost)
 ig3d_SetCameraInfo_s cam
set the screenMouseLoc to (x),(y)
set cursor to none
lock cursor
end freeCamPlayer
###### EXPORT MESH
-- --
Function LevelFolderWTFBackupName 
    put folderPath(thisLevel(long) & "/saves" ) into ThePath
filter thePath with "*.wtf"
set itemDel to "/"
put num(items of ThePath) into prefix
put thisLevel() && "mesh.wtf" into theFileName
if prefix < 10 then put "0" before prefix
if prefix  > 0 then put  prefix & space before theFileName 
return theFileName
end LevelFolderWTFBackupName

-- --
Function ExportMesh theFileName,ThePath,meshSize
  put folderPath() into StackDirCheck
  replace quote with empty in thefilename
  if theFileName contains "," then
    set itemDel to comma
     if last item of theFileName is a number then put  last item  of theFileName into meshSize
    if  item 2 of theFileName is not a number then  put folderPath(item 2 of theFileName)  into thePath
    put item 1 of theFilename into theFileName
  end if
  ##Put theFileName,ThePath,meshSize
if theFileName is empty then put  LevelFolderWTFBackupName() into theFilename
if ThePath is empty then put folderPath("WTF") into ThePath
  if ThePath contains StackDirCheck is false then put StackDirCheck & ThePath into ThePath
  if last char of ThePath is not "/" then put "/" after ThePath
  if meshSize is empty then put "100" into meshSize
  set itemDel to "."
  put item -1 of theFileName into TheExtension
 put filesIn(thePath) into FileList
 filter fileList with "*"& theExtension 
put num(lines of fileList) into n
if fileList contains theFileName then 
answer "Save Over " && theFileName with "New Name" and "Yes" and "No"  and "Cancel"
if it is "No" then return "Canceled"
if it is "New Name" then 
ask "New Model Name" with  n & theFileName
if it is empty then 
return empty
else
put it into thefileName
end if
end if
end if 
deselectAllMesh
put theFileName into filepath
  if theFileName contains thePath is false then put ThePath & theFileName into filePath
 switch theExtension
   case "mesh"
     put "Meshwork_sf" into theExternalExtension
     break
     case "WTF"
       put "WTF_sf" into theExternalExtension
       break
        case "obj"
          put "OBJ_sf" into theExternalExtension
     break
     case "3ds"
       put "3DS_sf" into theExternalExtension
       break

 end switch
   if char -1 of theExternalExtension is "f" then put "ig3d_SaveMeshAs" & theExternalExtension  && quoted(filePath) & comma & meshsize   into  theCOmmand
  else put "ig3d_SaveMeshAs" & theExternalExtension && quoted(filePath) into thecommand
  do theCOmmand

 return filePath
  end ExportMesh
####### PLAY GAME MODES
-- --
on stopGame
put setMkey(playGame,false) into playgamefalse
put ig3d_GetWindowBounds__4i()  into theGLrect
put item 1 theGLrect + 20 into x
put  item 2 theGLrect + 20 into y
set the cursor to hand
 set the hilite of btn "play_game" of stack (the mainStack of this stack)  to false
end stopGame

#########################################################
###### ROOT FIELD OF SCENEGRAPH

-- --
on refillColumns EM  --- mOVED from scenegraph to mainstack 01 24 07
  lock screen
  put the ruggedPath of stack "Scenegraph" into Lpath
  put theRootPick() into rP
  repeat with L= 1 to 4
    put  item L of "root,col1,col2,col3"  into LL
    put empty into field LL of lpath
  end repeat
  if EM is empty then put getMkey(editingmode) into EM
  if EM is not among the items of "root,col1,col2,col3" then 
    put DefineSceneGraphContent(EM) into ROOTLIST
  end if
  put lineOffset(rp,ROOTLIST) into RootN
  if rootList is not empty then put RootList into fld "root" of lpath
   put getmkey(sceneGraphPickLines)  into currentPicks
  put getMkey(sceneGraphPickWords) into theWords

  put ig3d_GetSelection__s() into SceneSelection
  if SceneSelection is empty and EM is among the items of "objects,light,sounds,particles" then 
    set the hilitedLine of fld "root" of lpath to none
  else
    set the hilitedLine of fld "root" of lpath to rootn
    put theRootPick(line rootn of rootlist) into rp  
  end if
 
  put getCol1Text(rp) into  fld "Col1" of lpath
  put getCol2Text(rP,item 2 of theWords) into  fld "Col2" of lpath
  put getCol3Text(rP,item 2 of theWords,item 3 of thewords) into  fld "Col3" of lpath
  repeat with L= 1 to 4
    put  item L of "root,col1,col2,col3"  into LL
    replace comma with cr in fld LL of lpath
    put 1 into nc
    repeat for each line CHKL in fld LL of Lpath
      if char 1 of CHKL is "<" and char -1 of CHKL is ">" then 
        put chkl into thmtl
        set the htmltext of line nc of fld Ll of lpath to thmtl
      end if
      add 1 to nc
    end repeat
    if char 1 to 2 of fld LL of lpath is "--" then put empty into item L of currentpicks
    if num(lines of fld LL of lpath) < item L of currentPicks then put 1 into item L of currentpicks
    if item l of currentPicks is not empty then set the hilitedLine of fld LL of lpath to item L of currentPicks
  end repeat
  put the bottomRight of stack "SceneGraph" into BR
  send updateColumnPositions to group "RootLeft" of stack "Scenegraph"  in 0 milliseconds
  --focus btn 1 of stack (the mainStack of this stack)
  unlock screen
end refillColumns

-- --
Function saveToFolderPath datalevelslevel
  put folderPath(datalevelslevel) & "load script.lua" into fullpath
 ig3d_SetLevelName_s datalevelslevel
        ig3d_SaveLevel_s fullpath
   put ig3d_GetLevelName__s() into LevelPathOut
   return fullpath
end saveToFolderPath
-- --
on updateRootEditMode teditingMode

  if teditingMode is empty or  tEditingMode is not among the items of editingModes() then put getmkey(EditingMode) into tEditingMode
 refillColumns tEditingMode 
end updateRootEditMode

-- --
Function DefineSceneGraphContent tEditingMode
  if tEditingMode is empty or  tEditingMode is not among the items of editingModes() then put getmkey(EditingMode) into tEditingMode
    if tEditingMode is empty then put chooseAtool("camera") into tEditingMode

  if tEditingMode is among the items of "dropmesh,quad,plane,cube,cylinder,cone,sphere,triangles" then
    
switch tEditingMode
 case "quad" 
    case  "cube" 
case "cylinder"
case "cone"
  put ToolUnits(tEditingMode,"root") into RL
 break
  case "Sphere"
       put "Size,Offset,Scale" into RL
       break
     case "dropMesh"
        put   ToolUnits(tEditingMode,"root") after RL
    break
    end switch
  end if
  put setMkey(editingMode,tEditingMode) into resetit
  ##### DESIGN THE ROOT FIELD
if teditingmode  is "Terrain" then return "size,height,density,red,green,blue,alpha,texture"

   if tEditingMode is"select_mesh" then put "centroid,rotate,scale,-,materials,mesh_tags,-,edges,points,info" into RL
   else if tEditingMode is "snapshot"  then put snapShotSettings("snapvarnames") into RL
   --put "name,height,width,Alpha,SuperSample,FSAA,Record" into rl
      else if tEditingMode is "camera" then put "position,rotation,fov,ortho,visibility,edges,points" into RL
      else if tEditingMode is "Level" then put "name,mesh,files,scripts,state" into RL
           else if tEditingMode is "colors" then put "background,fog,grid,tint" into RL
   else if tEditingMode is "light" then put "1,2,3,4,5,6,7,8" into RL
else if tEditingMode is among the items of "objects,sounds,path,pathselect,particles" then put ig3dList(tEditingMode) into RL

  if rl is empty then put  "(no " & tEditingMode &")" into RL
  put "Mode" & tEditingMode &  "RootList" into RootModeList
  put setMkey(RootModeList,RL) into setRootList 
  put getMkey(chosenSceneGraphMatrix ) into CMEL
  ##Put cme  & cr & cmel & cr  
  replace comma with cr in RL
  return RL
end DefineSceneGraphContent
-- --
on updateEditingModeDatas emd
  switch emd
    case "materials"
  put ig3d_GetCurrentMaterialNumber__i() into Matn
  put ig3d_GetMeshMaterialInfo_i_s(matN) into curMatInfo
put line lineOffset("texture",curmatinfo) of curmatinfo into oldTexture
set the oldMatTexture of stack (the mainStack of this stack) to oldTexture
break
 end switch
end updateEditingModeDatas

-- --
Function iG3DList what
   put the externalfunctions of stack (the mainstack of this stack) into Ilist
    put cr & the externalCommands of stack (the mainstack of this stack) after Ilist

  filter iList with "*get*"
  filter ilist with "*list*"
  filter ilist with "*"&what&"*" 

if what is "groups" then return ig3d_GetGroupsList__s()
if what is "mesh_tags" then 
  set itemDel to "|" 
  put ig3d_GetMesh_tagsList__s() into BigTagList
  repeat for each line B in BigTagList
    put item 1 of B & cr after tagListShortNames
  end repeat
  return line 1 to -2 of tagListShortNames
  end if

if what is "bones" then return ig3d_GetMeshBonesList__s()
if what is "materials" then return ig3d_GetMeshMaterialsList__s()
if what is "objectBones" then return ig3d_GetObjectBonesList__s()
if what is "objectMaterials" then return ig3d_GetObjectMaterialsList_s_s()
if what is "objects" then return ig3d_GetObjectsList__s()
if what is "particles" or what is "emitters" then return ig3d_GetParticle_emittersList__s()
if what is among the items of "path,paths,pathselect" then return ig3d_GetPathsList__s()
if what is "samples" then return ig3d_GetSamplesList__s()
if what is "sounds" then return ig3d_GetSound_emittersList__s()
if what is "textures" then return ig3d_GetTexturesList__s()
return ilist
end iG3DList
 
-- --
Function ig3dInfo what
  put the externalfunctions of stack (the mainstack of this stack) into Ilist
      put cr & the externalCommands of stack (the mainstack of this stack) after Ilist

  filter iList with "*get*"
  filter ilist with "*"&what&"*" 
filter ilist with "*info*"
return ilist
end ig3dInfo 

-- --
Function extFilt what
  put the externalfunctions of stack (the mainstack of this stack) into Ilist
     put cr & the externalCommands of stack (the mainstack of this stack) after Ilist
  if num(items of what) = 1 then
    filter ilist with "*"&what&"*"
    return ilist
  end if

  replace comma with cr in what
  
  repeat for each line ii in what
    put ilist into e
    filter e with "*" &ii&"*"
    replace ii with empty in iout
    put cr & e & cr after iout
    filter iout with "*" &ii&"*"
  end repeat
  return iout
end extFilt
#####################################################################################
-- --
on  inputToColorsFromF1 myLine,WhatLine,NofXYZ
put theRootPick() into rootPick
put parseStateCOLORS(rootPick) into TData
put "r:,g:,b:" into theaders
put myLine into item Whatline of Tdata

repeat with c = 1 to 3
  replace item c of theaders with empty in item c of tData
  replace "-" with empty in item c of Tdata
  if item c of tData > 1 then put "1.0," into item c of tData 
  if "." is not in item c of tdata then put ".0" after item c of Tdata
end repeat
   replace space with empty in Tdata
switch rootpick
  case "background"
      case "tint"
          put itemOffset(rootpick,"TINT,Background") into NameN
put item NameN of "IG3D_TINT_COLOR,IG3D_BACKGROUND_COLOR" into theluaCommand
put "setSceneInfo(" & theLuaCommand & "," & tData &")" into fullLuaCom
 put ig3d_ExecuteLua_s_i(fullLuaCom) into luaaction
        break
        case "grid"
          ig3d_SetGridColor_3f (item  1 of tData),(item 2 of tData),(item 3 of tData)
               set the gridColors of stack (the mainStack of this stack) to tdata
          break
        case "fog"
 ig3d_SetFogInfo_b5f (item 1 of tData),(item 2 of tData),(item 3 of tData),(item 4 of tdata),(item 5 of tdata),(item 6 of tdata)
break
end switch
end inputToColorsFromF1
-- --
on updateRGBFromPicker
  put the short name of the current card of stack "inspector" into whatCard
   replace "card" with empty in whatcard
   put itemOffset(whatcard,"TINT,Background") into NameN
put item NameN of "IG3D_TINT_COLOR,IG3D_BACKGROUND_COLOR" into theluaCommand
put quoted(whatCard) into QuotedCard
    if exists (grc QuotedCard) then 
    set the secondColor of grc QuotedCard of stack "inspector" to the mouseColor
     put the mouseColor into whatColor
    put FixMouseColorRoundUp(secondColor of grc QuotedCard) into fixCOLOR
   put item 1 of fixCOLOR/256.0 into  fld "red"
  put item 2 of fixCOLOR/256.0 into  fld "green"
  put item 3 of fixCOLOR/256.0 into  fld "blue"
  put fld "red" into R
  put fld "green" into G
  put fld "blue" into B 
  
end if   
switch whatcard
    case "grid"
     ig3d_SetGridColor_3f (R),(G),(B)
     beak
  case "background"
    case "tint"
     put ig3d_ExecuteLua_s_i("setSceneInfo("&theLUACommand & "," &  R,G,B &")") into livecolor
break
case "fog"
  updateFogFromControls
  break
case "materials"
  put updateCurMatHiliteColor() into curmatit
put updateMaterialFromInspector() into UpdateMaterialsCOLORS
  break
  end switch
end updateRGBFromPicker
-- --
on GridToggle
  put (hilite of  btn "GridToggle") into showGridBool
    put setMkey(showGrid,showGridBool) into setGridShow
   ig3d_ShowGrid_b  showGridBool // turn on/off (true/false) 
end GridToggle

-- --
Function CutDownColor theCol
  if item 1 of theCol > 255 then put 255 into item 1 of theCol
  if item 2 of theCol > 255 then put 255 into item 2 of theCol
  if item 3 of theCol > 255 then put 255 into item 3 of theCol
  return theCol
end CutDownColor

-- --
on updateFog
  updateFogFromControls
end updateFog

-- --
on updateFogFromControls
  
  put ig3d_GetFogInfo__b5f() into Fog --"false,0.500000,0.500000,0.500000,0.000000,200.000000"
 if (char 1 to -1 fld "fogstart" is not a number and char 1 of fld "fogEnd" is not "-") or fld "fogStart" is empty then put item 5 of F into fld "fogStart"
 if (char 1 to -1  fld "fogEnd" is not a number and char 1 of fld "fogEnd" is not "-")  or fld "fogend" is empty then put  item 6 of F into fld "fogEnd"
      put hilite of button "fog" into item 1 of Fog
    put ( line 1 of field "fogStart") into item 5 of Fog
put ( line 1 of field "fogEnd") into item 6 of Fog
 ig3d_SetFogInfo_b5f (item 1 of Fog),(item 2 of Fog),(item 3 of Fog),(item 4 of Fog),(item 5 of Fog),(item 6 of Fog)
updateRGBFromFields
end updateFogFromControls

-- --
on updateFogFieldData
  put ig3d_GetFogInfo__b5f() into Fog
   set the hilite of btn "fog" to item 1 of fog
   repeat with x = 2 to 6
     put "bool,red,green,blue,fogStart,fogEnd" into thefieldz
     put item x of fog into  fld (item x of theFieldz)
   end repeat
end updateFogFieldData
#######################################END COLOR INSPECTOR SCRIPTS
-- --
Function snapShotSettings tLine,Tvalue
  
  put getMkey(snapShotDefault) into SnapShotValues
  put "name,Width,Height,Alpha,SuperSample,FSAA,Record,Framerate" into SnapVarNames
  if tline is "snapvarnames" then return snapvarnames
   put glrect() into GLR
       put abs(item 1 of GLR - item 3 of GLR) into snapWidth
    put abs(item 2 of GLR - item 4 of GLR) into snapHeight 

  if snapShotValues is empty or number of lines of snapshotvalues > 1 or num(items of snapshotvalues) <  8 then   
    put "snap,"  & snapWidth &"," & snapHeight & ",false,true,32,false,12" into snapshotvalues
    set the snapShotDefault of stack the mainStack of this stack to snapshotvalues
  end if
  if item 1 of snapshotvalues is a number then
    put "snap" before item 1 of snapshotvalues
    set the snapShotDefault of stack the mainStack of this stack to snapshotvalues
  end if
  put snapshotOutPutPath(item 1 of snapshotvalues)  into SnapName
  if Tline is among the items of "2,3" then
  if tline = 2 then 
  put item 1 of GLR + tValue into SnapWidth
  put item 3 of GLR into SnapHeight
  end if
  if tline = 3 then 
  put item 2 of GLR + tValue into SnapHeight
  put item 3 of GLR into snapWidth
  end if
   ig3d_SetWindowBounds_4i (item 1 of GLR),(item 2 of GLR), (snapWidth),(snapHeight)
 end if
set itemDel to "/"
  put item -1 SnapName into shortNFileName
  replace ".png" with empty in shortNFileName
  set itemDel to comma

  put (item 4 of snapShotValues is "true") into hasAlpha
  put (item 5 of snapShotValues is "true") into SuperSample
  put item 6 of snapShotValues into FSAA
  put item 7 of snapShotValues into RecordMovie
  put item 8 of snapshotvalues into MovieFrameRate
  put shortNFileName,SnapWidth,SnapHeight,hasAlpha,SuperSample,FSAA,RecordMovie,MovieFrameRate into snapshotvalues
  if tline is not empty  then
    if tline is a number then put tvalue into item tline of snapshotvalues
    if tline is not a number then
      if  tline is among the items of snapvarnames then  put itemoffset(tline,snapvarnames) into tline
      else put tline into item 1 of snapshotvalues
    end if
  end if
  set the snapShotDefault of stack the mainStack of this stack to snapshotvalues
  replace comma with cr in snapshotvalues
  return snapshotvalues
end snapShotSettings
-- --
Function snapshotOutPutPath whatname
  set itemDel to "-" 
put item 1 of whatname into whatname
  put  WhatName & "*" into filterFor
  put thisLevel(long)&"/snapshots_" & thisLevel() & "/" into OutputPath
  set itemDel to "/"
  put item 1 to -2 of folderPath() & "/" & outputpath into longPath
  put folderPath(outputpath) into longpath
  put filesIn(outputpath,filterfor) into FList
put num(lines of FList)+1 into Fnum
put WhatName&"-"&(fnum) into snapName
  put longPath &snapName&".png" into aFULLPATH
return aFULLPATH
end snapshotOutPutPath
-- --
Function TakeSnapShot SnapShotData
  replace quote with empty in SnapShotData
  put snapShotSettings() into SSD
   replace cr with comma in ssd
   replace quote with empty in ssd
   set itemDel to comma
  if SnapShotData is not empty then 
    repeat with c = 1 to (num(items of  snapshotdata))
      put item c of snapShotData into item C of ssd
    end repeat
  end if
 put snapshotOutPutPath(item 1 of ssd) into item 1 of ssd
 put  item 1 of ssd  into item 1 of ssd
 --put quote & "/Users/billgriffin/test3.png" & quote into item 1 of ssd
if item -2 of ssd is "false" then 
 ig3d_SaveScreenshot_s2bi  (item 1 of ssd),(item 4 of SSD),(item 5 of ssd),(item 6 of ssd)
 else
 --ig3d_BuildQuickTimeMovie_si (item 1 of ssd),(item -1 of ssd)
 end if

put item 1 of ssd into lp
set itemDel to "/"
put item -1 of lp into fnm
replace ".png" with empty in fnm
set itemDel to comma
put fnm into item 1 of ssd
set the snapShotDefault of stack (the mainStack of this stack) to ssd
  return   ssd
end TakeSnapShot
-- --
Function parseStateCOLORS rootPick,col1Pick
  if rootPick is empty then put theRootPick() into rootPick
  put ig3d_GetStateScript__s() into MyState
  filter myState with "*"&rootPick&"*"
  replace space with empty in  mystate
  delete char -1 of mystate
  set itemDel to "("
  delete item 1 of myState
  set itemDel to ","
  delete item 1 of myState
   if rootPick is "fog" then return myState
   if rootPick is "grid" then
     put getMkey(gridColors) into myState
     if myState is empty then put ".5,.5,.5" into myState
     set the gridColors of stack (the mainStack of this stack) to myState
   end if
   if rootPick is among the items of "background,tint,grid" then put "r:,g:,b:" into myItems
   if rootPick is among the items of "ambient,diffuse,specular,emission" then put "r:,g:,b:,a:" into myItems
   repeat with c = 1 to num(items of myItems)
     put item c of  mYitems && item c of myState & comma after StateOut
   end repeat
    --####myState
 delete char -1 of StateOut
 return  StateOut 
end parseStateCOLORS
-- --
Function cleanOldWTFs 
  put allFolders("Levels") into myFolders
  repeat for each line F in myFolders
     put "LEVELS/"  before F 
    cleanOldWTFPathData F
  end repeat
  cleanOldWTFPathData "WTF"
  return myFolders
end cleanOldWTFs
-- --
on cleanOldWTFPathData theFolder
  put listWTF(theFolder) into myWTF
  put "file:/" & folderPath(theFolder) into myPath
  repeat for each line C in myWTF
    put mypath & c into myFile
    put URL myFile into myWTFText
    put lineOffset("#Paths",myWTFText) into S
    put line S+1 to -1 of myWTFText into SecondHalf
    put lineOffset("#",secondHalf) into E
    put line 1 to S-1 of myWTFText & cr & "#Paths" & cr & "0" & cr & line E to -1 of myWTFText into WTFOUT
    put WTFOUT into URL myFile
  end repeat
end cleanOldWTFPathData
#######################################################################################
###################### REBUILD SCENEGRAPH IG3D MAINSTACK  SIDE ######################
#######################################################################################
######################               04 16 06                   ######################

-- --
Function ColS stx
if stx is "sceneGraph" or stx is empty then return "root,col1,col2,col3"
end ColS
-- --
Function COLT  col
  put ColS() into Cs
  put getMkey(sceneGraphPickWords) into thilites
  if col is empty then return thilites
  if col is among the items of cs then return  item (itemOffset(col,Cs)) of thilites
  if the number of items of col > 1 then 
    repeat for each item CSL in col
      if CSL is not a number then  put item (itemOffset(CSL,Cs)) of thilites & comma after theColumnText
      else put item CSL of thilites  & comma after theColumnText
    end repeat
    return theColumnText
  end if
  if col is a number  then return item col of thilites  
end COLT 

-- --
Function ColN  col
put ColS() into Cs
put getMkey(sceneGraphPickLines) into tHiliteLines
if col is empty then return tHiliteLines
if col is among the items of cs then return  item (itemOffset(col,Cs)) of tHiliteLines
if the number of items of col > 1 then 
  repeat for each item CSL in col
    if CSL is not a number then  put item (itemOffset(CSL,Cs)) of tHiliteLines & comma after theColumnText
else put item CSL of tHiliteLines  & comma after theColumnText
  end repeat
return theColumnText
end if

  if col is a number  then return item col of tHiliteLines  
end ColN 
-- --
Function colClickBool theText
  if theText is "true" then return "false"
  if theText is "false" then return "true"
  if theText is "in" then return "out"
  if theText is "out" then return "in"
  return theText
end colClickBool

-- --
Function theRootPick what
  if what is not empty then
    set the rootPick of stack (the mainStack of this stack) to what
    return what
  else
    return (the rootPick of stack (the mainStack of this stack))
  end if
end theRootPick

-- --
Function myEntitySelections
  put the chosenSceneGraphMatrix  of stack (The mainStack of this stack) into tList
  put the chosenMeshEntity of stack (the mainStack of this stack) into theEntity
  put lineOffset(theEntity,tList) into n
  return line n of tlist
end myEntitySelections

-- --
Function getRootLines what
  put "stack" & quote&"SceneGraph"&quote into tpath
repeat for each item f in "root,col1,col2,col3"
  put   (the hilitedline of fld f of tPath) into tNum
   put  line tNum of fld f of tPath  into Tline
if tNum is empty or tnum < 1 or tNum is not a number then put 0 into tNum
if tline is empty then put "|" into tline
put tline & comma after tlns
put tnum & comma after tnums
  end repeat
delete last char of tlns
delete last char of tnums
return  tlns &cr& tNUMs 
end getRootLines
-- --
Function chosenSceneGraphField
  put word 2 of  getmkey(sourcePopupField) into pickedField
  return unquoted(pickedField)
end chosenSceneGraphField
######################################GENERIC FIELD CLICK FUNCTIONS ABOVE
######################################SPECIFIC FIELD CLICKS BELOW
-- --
Function levelRootPick rootPick,col1text,col2text
  put thisLevel("w") & "load script.lua" into theLUaF
      put URL theLUAF into theLUA
      put getMkey(EditingMode) into EM 

if col1text is empty then
         if em&RootPick is "levelname" or em&rootpick is "Level" then   return  thisLevel()
end if

    if rootPick is "mesh"   then 
      filter theLua with "loadMesh(*"
      replace  quote with space in theLua
      replace "Data/" with empty in theLua
      put word 2 to -2 of theLua into myMesh
      set itemDel to "/"
      repeat for each item z in myMesh
        put " " after mysp
        put z & cr & mysp   after myLnes
      end repeat
      return myLnes
  end if
  
    if rootPick is "files" then
         filter theLua with "*/*"
    replace "("  with  cr in theLua
           replace   ")" with cr in theLua
replace comma with cr in theLua
         filter theLua with  "*"&quote
        filter theLua with "*.*"
         replace quote with empty in theLua
          set itemDel to "/"
         repeat for each line L in theLua
           put item -1 of L into testit

           if (num(chars of testit) > 4) is true and char 1 to -1 of testit is not among the lines of allfi then put testit & cr after allFi
         end repeat
         delete char -1 of allfi
         return allfi
end if

if rootPick is "state" then
   put ig3d_GetStateScript__s() into SS
  put SS into SSGlobals
  put SS into SSScene

if col1text is not empty  and col2text is not empty then
  repeat for each line D in SS
    if col2text is in D and col1text is in D then 
      set itemDel to comma
      delete item 1 of D
    
    put char 1 to -2 of D & cr after Gotit
    end if
  end repeat
replace ".000000" with empty in Gotit
  return Gotit
end if

  if col1text is not empty then
    filter SS with "*"&"set" & col1text&"*"
    repeat for each line W in SS
          set itemDel to "("
      put item 2 of W into WhatCheck
      set itemDel to comma
      put item 1 of Whatcheck into entity
      if entity is not in allFi then put entity & cr after allfi
    end repeat
    return allfi
  end if
 filter SSScene with "*set*"
  repeat for each line SD in SSScene
     set itemDel to "("
    put item 1 of SD into KeyWord
    replace "set" with empty in Keyword
    replace "Info" with empty in Keyword
    if keyword is not in allnames then put keyword  & cr after allNames
  end repeat
  delete char -1 of allnames
  return allnames
end if
if rootpick is "scripts" then
  put "file:/" &  thislevel(path) & "load script.lua" into tfile
  put url tfile into checktext
  if checkText is not empty then
  filter checktext with "*.lua*"
  set itemDel to quote
  repeat for each line N in checktext
    put item 2 of N & cr after allfi
  end repeat
  put thislevel(long) & "/load script.lua" & cr before allfi
  delete char -1 of allfi
  replace "Data/" with empty in allfi
  return allfi
end if
return "(not saved)"
end if
end levelRootPick
########################FIELDCLICKS AFTER ROOT BELOW
-- --
on col1FieldClick rootPick,colt,colt2
  if rootPick is empty then put therootPick() into rootPick
  put the ruggedPath of stack "SceneGraph" into lpath
  put  coln("col1") into colN
  if colt is empty then put colt("col1") into  colT
  put colclickbool(colT) into colT
put  getMkey(editingMode) into EM
  put "Face,Floor,top,front,back,left,right" into Csides
if em is "cube" and rootPick is among the items of Csides then put toolUnits(em,rootpick,colt) into action

if  rootpick is "mesh_tags" and colt2 is "select" then mesh_tag_menu "select",coln
  if em is "terrain" then
    lock screen
    put getMkey(terrainData) into tData
    if rootpick is among the items of "red,green,blue,alpha"  then
    put (not item coln of tdata) into item coln of tdata
    set the terrainData of stack (the mainStack of this stack) to tData
   end if
    end if
if em&RootPick is "meshMaterials" then   ig3d_SetCurrentMaterialNumber_i coln
if em is "snapshot" then
  if rootpick is among the items of "Alpha,SuperSample,Record" then put snapshotsettings(coln,colt) into updateSnapshotSettingsonBoolcicl
  end if
put RootEditableLInes() into RootEditable
if rootpick is among the items of rootEditable then
--if char 1 of colT is among the items of "x,y,z,r,g,b,a,dx,dy,dz,a0,a1,a2" or char -1 of colT is a number  then
    put "col1",coln,allText into WhichAsk
    set the F1InputMemory of stack (the mainStack of this stack) to whichAsk
 end if

   

 refillColumns 
end col1FieldClick

-- --
Function RootEditableLInes
 return "name,position,rotation,fov,ortho,centroid,rotate,scale,edges,points,height,width,depth,Material,framerate,alpha"
end RootEditableLInes
--/ the explicit path has become the ruggedPath (similar to the ruggedID on the rev use-list)
--/ which is stored in the ruggedPath of this stack and put into the local lPath
--/ in this script on mousedown, in the stackscript on preopenstack
-- --
on checkForAskField COL,ColLine,COLPick
  put the ruggedPath of stack "sceneGraph" into lpath
  if col is not among the items of "root,col1,col2,col3" then put true into ExitCheck
  put theRootPick() into rootPick
  put getMkey(editingMode) into em
  put rootPick is  among the items of RootEditableLInes() into RootEditBool
  
  if colpick is among the items of "true,false" then put true into ExitCheck
  if colpick&em is  "savesnapshot" or RootEditBool is false   then put true into ExitCheck
  if rootPickk&em is "AlphaSnapShot" then put true into ExitCheck
  if (em&rootPick is "snapShotFsaa") then put true into ExitCheck
  if em is among the items of "quad,cube,cylinder,cone,sphere"  and char -1 of col > 1  then put true into ExitCheck
  if col is "root" and colpick is among the items of rootEditableLines() then put true into ExitCheck
  if em is "Light" then 
    put colt("Col1") into colt1
    if colt1 is among the items of "on/off,type" then put true into ExitCheck
    else put false into exitcheck
    if col is  among the items of "root,col1" then put true into ExitCheck
  end if
  if em is among the items of "quad,cube,cylinder,cone,sphere,dropmesh" then
    if col is among the items of "col1,col2" then put false into exitcheck
    if colPick is among the items of "true,false,in,out" then put true into exitCheck
  end if

  if em is "level" then
    if rootpick is "name" and col is "Col1" then put false into exitcheck
    else put true into exitecheck
  end if 
  if em is "particles" and col is "col2" then 
    if colPick is among the items of "true,false" then put true into exitCheck
    else put false into exitCheck
    if colt("col1") is among the items of "file,texture" then put true into exitcheck
  end if
  if em is "camera" and col is "col1" then put true into exitCheck
  if em is "camera" or em is "select_mesh" and rootPick is among the items of "edges,points" then
    if col is "col1" then put false into exitcheck
  end if
    put "x,y,z,r,g,b,a,dx,dy,dz,a0,a1,a2" into theheaders
if ":" is in colpick then put false into exitCheck
if rootpick is "fog" and colpick is a number then put false into exitCheck

  if exitcheck is true then
    hideFone
    focus btn 1 of stack (the mainStack of this stack)
    exit checkForAskField
  end if
  put  "fld" && quoted(col)  && lpath into psetObject
  set the sourcePopupField of stack (the mainstack of this stack) to psetObject
  set the F1InputMemory of stack (the mainStack of this stack) to col,colline,colpick
  put item 2 of myMem into WhatLine
  put item 3 of myMem into whatText
  put the hilitedText of fld COL into Coltext
  set the hilitedLine of fld col to colline
  askWithField 
end checkForAskField
-- --
on askWithField  ---whatField,WhatLine,whatText
   put the ruggedPath of stack "sceneGraph" into lpath
   put getMkey(targetpopupfield) into theObject
   put getMkey(sourcePopupField) into whatField
    put getMkey(F1InputMemory) into f1inputMem
 put getMkey(editingMode) into em
 put theRootPick() into RP
if theObject is empty then 
put "fld" && quoted("f1")  &&"of"&& lpath into theObject
set the targetpopupfield of stack (the mainstack of this stack) to theObject
  end if
   show  theObject
   do "put" && "empty into line 1 of"&&  theObject
  put item 1 of f1inputMem into pickedField
   put item 2 of f1inputMem into WhatLine
   put item 3 of f1inputMem into whatText
  put updateStatusField("askwith",quote & em && rootpick && whatText & quote) into action
  put item 1  of f1InputMem into pickedField
   put word 2 of theObject into Pfield
  replace quote with empty in pickedField
    replace quote with empty in pField
     put item 2 of f1inputmem into CON
  put the topLeft of fld pickedField of lpath into TL
  put the rect of fld pickedField of lpath into R
   put the FormattedHeight of fld pickedField of lpath into FH
   if "|" is in whatText then  put word -1 of whatText into whatText
   put (CON * 12)-12 into f1top --Top
put 14 + f1top into FLbottom
  put num(chars of whatText) into WTN
  set the rect of fld pfield of lpath to (item 1 of tl),(f1top),(item 3 of R),FLbottom
  put  quote&whatText&quote&" into line 1 of"&&  theObject into whatTextIntoField
   do "put"&& whatTextIntoField
   put quoted(whatField&"," & WhatLine&"," &whatText)  into OutPPut
   do "select line 1 of" &&  theObject 
end askWithField
-- --
Function checkForMenuPop pField,rootpick,col1t,col2t,col3t
  put getMkey(editingMode) into em
  if rootpick is empty then put theRootPick() into rootPick
  if col1t is empty then put colt("col1") into colt1
  put colt(pfield) into pColt
  put (em&rootPick&col2t is "snapShotFsaa6") into    OKPOP
  put "bones,materials,particles,sounds,mesh_tags,pathselect,path" into HASPOPS
   if em is among the items of "path,pathselect" and pfield is not "root" then return empty
  set the text of btn   "popup1" of stack (the mainStack of this stack) to empty
   put RootEditableLInes() into RL
  put "New,Rename,Set,Select,-,Duplicate,-,Delete,Delete All,-,Clean" into EntityModOptions
  if PField is among the items of "root,col1,col2,col3" then
    switch rootpick
    case  "Density" 
      put "2,4,16,32,64" into menut
      break
    case "FSAA"
      if  Char 1 of colt("col2") is "6" or colt("col1") is a number then  put getPopupText("snapshotFsaa") into menut
      if col3t is "save"   then put  empty into menut
    break
    case "Material"
      if em is among the items of "quad,cube,cylinder,cone,sphere"  then put getPopupText(em) into menut
      break
    case "Materials"
      if   char -1 of pfield <> "1" then exit checkForMenuPop 
    case "bones"
    case "mesh_tags"
      put getPopupText(rootPick) into menut
      break
    end switch
    if em is among the items of "cube,quad,cylinder,sphere,cone" then  put EntityModOptions into menut
    if   em is among the items of "path,pathselect"  then  put getPopupText(rootpick) into menut
  if em is  "particles" and colt("Col1") is among the items of "file,texture" then put getPopupText(em) into menut
  end if
  if menut is not empty then 
    replace comma with cr in menut
    set the text of btn "popup1" of stack (the mainStack of this stack) to menut
      send okTOpop to stack (the mainStack of this stack) in 100 milliseconds  
  end if
  return menut
end  checkForMenuPop
 
 on okTOpop
   if the mouse is down then popup btn "popup1" of stack (the mainStack of this stack)
   end okTOpop
-- --
Function getPopupText what
  put therootpick() into  rootpick
  put getMkey(editingMode) into em
      put "New,Rename,Set,Select,-,Duplicate,-,Delete,Delete All,-,Clean" into EntityModOptions
put ig3dList("paths") into Pthlist 
if em is "path" then
if rootpick is among the lines of pthlist or char 1 of rootpick is "(" then return EntityModOptions
  end if
  if what is among the items of "materials,bones,mesh_tags,path,pathselect,objects,sounds" then return EntityModOptions
  if what is "Snapshot" or what is "snapshotFsaa" then return "0,2,4,8,16"
  if what is among the items of "quad,cube,cylinder,cone,sphere" and rootpick is "Material" then  return ig3dList("materials")
if what is "particles" then 
  switch colt("col1")
    case "file" 
      put filesIn("Emitters") into menut
      filter menut with "*.emt"
      replace ".emt" with empty in menut
      return menut
      break
    case "texture"
      put filesin("images") into menut
      filter menut with "*.png"
      replace ".png" with empty in menut
      return menut
  end switch
  end if
    -- 01 07 07 bill--
end getPopupText

######################## EVERYTHING ABOVE THIS LINE IS REQUIRED BY COL1FIELDCLICK and BEYOND
-- --
on col2FieldClick rootPick,coln1
  put  coln("col2") into colN
  put colt("col2") into  colT
  if coln1 is empty then put coln("col1") into colN1
  put colt("Col1") into  colT1
  put the ruggedPath of stack "SceneGraph" into lpath
  put  getMkey(editingMode) into EM
  
  if  em&colT is "terraincreate" then createTerrainMesh
  if rootPick is empty then put theRootPick()  into rootPick
  if rootPick is "mesh_tags" then  mesh_tag_Menu colt,coln1
   
  if colT is "save" and em is "snapshot" then 
    put TakeSnapShot() into  SnapData
    replace comma with cr in snapdata
    put snapdata into fld "col1" of lpath
    replace comma with cr in fld "col1" of lpath
  end if
  
  if char 1 of colT is among the items of "x,y,z,r,g,b,a,dx,dy,dz,a0,a1,a2" or char -1 of colT is a number  then
    put rootPick & colT1 &"|"& colT into allText
    put "col2",coln,allText into WhichAsk
    set the F1InputMemory of stack (the mainStack of this stack) to whichAsk
  end if
  
  if em is "light" then
    put coln("root") into LightN
    put ig3d_GetLightInfo_i_s(LightN) into lightInfo
    if colt is "true" or colt is "false" then put not colt into line 1 of lightinfo
    if colt("col2") is "Directional" then put 1 into item 4 of line 2 of lightINfo
    if colt("col2") is "Positional" then put 0 into item 4 of line 2 of lightINfo
    ig3d_SetLightInfo_is (LightN),lightInfo
    put scenegraphlightdata(LightN) into action
  end if
  
  switch rootPick --rootPick
  case "visibility" 
    put colt into t
    put colclickbool(colT) into colt
    put visibleElements(colt1,colt) into action --into   fld "col2" of lpath 
    break
  case "fog"
    FOgCol2FieldClick
    break 
  case "camera"
    put  sceneGraphCameraData(rootPick)  into xyz
    break
  case "materials"
    put MaterialsCol2FieldClick(coln,colt) into action
    break
  case "lights"
    casel "light"
    put sceneGraphLightData(rootPick,colt) into action
    break
    
    
  end switch
  
end col2FieldClick

-- --
Function sceneGraphCameraData  rootPick,column1pick,col2t,col3t
  put ig3d_GetCameraInfo__s() into cam
  put 1 into n
  switch (rootPick)
    case "visibility"
       if rootPick is "visibility" then return visibleElements()
      break
  case "position"
     repeat for each item i in "x,y,z"
      put i &": " & item n of line 1 of cam &cr after xyz
       add 1 to n
    end repeat
    delete char -1 of xyz
    break
  case "rotation"
    repeat for each item i in "x,y,z"
      put i &": " & item n of line 2 of cam &cr after xyz
       add 1 to n
    end repeat
     delete char -1 of xyz
    break
  case "fov"
put  ig3d_GetProjection__b5f() into xyz
ig3d_SetProjection_b5f true,(item 2 of xyz),(item 3 of xyz),(item 4 of xyz), (item 5 of xyz), (item 6 of xyz)
put item 2 of xyz into xyz
--put ig3d_ExecuteLua_s_i("fovb, fovf=getSceneInfo(IG3D_FOV)")  & cr into testFov
--put ig3d_ExecuteLua_s_i("output(tostring(fovb).." & quote & "," & quote & "..fovf)")   after testFov ## THIS CAUSES LOOP AND CRASH FIND OUT WHY--BILL010307
    break
    case "ortho"
      put  ig3d_GetProjection__b5f() into xyz
     
      ig3d_SetProjection_b5f false,(item 2 of xyz),(item 3 of xyz),(item 4 of xyz), (item 5 of xyz), (item 6 of xyz)
 put item 3 to 6 of xyz into xyz
      break
      case "edges"
        put ig3d_GetLineWidth__f() into xyz
        break
      case "points"
        put  ig3d_GetPointSize__f() into xyz
        break
  case "track"
    break
  case "path"
    break
  case "keys"
    break
  end switch
  return xyz
end sceneGraphCameraData
-- --
on FOgCol2FieldClick    
    if colt("col1") is "show" then
  put ig3d_GetFogInfo__b5f() into fog
 put not (item 1 of fog) into item 1 of fog
 put item 1 of fog into line 1 of fld "Col2"
 ig3d_SetFogInfo_b5f (item 1 of fog),(item 2 of fog),(item 3 of fog),(item 4 of fog),(item 5 of fog),(item 6  of fog)

else
put  colt("col2") into allText
  put "col2",coln("col2"),allText into WhichAsk
   set the F1InputMemory of stack (The mainStack of this stack) to whichAsk
 end if

end FOGCol2FieldClick

-- --
Function MaterialsCol2FieldClick coln,colt
  put the ruggedPath of stack "sceneGraph" into lpath
    ig3d_CombineEqualMeshMaterials
   put coln("col1") into N
--    put ig3d_GetCurrentMaterialNumber__i()  into n
    put ig3d_GetMeshMaterialInfo_i_s(n) into matData
    delete line 2 of matData
    replace "=" with comma in matData
    repeat for each line Lii in matData
      put item 1 of lii & cr after MaterialAttributes
      put (item 2 to -1 of lii )& cr after materialINFO
    end repeat
    ##Put materialInfo
    put line 1 of materialAttributes into line 1 of materialINFO
    put "name" into line 1 of materialAttributes
    put line coln("col2")+1 of materialINFO  into theMatData
    replace comma with cr in theMatdata
    
    if  colt("col2") is among the items of "ambient,diffuse,specular,color,emission" then
      repeat with C=1 to 4
        put item C of "r,g,b,a" & ":" && line C of theMatData & cr after OutputMatData
      end repeat
    else
      put theMatdata into outPutMatData  
    end if 
    if colt("col2") is "texture" then put getTextureofMaterial(N) into theMatData
    if "/" is in theMatData then 
      set itemDel to "/"
      put cr& space & space  into chc
      repeat with co=2 to num(items of theMatdata)     
        put tab & chc into char Offset("/",thematData) of theMatData
        put  space & space after Chc
      end repeat
      replace tab with "/" in theMatData
      put theMatData into outputMatData
    end if
     return outputMatData
end MaterialsCol2FieldClick
########################## EVERYTHING ABOVE FOR COL2 FIELD CLICK
-- --
on col3FieldClick  
 put  coln("col3") into colN
  put colt("col3") into  colT
  put colclickbool(colT) into colT
if rootPick is empty then put theRootPick()  into rootPick
put the ruggedPath of stack "SceneGraph" into lpath
put  getMkey(editingMode) into EM
put chosenSceneGraphField() into pCol
if em is "visibility" then updateVisibility
--  switch em
--  case "camera"
--    put ig3d_GetCameraInfo__s()  into data
--    put ig3d_GetElapsedSeconds__f()*40 into t
--    put .1 into t
--    switch colt
--    case "move"
--      if the mouse is down then send mouseDowninme to fld  "col3"  of lpath 
--      break
--      end switch
--      ig3d_SetCameraInfo_s data
--      --if the mouse is down then send col3fieldclick to me in 30 milliseconds
--      break
--    end switch
if em is among the items of "cone,cube,sphere,cylinder,quad" then
  put ig3dlist("mesh_tags") into tlist
  put lineoffset(colt,tlist) into tagN
  put not (the shiftKey is down) into NBool
  ig3d_SelectMesh_tagVertices_ib tagn,Nbool
end if
if em is "particles" then particlesMenuPick colt
  end col3FieldClick
  
  on particlesMenuPick colt
    put therootPick() into RP
    switch colt
      case "start"
        put "setParticle_emitterInfo(" & RP & ", IG3D_START)" into ig3dLuaParticle
        put ig3d_ExecuteLua_s_i(ig3dLuaParticle) into luaaction
        --put ig3dLuaParticle
        break
      case "stop"
        put "setParticle_emitterInfo(" & RP & ", IG3D_STOP)" into ig3dLuaParticle
        put ig3d_ExecuteLua_s_i(ig3dLuaParticle) into luaaction
      break        
    end switch

end particlesMenuPick
##LIGHTSLIGHTSLIGHTSSCENEGRAPHSCENEGRAPHSCENEGRAPHLIGHTSLIGHTSLIGHTS
-- --
Function chosenLight LightNUmber
  if lightNumber < 1 or lightNumber is not a number or lightNumber is empty then 
    put getMkey("gchosenLight") into lightNumber
    if lightNumber is empty then put 1 into lightNumber
  end if
    put setmkey("gchosenLight",lightNumber) into setLightpick
return LightNUmber
end chosenLight

-- --
Function allConesSize whatSize
  repeat with theLight = 1 to 8
    ig3d_SetLightConeLength_if theLight,whatSize -- the spot conelength
  end repeat
  return whatsize
end allConesSize

-- --
Function sceneGraphLightData rootPick,colt1,colt2
put "on/off,position,type,ambient,diffuse,specular,direction,cutoff,exponent,attenuation,cone" into lightAttributes
put  "1,2,3,4,5,6,7,8" into lightNumbers
if rootpick is empty then put theRootPick() into rootpick
if rootPick is "root" then return lightNumbers
if rootPick is "col1" then return lightAttributes
if rootpick is not a number then put chosenLight() into rootpick
put chosenLight(rootPick)  into gChosenLight

if colt1 is empty then put colt("col1")  into colt1
--if colt2 is empty then put colt("col2") into colt2
put ig3d_GetLightInfo_i_s(rootpick) into lightData
 put line coln("col1") lightData  into LIGHTAttributeValues
  put 1 into c 
 
  switch (colt1)
    case "on/off"   ----  OnOFF
      --if the screenmouseloc is within the rect of stack "SceneGraph" then
--put  colClickBool(line 1 of lightData) into  line 1 of lightData
--ig3d_SetLightInfo_is rootpick,lightData
   --end if
 return  (item 1 of line 1 of lightData) 
break
    case "position"  ----  Position
repeat for each item i in "x,y,z" 
  put i & ": "& item c  of line 2 of lightData & cr after theLightREturn
  add 1 to c
end repeat
break 
    case "type"  ---xtype
if (item 4 of line 2 of lightData)  < 1 then return "Directional"
else  return "Positional"
return  (item 4 of line 2 of lightData)
break
    case "ambient" 
    case "diffuse"
    case "specular" 
put coln("col1") into m
 repeat for each item i in "r,g,b,a" 
  put i & ": "& item c  of line m of lightData & cr after theLightREturn
  add 1 to c
end repeat
break
    case "direction" 
repeat for each item i in "dx,dy,dz" 
  put i & ": "& item c  line 6 of lightData & cr after theLightREturn
  add 1 to c
end repeat
break
    case "cutoff"
    case "exponent"
  put  coln("col1") -4 into i
  return item i of line 6 of lightData
  break
    case "attenuation"  ----  attenuation
repeat for each item i in "a0,a1,a2" 
  put i & ": "& item c  line 7 of lightData & cr after theLightREturn
  add 1 to c
end repeat
break
  end switch
  return theLightREturn
end sceneGraphLightData
###############################SCENEGRAPHLIGHTS
-- --
Function meshActualSize
   put ig3d_GetMeshBounds__6f() into theSize
set itemDel to comma
  put 1 into cnc
  repeat for each item x in "1,3,5"
    put item x of theSize into vD
    put  item x+1 of theSize into vDS
    put  vD & "," & vDS & comma after theVS
    try
      put abs(vD - vDS) & comma after MeshHeightWidthDepth
    end try
  end repeat
  delete  char -1 of MeshHeightWidthDepth
  return MeshHeightWidthDepth
end meshActualSize
################################SCENEGRAPHMESH
-- --
Function sceneGraphMeshData rootP,col1,col2,col3
  put "select_mesh" into em
    put false into doXyz
    if rootP is empty then return  "info,materials,mesh_tags,terrain" 
put empty into theHeaders

  put rootP & "," & col1 into BothP
  #### FIRST SWITCH FIRST FIELD
--  --put rootP,col1
  switch (rootP)
    case "mesh_tags"
      if col1 is not empty then return "centroid,rotate,scale" 
      break
    case "edges"
  case "points"
    put sceneGraphCameraData(rootP,col1,col2,col3) into meshmodvals
break
 case "rotate"
    put "x,y,z" into theHeaders
    put  the meshRotateMemory of stack (the mainStack of this stack) into meshModVals
    repeat with n = 1 to 3
      if item n of meshmodvals is not a number or item n of meshmodvals is empty then put "0.00" into item n of meshmodvals
    end repeat
if meshModVals is empty then put "0.00,0.00,0.00" into meshModVals 
    set  the meshRotateMemory of stack (the mainStack of this stack) to item 1 to 3 of meshModVals
  break
  case "scale"
      put "x,y,z" into theHeaders
     put meshActualSize() into MeshModVals
break
case default
case "centroid" 
    put "x,y,z" into theHeaders
    put ig3d_GetMeshCentroid__3f() into meshModVals 
   break
case  "Extrude" 
 put  getMkey(extrudeValue) into meshModVals
 if meshModVals is empty then 
    put item 2 of ToolUnits("Cube") into meshModVals
 put setMkey(extrudeValue,meshModVals) into setExtrudeValue
 end if

case "info"
  put "polygons" && ig3d_GetNumberOfPolys__i() &"," into meshINfo
  repeat for each item I in "materials,mesh_tags,paths,textures"
    put i && num(lines of ig3dList(i)) & "," after MeshInfo
  end repeat
  put char 1 to -2 of meshinfo into meshModVals
break

case "materials"
    ig3d_CombineEqualMeshMaterials
    put ig3d_GetCurrentMaterialNumber__i()  into n
    if n < 1 then put 1 into n
    set the hilitedLine of fld "col1" of lpath to n
  return ig3dList("Materials")
  break

end switch

if col1 is not empty then
  put "--------,--------,--------,--------," into  meshModVals
  put empty into theheaders
  end if
if theHeaders is not empty  then
 repeat with c =1 to num(items of meshModVals)
      put item c of theHeaders & ": "  before item c of meshModVals 
    end repeat
end if

return meshModVals
end sceneGraphMeshData

-- --
on hideFOne
 put getMkey(targetpopupfield) into theObject
 set the F1InputMemory of stack (the mainStack of this stack) to empty
 if theObject is empty then exit hidefone
 do "hide" && theObject
 focus btn 1 of stack (the mainStack of this stack)
end hideFOne
-- --
Function visibleElements aThing,colBOOL
  put getMkey(visibleElementsList) into visBOOLS
     put "backfaces,depthtest,fog,grid,lights,mesh,paths,GLTitle,GLShadow" into visChoices
if visBOOLS is empty or the num(items of visbools) is not num(items of vischoices)  then 
put "false,false,false,true,true,true,false,true,true" into visBOOLS
set the visibleElementsList of stack (The mainStack of this stack) to visbools
end if
  if aThing is "bool" then return visbools
     if aThing is empty then return visChoices
      if aThing is not a number then put itemOffset(aThing,visChoices) into aThing
 if colBOOL is empty then put item aThing of visBOOLS into colBOOL
  
  if colBool is "true" or colBool  is "false"   and aThing is a number  then put colBool into item aThing of visbools 
 put setmkey(aThing,colBOOL) into effect

repeat with n = 1 to num(items of visChoices)
  put item n of visChoices into tchoice
  put  item n of visBOOLS into VB
if VB is not "true" and VB is not "false" then 
put false into vb
put vb into item n of visBools
end if
  switch (tchoice)
    case "select_mesh"
      if VB is "true" then showAllMesh
      if VB is "false" then  hideAllMesh
      break
      case "backfaces"
   ig3d_SetBackfaceCulling_b (VB)

break
case "depthtest"
  ig3d_SetMeshZBuffering_b (VB)
  break
  case "lights"
    ig3d_ShowLights_b (VB)
    break
case "fog"
put ig3d_GetFogInfo__b5f() into FD
put VB into item 1 of FD
ig3d_SetFogInfo_b5f (item 1 of FD),(item 2 of FD),(item 3 of FD),(item 4 of FD),(item 5 of FD),(item 6 of FD)
  break
  case "paths"
    ig3d_SetPathsVisible_b (VB)
    break
  case "grid"
    ig3d_ShowGrid_b (VB)
    break
  case "mesh"
    if vb is true then
     ig3d_ShowAll
    else 
    ig3d_MakeInvisible
   ig3d_SelectWholeMesh
   end if
    break
  end switch
end repeat

if item aThing of vicChoices is "GlTitle" or aThing is "GlShadow" then put GLTitleShadowChange(item aThing of visChoices) into visboolchange
set the visibleElementsList of stack (the mainStack of this stack) to visBOOLS

return visBOOLS
end visibleElements
##########################
-- --
on rootFieldClick rootPick
  put the ruggedPath of stack "SceneGraph" into lpath
  put the hilitedLine of fld "root" of lpath into tHL
  if rootPick is empty then put theRootPick() into rootPick
  put getMkey(EditingMode) into EM
  --put em,rootpick,thl,lpath
    put   ig3d_GetSelection__s() into oldSelection
  --put em
  if em is among the items of "objects,particles,sounds" then
    put rootPick into NewSelection
            if em is "particles" then put em & space before  NewSelection
    if the shiftKey is Down then 
    if rootPick  is in oldSelection then 
    delete line lineOffset(rootpick,oldselection) of oldSelection
    put oldSelection into NewSelection
  else
    put cr &    ig3d_GetSelection__s() after NewSelection
      end if
end if
    ig3d_SetSelection_s NewSelection
  end if

  if "(" is in rootPick then
    put word 2 of rootPick into rootPick
    delete char -1 of rootPick
  end if
  
  set itemdel to comma
  switch EM
  case "Level"
    put thisLevel() into theLevel
    if  rootPick is theLevel then 
      put "root",1,thisLevel() into WhichAsk
    end if
    break
  case "path"
  case "pathselect"
    put coln("root") into rootn
    set the chosenPathAttributeLine of stack (the mainStack of this stack) to rootn
    put chooseAtool(em) into toolpick
    set the hilitedline of fld "col1" of lpath to lHilites["col1pick"]
    break
  case "sound"  ### "sound" is not among the lines of fld "root" anymore
    get ig3dList("sounds")
    if it = "" then get "(no sounds)"
    put it into fld "col1" of lpath
    put chooseAtool("sounds") into toolPic
    break
  case "light"
  case "lights"
    put getmkey(editingmode) into em
    put "light" && char 1 of rootpick into NewSelection
    if the shiftKey is Down then put cr &    ig3d_GetSelection__s() after NewSelection
    ig3d_SetSelection_s NewSelection
    put sceneGraphLightData(rootPick) into Lights
    break
  end switch
  replace "select_" with empty in em
  put   ig3d_GetSelection__s() into tSelection
  put em &"::"& therootpick() into tTitle
  if num(lines of tselection) > 1 then
    replace em with empty in tselection 
    replace cr with " &" in tSelection
  put  space & tSelection after tTitle
  end if
  set the title of stack "sceneGraph" to tTitle  
  set the F1InputMemory of stack (the mainStack of this stack) to whichAsk
end rootFieldClick
-- --
on MatchedLineHilites pfield
  put the ruggedPath of stack "sceneGraph" into lpath
  put theRootPick() into rootPick
  put getMkey(editingmode) into EM
    put em & theRootpick() & pField into CheckMatchLines
   if CheckMatchLines is "cameravisibilityCol1" then set the hilitedLine of fld "col2" of lpath to (the hilitedLine of fld "col1" of lpath)
 if CheckMatchLines is "cameravisibilityCol2" then set the hilitedLine of fld "col1" of lpath to (the hilitedLine of fld "col2" of lpath)
if em&pfield is  "snapShotroot" then set the hilitedLine of fld "col1" of lpath to (the hilitedLine of fld "col2" of lpath)
if em&pfield is  "snapShotcol1" then set the hilitedLine of fld "root" of lpath to (the hilitedLine of fld "col1" of lpath)
if em&rootPick is "meshMaterials" then
  put  num(lines of fld "col3" of lpath) into col3Lns
    if col3Lns= 1 and colt(col3) is not "" then set the hilitedLine of fld "col3" of lpath to 1
end if
 if em & pfield is "Terrainroot" then set the hilitedLine of fld "col1" of lpath to (the hilitedLine of fld "root" of lpath)

 if  em &  pfield is "Terraincol1" then
   if (the hilitedLine of fld "col1" of lpath) > num(lines of fld "root" of lpath) then 
 set the hilitedLine of fld "root" of lpath to num(lines of fld "root" of lpath)
 else
  set the hilitedLine of fld "root" of lpath to (the hilitedLine of fld "col1" of lpath) 
 end if
 end if

      if rootPick is among the items of "fog"  then
      if pfield is "col2" then set the hilitedline of fld "col1" of lpath to the hilitedline of fld "col2" of lpath
      if  pfield is "col1" then set the hilitedline of fld "col2" of lpath to the hilitedline of fld "col1"of lpath
end if
if em is "snapshot" then
  if pfield is "root" then set the hilitedline of fld "col1" of lpath to the hilitedline of fld "root" of lpath
      if  pfield is "col1" then set the hilitedline of fld "root" of lpath  to the hilitedline of fld "col1" of lpath
end if

  if rootPick is among the items of "edges,points,fov" then set the hilitedline of fld "col1" of lpath to 1
if  em is among the items of "quad,cube,dropmesh,cone,cylinder,sphere" then 
    if pfield is among the items of "root,col1,col2" then
      put the hilitedline of fld pfield of lpath into n
      repeat for each item F in "root,col1,col2"  
        set the hilitedLine of fld f of lpath to n
      end repeat
      end if
end if
end MatchedLineHilites
-- --
on SceneSwitchHilites whatField,whatLine,whatText
  if whatField is empty then put "root" into whatField
  if whatLine is empty then put coln(whatField) into whatLine
  if whatText is empty then put colt(whatField) into whatText 
  put the ruggedPath of stack "sceneGraph"  into lPath
  switch whatField
  case "root"
  case "col1"
  case "col2"
  case "col3"
    put fld whatField of lpath into coltext
    if whatLine is not a number then put lineOffset(whatLine,coltext) into whatline
    if whatline is 0 or whatLine is empty then put coln(whatField) into whatLine
if line whatLine of fld whatField of lpath is empty then
inputFromf1
hidefone
 exit SceneSwitchHilites
 end if

set the hilitedLine of fld whatField of lpath to whatLine
put line whatLine of coltext into MyLine
put myLine into whatText
   put myLine into line 1 of fld "f1" of stack "SceneGraph"
   if char 2 of myLine is ":" then put word -1 of myLine into myLine
set the Line1ofF1 of stack (the mainStack of this stack) to myLine
set the f1inputMemory of stack (the mainStack of this stack) to (whatField,whatLine,WhatText)
MatchedLineHilites whatField
send updateSwitchedHilites && whatField to group "rootLeft" stack "SceneGraph" in 40 milliseconds
end switch
end SceneSwitchHilites
########INPUT FROM F1 f1 f1 f1 f1 f1 f1
-- --
on inputFromF1
  put the ruggedPath of stack "SceneGraph" into lpath
  put the Line1ofF1 of stack (the mainStack of this stack) into MyLine
  put the F1InputMemory of stack (the mainStack of this stack) into mem
  put theRootPick() into rootPick
  put "inputFromF1" & cr into recInput
  put "ruggedPath of stack SceneGraph" && lpath & cr after RecInput
  put "Line1ofF1 of the mainStack" && myLine & cr after recinput
  put "F1InputMemory of the mainStack" && mem & cr after recInput
  put "theRootPick()"&& rootPick & cr after recINput
  write recInput to stderr
 replace quote with empty in mem
 if mem is empty then 
 hideFOne
 exit inputFromF1
 end if
   put quoted(item 1 of mem )into whatField
     put item 2 of mem into WhatLine
     put item 3 of mem into OriginalLines
     put word -1 of mem into OriginalText

If mem contains "|" then 
  put item 3 of mem into mySwitchLine
  set itemDel to "|"
put item 1 of mySwitchLine into myswitch
put word 1 of item 2 of mySwitchLine into myHeader
end if
     if MyLine is empty then  put OriginalText into MyLine
          put myLine  into TextReplaceMent
 put getMkey(editingMode) into EM
 put WhatLine into NofXYZ
 set itemDel to comma
 switch em 
   case "camera"
     inputToCameraFromF1 myLine,WhatLine
     break
case "light"
  case "lights"
   inputToLightsFromF1 myLine,Whatline
    break
   case "snapShot"
     put snapShotSettings(whatline,myline) into setsnapshots
   break
   case "objects"
inputToObjectsFromF1 myLine,WhatLine
   break
     case "select_mesh"
       case "terrain"
       if  rootpick is among the items of "edges,points" then inputToCameraFromF1 myLine,WhatLine
else inputToMeshFromF1 myLine,whatline,NofXYZ
     break
 case "level"
inputToLevelFromF1 myLine,WhatLine,NofXYZ
   break
   case "colors"
     inputToColorsFromF1 myLine,WhatLine,NofXYZ  ---WAS updateRGBFromFields
     break
   case "path"
     case "pathSelect"
       inputToPathFromF1 myLine,WhatLine,nofXYZ
       break
     case "particles"
       inputToEmittersFromf1 myLine,coln("col1"),nofXYZ
       break
 end switch
 if em is among the items of "cube,cone,cylinder,sphere,quad,dropMesh" then inputToPrimitivesFromf1 myline,whatline
   updateRootEditMode em
 --if keysDown() <> "" then hideFOne
 refillColumns
end inputFromF1

-- --
on inputToLightsFromF1 myLine,Whatline
   put coln() into colNS
    put item 2 of colns into LE
    put item 3 of colns into itemN
    put "dx:,dy:,dz:,a0:,a1:,a2:" into headers
    repeat for each item i in headers
      replace i with empty in myline
    end repeat
    put ig3d_GetLightInfo_i_s(item 1 of colns) into lightInfo
    if LE > 3 then put LE-1 into LE
    if colt(2) is "direction" then put 6 into LE
    if colt(2) is "cutoff" then
      put 6 into LE
      add 3 to itemN
    end if
    if colt(2) is "exponent" then
      put 6 into LE
      add 4 to itemN
    end if
    if colt(2) is "attenuation" then put 7 into LE
    put myLine into item itemN of line LE of lightInfo

       ig3d_SetLightInfo_is (item 1 of colns),lightInfo

end inputToLightsFromF1
-- --
on inputToObjectsFromF1 myLine,whatLine
put theRootPick() into ObjectPick
put colt(2) into Transformer
 put ig3d_GetObjectInfo_s_s(ObjectPick) into objdata
 put objdata into firstdat
 switch Transformer
   case "position"
     put myLine into item Whatline of line 2 of objdata
     break
     case "rotation"
       put myLine into item Whatline of line 3 of objdata
       break
     case "scale"
       put myLine into item Whatline of line 4 of objdata
       break

 end switch

ig3d_SetObjectInfo_2s (ObjectPick),objdata 
put "doarender=render()" into luacommad
put ig3d_ExecuteLua_s_i(luacommad) into renderlua
end inputToObjectsFromF1

-- --
on inputToCameraFromF1 myLine,whatLine
put theRootPick() into rootPick
 put ig3d_GetCameraInfo__s() into cam
 put ig3d_GetProjection__b5f() into VSet
 switch rootPick
   case "position"
     put myLine into item Whatline of line 1 of cam
     if the shiftKey is down then put myLine,myline,myline into line 1 of cam
     break
     case "rotation"
       put myLine into item Whatline of line 2 of cam
       if the shiftKey is down then put myLine,myline,myline into line 1 of cam
       break
     case "fov"
       put myLine into item 2 of VSet
       break 
       case "ortho"
         put myLine into item whatLine+2 of vset
         break
        case "edges"
ig3d_SetLineWidth_f myline
        break
      case "points"
          ig3d_SetPointSize_f  myline
        break

           
 end switch
 ig3d_SetCameraInfo_s cam
 ig3d_SetProjection_b5f (item 1 of vset),(item 2 of vset),(item 3 of vset),(item 4 of vset),(item 5 of vset),(item 6 of vset)
end inputToCameraFromF1

-- --
on inputToPathFromF1 myLine,WhatLine,NofXyz
  put therootPick() into rootpick
put getMkey(editingmode) into em
put colt("col1") into rc
put theChosenPath() into TP

put myline into item nofxyz of line rc+1 of TP

put line 1 of tp into pathi
put line 2 to -1 of tp into Pdata
if pathi < 1 or num(items of pathi) > 1 then put 1 into pathi
if num(items of pdata) < 3 then 
  repeat for each line n in pdata
    repeat with p=1 to 3
      if there is an item p of n then next repeat
      put "," & "0.0" after pdata
    end repeat
  end repeat
  end if
ig3d_SetPathInfo_is pathi,pdata
--put pathi,pdata
end inputToPathFromF1
-- --
on inputToMeshFromF1 myLine,WhatLine,NofXYZ
  put therootPick() into rootpick
  put getMkey(editingmode) into em
  put getmkey(F1InputMemory) into tfieldtlinetdata
  if ":" is in myLine then
    set itemDel to ":"
    put item 2 of myLine into myline
  end if 
   set itemDel to comma
  if em is "terrain" then
    put coln("root") into itemN
    put getMkey(terrainData) into tData
    put myLine into item itemN of tData
    set the terrainData of stack (the mainStack of this stack) to tData
    hidefone
    refillColumns 
    exit inputToMeshFromF1
  end if
  if rootPick is "materials" then inputToMaterialsFromF1 myLine,WhatLine,NofXYZ
  put colt("col1") into rc
  put ig3d_GetMeshCentroid__3f() into xyz
  switch rootPick
  case "centroid" 
    put MyLine into item WhatLine of xyz
    if the ShiftKey is down then put (myLine,myLine,Myline) into xyz
    ig3d_SetMeshPosition_3f (item 1 of xyz),(item 2 of xyz),(item 3 of xyz)
    break
  case "Scale"
    ig3d_PushMeshToUndoCache
    switch (item 1 of tfieldtLinetData)
        
    case "col1"
      put meshActualSize() into scaleMesh
      if myLine < 0 then put 0 into myLine
      if myline > item whatline of scaleMesh then put myline- (item whatLine of scaleMesh)  into absdifscale
      else put (item whatLine of scaleMesh) - myLine into absdifscale
      if absdifscale < 0 then put 0 into absdifscale
      if (the shiftKey is down) is true then
        repeat with n=1 to 3
          put absdifscale + item n of scaleMesh into item n of scaleMesh
        end repeat
      else
        put myline into item whatLine of scaleMesh
      end if
      ig3d_SetMeshPositionNoUndo_3f (0),(0),(0)
      ig3d_ScaleSelectedMeshTo_3f (item 1 of scaleMesh),(item 2 of scaleMesh),(item 3 of scaleMesh)
      break
    case "Col2"
  put "100,100,100" into scalemesh
       put scaleMesh into changeScale
      if myLine < 0 then put 0 into myLine
      if myLine < 100 then put 99 into myline
      if myline > 100 then put 101 into myline
      put myline into item whatLine of scaleMesh
        put myline into item whatLine of changeScale
      if (the shiftKey is down) is true then
        repeat with n=1 to 3
          put myline into item n of scaleMesh
                    put myline into item n of changeScale
        end repeat
         end if
         
  
      ig3d_SetMeshPositionNoUndo_3f (0),(0),(0)
        ig3d_ScaleSelectedMesh_3f (item 1 of changeScale),(item 2 of changeScale),(item 3 of changeScale)
              break
    end switch
    
    ig3d_SetMeshPositionNoUndo_3f (item 1 of xyz),(item 2 of xyz),(item 3 of xyz)
    put sceneGraphMeshData(meshselectionscale)  into myText
    set the scaledMemory of stack the mainStack of this stack to scaleMesh
    break
  case "Rotate"
    ig3d_PushMeshToUndoCache
    put "0.0,0.0,0.0" into Rotatemesh
    put ig3d_GetElapsedSeconds__f() into Passed
    put myLine-(myLine+passed) into n
    if item 1 of keysdown() is among the items of "65361,65364" then put -1 into myline
    if item 1 of keysdown() is among the items of "65362,65363" then put 1 into myline
    
    put MyLine into item whatLine of Rotatemesh
    if the ShiftKey is down then put (myLine,myLine,Myline) into Rotatemesh
    ig3d_RotateSelectedMesh_6f (item 1 of Rotatemesh),(item 2 of Rotatemesh),(item 3 of Rotatemesh),(item 1 of Xyz),(item 2 of Xyz),(item 3 of Xyz)
    set the meshRotateMemory of stack (the mainStack of this stack) to Rotatemesh
    
    break
  end switch
end inputToMeshFromF1
 
 
 on inputToPrimitivesFromf1 myLine,WhatLine
  
   put therootPick() into rootpick
put getMKey(editingMode) into EM
put getMkey(Line1ofF1) into ioData
put getmkey(F1InputMemory) into ColRootNVal

if item 1 of ColRootNVal is "col1" then 
 put ToolUnits(em,rootpick,Myline) into action
 if the shiftKey is down then put LowRandToolUnits(em,rootpick,myline) into action
 end if
if item 1 of colRootNval is "col2" then 
put LowRandToolUnits(em,rootpick,myline) into action
if the shiftKey is down then put ToolUnits(em,rootpick,Myline) into action
end if
end inputToPrimitivesFromf1
-- --
on inputToMaterialsFromF1 myLine,WhatLine,NofXYZ
  put coln("Col1") into Matnumber
   put ig3d_GetMeshMaterialInfo_i_s(MatNumber) into RAWMatData
  put ig3d_GetMeshMaterialsList__s() into MatList
  put colt("col2") into MatAttribute
  if matAttribute is  "texture" and myLine is  a number then exit inputToMaterialsFromF1
  put meshMaterialAttributes() into MatATTRIBS
  put lineOffset(matAttribute,RAWMatData) into insertintoLineX
    if  MatAttribute is among the items "smooth,blend,depth"  then
      if myline is not 1 and myLine is not 0 then put 1 into myLine
      put myLine into char -1 of line insertintoLineX of RAWMatData
      end if
    put rawMatData into firstMatData
  if matAttribute is among the items of "color,ambient,diffuse,specular,shininess,emission,wire" then
    if myline is not a number then put "0.00" into myLine
    if matAttribute is not "wire" and myLine  > 1 then put 1 into myLine
    if "." is not in myLine then put myLine & ".00" into myLine
    set itemDel to "="
    put item 2 to -1 of line insertintoLineX of RawMatData into matColorData
    set itemDel to comma
    put myLine*1.00 into item WhatLine of matColorData
    put matAttribute & "=" & matColorData into line insertintoLineX of RawMatData
  end if
  ig3d_SetMeshMaterialInfo_is matNumber,RawMatData
end inputToMaterialsFromF1

 on setTOMeshMaterial n
  if n is empty then put  ig3d_GetCurrentMaterialNumber__i() into n
 ig3d_SetMaterialForSelectedMesh_i n  ---SET Polys to CURRENT MESH MATERIAL
  --put n  && origin into Fnd
put ig3d_GetMeshMaterialsList__s() into theMats

end setTOMeshMaterial

-- --
Function FieldArrowHtml arrowState
  put quoted("webdings") into WDZ
  put quoted("10") into FS
  put quoted("#0000000") into C
  
  switch arrowstate
    case "close"
      return "<p><font face="&WDZ &" size="&FS&" color="&C&">6</font>"
      break
      case "open"
       return "<p><font face="&WDZ &" size="&FS&" color="&C&">4</font>"
      break
  end switch
end FieldArrowHtml
-- --
Function meshMaterialAttributes whatMaterial
  if whatmaterial is  empty then put ig3d_GetCurrentMaterialNumber__i() into whatMaterial 
    put ig3d_GetMeshMaterialInfo_i_s(whatMaterial) into MatData
    put matData into MatNS
    replace "=" with "==" & cr  in matData
    filter matData with"*=*"
    replace "==" with empty in matData
    return matData
end meshMaterialAttributes

-- --
Function getTextureofMaterial nMat
  if Nmat is empty then put ig3d_GetCurrentMaterialNumber__i() into nMat
    put ig3d_GetMeshMaterialInfo_i_s(nMat) into MatData
    put line lineOffset("texture",matData) of MatData into texLine
    set itemDel to "="
    put item 2 to -1 of texline into TextureName
    set itemDel to comma
    return item 2 of textureName
end getTextureofMaterial

-- --
on inputToLevelFromF1 myLine,WhatLine,NofXYZ
put theRootPick() into rootPick
   put coln("root")  into rootL
    put thisLevel() into theLevel
       if rootL is 1 then put theLevel into rootPick
   switch rootPick
  case (theLevel)  
     put "Data/Levels/" & myLine into myLevelPath
     put allFolders("Levels") into myFolds
     if myLine is  not in myFolds then
       put saveToFolderPath(myLevelPath) --into fullpath
       else
       answer "overwrite existing level" && myLine with "load Level" and "yes" and "cancel"
       if it is "cancel" then  exit inputToLevelFromF1
       if it is "load Level" then 
         put "save" && theLevel && "before closing" into askWhat
         answer askWhat with  "No" and "Save"
         if it is not "no" then put iGame3dFIleMenuPick("Level|Save") into savepick
              put "loadLevel(" && quoted(myLevelPath) &")" into LuaLoaLevel
       put ig3d_ExecuteLua_s_i(LuaLoaLevel) into action
     end if
   else
            put saveToFolderPath(myLevelPath) into savefilefun
 end if
 
   set itemDel to "/" 
   put thisLevel() into line rootL of fld "root" of stack "scenegraph"
   set the hilitedLine of fld "root" of stack "scenegraph" to 1
   break
 end switch
 refillColumns
end inputToLevelFromF1

################################################### UV COORDINATES UV SETTINGS UV UV UV UV
-- --
on saveUndoMesh
  ig3d_PushMeshToUndoCache
end saveUndoMesh

-- --
on autoApplyUV
  autoUVApply
end autoApplyUV

-- --
on autoUVApply
    --put updateMaterialFromInspector() into UpdateMaterialsCOLORS
    --put getMkey(chosenMaterialsAttributeLine) into nmat
    put ig3d_GetCurrentMaterialNumber__i() into nMat
    ig3d_SetMaterialForSelectedMesh_i nmat
  ApplyUV
end autoUVApply

-- --
on ApplyUV withwhat
 --put updateMaterialFromInspector() into update
  put getTextureofMaterial() into texNam
  put ig3d_GetTexturesList__s() into TList
  if texNam is not among the lines of TList and texNam <> ""  then SendLUAcommand("loadTexture("& quoted(texNam) &")")
  put fld "usize" of card "UVSETTINGS" of stack "Inspector" into usiz
  put fld "vsize" of card "UVSETTINGS" of stack "Inspector" into vsiz
  put fld "uoff" of card "UVSETTINGS" of stack "Inspector" into uof
  put fld "voff" of card "UVSETTINGS" of stack "Inspector" into vof
  put fld "alphaDiffuse" of card "UVSETTINGS" of stack "Inspector" into ADIFFU
  put fld "texturn" of card "UVSETTINGS" of stack "Inspector" into texrot
  put  folderPath() & fld "texture" of card "UVSETTINGS" of stack "Inspector" into fnam
  put hilite of cd btn "fta" of card "UVSETTINGS" of stack "Inspector" into fxplane
  put 0 into nrmx
  put 0 into nrmy
  put 0 into nrmz
  if hilite of cd btn "planemap1" of card "UVSETTINGS" of stack "Inspector" is true then put 1 into nrmx
  if hilite of cd btn "planemap2" of card "UVSETTINGS" of stack "Inspector" is true then put 1 into nrmy
  if hilite of cd btn "planemap3"of card "UVSETTINGS" of stack "Inspector"  is true then put 1 into nrmz
  put nrmx + nrmy + nrmz into nch
  if nch > 2 or the altKey is down then 
    put 1/nch into val
    if nrmx <> 0 then put val into nrmx
     if nrmy <> 0 then  put val into nrmy
     if nrmz <> 0 then  put val into nrmz
  end if
 put (usiz), (vsiz), (uof), (vof), (texrot), (ADIFFU), (fxplane), (nrmx), (nrmy), (nrmz) into UVVALS
 put setMkey(currentUV,UVVALS) into setUV

saveUndoMesh
  ig3d_GenerateAndApplyMeshUVMapping_5fb3f (usiz), (vsiz), (uof), (vof), (texrot), (ADIFFU), (fxplane), (nrmx), (nrmy), (nrmz)
end ApplyUV

###################BONES REDO 04 22 06
-- --
Function BoneForSelection
  put autoBoneTool() into silentSetup
   put getMKey(autoBones) into ParentAndChild
   set itemDel to "|"
   put item 1 of parentAndChild into parent
   put item 2 of parentAndChild into child
  put ig3d_GetMeshCentroid__3f()  into centroid
    ig3d_InvertMeshSelection   -- "Invert Selection"
   ig3d_InvertMeshSelection -- "Hide Selected"
    put autoBoneAction(centroid) into action
   ig3d_MakeBoneFromVertex_2s child,parent
    ig3d_SelectWholeMesh ---Select All
 ig3d_AttachVertexToBone_s child
       ig3d_ShowAll --showall
return ParentAndChild
end BoneForSelection

-- --
Function autoBONEAction where
  set the wholeMatches to true
  put getMkey(autoBones) into parentChild
  put ig3d_GetMeshBonesList__s() into  theBones
    if where is empty then 
    put GLMouseLoc() into XYZ
    else 
    put where into XYZ
    end if
  set itemDel to "|"
  put item 1 of parentChild into Parent
  put item 2 of parentChild into Child
  set itemDel to comma
  replace space with comma in theBones
repeat with k=1 to num(lines of theBones)
  delete last item of line k of thebones
end repeat
replace cr with comma in theBones

put theBones into checkChild
put theBones into checkParent
set itemDel to "_"

put "*" & item 2 of child  & "*"  into filtaChild
put  Parent  into filtaParent
filter checkChild with filtaChild
filter checkParent with filtaParent
  put getMkey(autoBoneMemory) into myMem
        if item 1 of line 1 of myMem is not a number then set the autoBoneMemory of stack (the mainStack of this stack) to xyz
      put getMkey(autoBoneMemory) into myMem
    put ig3d_GetMeshCentroid__3f()  into tNewMesh
       if xyz is not among the lines of myMem then put xyz after myMem
   
if the altKey is down then 
 put "drawVertex(" into theCommand
 else 
 put "drawLine(" into theCommand
 end if
put ig3d_ExecuteLua_s_i(theCommand & XYZ&")") into tpoint
 if  checkParent <> ""  then 
      put ig3d_ExecuteLua_s_i("drawVertex(" & XYZ&")") into quickBone
      put getMkey(selectedBone) into PBone
     ig3d_MakeBoneFromVertex_2s parent,pBone
      set the selectedBone  of stack (the mainStack of this stack) to parent
    else
    set itemDel to "_"
       put last item  of Child into n
 if n is not a number then put 1 into n
  if checkChild <> "" then add 1 to n
     put item 1 of child & "_" & n into Child
put setMkey(autoBones, Parent & "|" & Child) into theParentChild
 put child into field "autoChild" of card "bones" of stack "inspector"
 set the autoBoneMemory of stack (the mainStack of this stack) to myMem
    end if
    --send updateBoneTree to  fld "bonehier" of card "bones" of stack "inspector"
  return parent & "|" & child
end autoBONEAction

-- --
Function AutoBoneTool 
  put ig3d_GetMeshBonesList__s() into  theBones
  put getMkey(autoBones) into parentChild
    set itemDel to "|"
  put item 1 of parentChild into Parent
  put item 2 of parentChild into Child
  put Parent & "*" into filta
 set itemDel to comma
replace return with comma in theBones
replace space with comma in theBones
put  (Child is among the items of theBones) into isChildThere
 if  (Parent is among the items of  theBones)  = false then 
   if  getMkey(userMeshtool) is "autoBone" then
      put ExecuteLuas("drawVertex(" && XYZ&")") into quickBone
      put getMkey(selectedBone) into Parent
      set the selectedBone  of stack (the mainStack of this stack) to parent
    end if
end if
    put Parent & "*" into filta
    filter theBones with filta
    put num(lines of thebones) into howmany
    if fld "autoChild"  of card "bones" of stack "inspector" is empty then put "auto_"&howmany into fld "autoChild" of card "bones" of stack "inspector"
    put  fld "autoParent" of card "bones" of stack "inspector" & "|" &  fld "autoChild" of card "bones" of stack "inspector" into autoBoner
    put setMkey(autoBones,autoBoner) into setAutoBones
  return autoBoner
end AutoBoneTool
-- --
on updateBoneTree n
  set the wholeMatches to true
  set lockScreen to true
  put ig3d_GetMeshBonesList__s()  into theBONESLIST
  if n< 1 or n is empty then 
    put getMkey(selectedBone) into whobone
    put lineOffset(whobone,me) into n
  end if
  put line n of theBONESLIST into LNS
  put word 1 of line 1 of  theBONESLIST into NOON 
  -----sort theBonesList 
  put theBonesList into  fld "theBones"  of card "bones" of stack "inspector"
  put theBonesList into  fld "bone1" of card "bones" of stack "inspector"
  put theBonesList into  fld "bone2" of card "bones" of stack "inspector"
  put ig3d_GetMeshCentroid__3f()  into checkMesh
  repeat forever
    set the treeDepth of fld "boneHier" of card "bones" of stack "inspector" to 1
    put HasSubBones(1) into m
    if m=0 then exit repeat
  end repeat
  repeat with x =1 to num(lines of fld "bone1" of card "bones" of stack "inspector")
    delete  word -1 of line x of   fld "bone1" of card "bones" of stack "inspector"
    delete  word -1 of  line x of  fld "bone2" of card "bones" of stack "inspector"
  end repeat
  unlock screen
  put lineOffset(LNS,fld "boneHier" of card "bones" of stack "inspector") into N
  --if lns > 0 and LNS > lineOffset("bones",fld "boneHier" of card "bones" of stack "inspector") then set the hilitedline of fld "boneHier" of card "bones" of stack "inspector" to N
  set the textStyle of line 1 to -1 of fld "boneHier" of card "bones" of stack "inspector"  to plain
  set the textStyle of line n of fld "boneHier" of card "bones" of stack "inspector"  to bold
  put last word of child into theBone
  set the toolTip of btn "AttachToBone"of card "bones" of stack "inspector"  to "Attach Mesh To Bone:" && theBone
  unlock screen
end updateBoneTree

-- --
Function HasSubBones m
  repeat with n=1 to the number of lines of  fld "theBones" of card "bones" of stack "inspector"
    if word 2 of line n of  fld "theBones" of card "bones" of stack "inspector"= m then 
      put cr after field "boneHier" of card "bones" of stack "inspector"
      repeat (the treeDepth of field "boneHier" of card "bones" of stack "inspector" -1) times
        put tab after field "boneHier" of card "bones" of stack "inspector"

      end repeat
      put " " after field "boneHier" of card "bones" of stack "inspector"
      put word 1 of line n of  fld "theBones" of card "bones" of stack "inspector" after field "boneHier"  of card "bones" of stack "inspector"
      set the treeDepth of field "boneHier" of card "bones" of stack "inspector" to the treeDepth of field "boneHier" of card "bones" of stack "inspector" + 1
      repeat forever
        put HasSubBones(n) into p
        if p=0 then exit repeat
      end repeat
      put 0 into word 2 of line n of  fld "theBones"  of card "bones" of stack "inspector"
      return n
    end if
  end repeat
  set the treeDepth of field "boneHier" of card "bones" of stack "inspector" to the treeDepth of field "boneHier" of card "bones" of stack "inspector"-1
  return 0
end HasSubBones
#############TERRAIN
-- --
on CreateTerrainMesh
   set itemDel to "/" 
  put item 1 to -2 of folderPath() & "/" into prePath
  set itemDel to comma
  put getMkey(terrainData) into tTerrainData
  put  item 1 of tTerrainData into TerrainSize
  put item 2 of tTerrainData into TerrainHeight
put item 3 of tTerrainData into TerrainhDensity
    put 0 into TerrainCompMask
  if item 4 of tTerrainData is true then add 1 to TerrainCompMask
    if item 5 of tTerrainData is true then add 2 to TerrainCompMask
    if item 6 of tTerrainData  is true then add 4 to TerrainCompMask
    if item 7 of tTerrainData is true then add 8 to TerrainCompMask
   put  item -1 of tTerrainData into theTextureName
   set itemDel to "/"
put  item -1 of theTextureName into shortTexture
put char 1 to -4 of shortTexture into texname
set itemDel to comma
  put ig3d_GetTexturesList__s() into tlst
  if (shortTexture is among the lines of tlst) = false then  SendLuaCommand("loadTexture(" && quote & shortTexture & quote&")")
ig3d_PushMeshToUndoCache
  ig3d_SelectWholeMesh ---- "Select All"
  ig3d_MakeInvisible     ---- "Hide Selected"
    --put prePath before theTextureName 
  put theTextureName &cr&TerrainSize &cr&TerrainHeight &cr& TerrainhDensity&cr& TerrainCompMask into TerrainDataListed
      put ig3d_GetMesh_tagsList__s() into oldList
      put num(lines of oldlist)+1 & "_"&texname&"_Terrain" into  newname
   ig3d_CreateMesh_tag_s newName
      put ig3d_GetMesh_tagsList__s() into newList
          put num(lines of oldlist)+1 into NewTagNumber
          put defaultTagNumber(NewTagNumber) into updateTagnumber
  ig3d_CreateMeshFromImage_s2f2i theTextureName,TerrainSize,TerrainHeight,TerrainhDensity,TerrainCompMask --MESH FROM RGBA
  --put T,TerrainSize,TerrainHeight,TerrainhDensity,TerrainCompMask
  exit CreateTerrainMesh
  put TerrainSize * 1.45 into sizo
  put tgridSize into usiz 
  put tgridSize into vsiz 
  put 0  into uof
  put 0  into vof
  put 0  into  texrot
  put "true" into fxplane
  put .1 into nrmx
  put 1 into nrmy
  put .1 into nrmz
  put  (item 1 of UVSIZES) into usone
  put (item 2 of UVSIZES) into ustwo
  put ig3d_GetMatchingUVSizesForMesh_fb3f_2f(texrot,fxplane, nrmx, nrmy, nrmz) into UVSIZES --fb3f rot,fixed,n1,n2,n3
  ig3d_GenerateAndApplyMeshUVMapping_5fb3f usone, ustwo ,uof, vof, texrot, TextureName, fxplane, nrmx, nrmy, nrmz  
  ig3d_SelectConnectedMesh
  ig3d_SelectWholeMesh  ----- "Select All"
   ig3d_AddToMesh_tag_i NewTagNumber
     ig3d_ShowAll  ------- "View All"
end CreateTerrainMesh

######TERRAIN
-- --
on setTerrainComponentMask hilitedColoredButtons
    put 0 into chMask
     if hilitedColoredButtons is empty then put getMkey(terraincomponentMaskHilites) into hilitedColoredButtons
     replace quote with empty in hilitedColordButton
  if item 1 of hilitedColordButton is true then add 1 to chMask
  if item 2 of hilitedColordButton is true then add 2 to chMask
  if item 3 of hilitedColordButton is true then add 4 to chMask
  if item 4 of hilitedColordButton is true then add 8 to chMask
put setMkey(terraincomponentMask,chMask) into setMask   
end setTerrainComponentMask

-- --
on droppedEmitter
  put GlRect() into GLR
   set  itemDel to "/"
  put getMKey(pickedShortFile) into shortedFile
  put setMkey(emitterImport,shortedFile) into EMTSRX
  put getMKey(pickedLongFile) into LongedFile
 put the screenMouseLoc into MSLOC
  put the last item of LongedFile into FNM
  put setMkey(defaultDropName,FNM) into theModelName
  put item 1 of shortedFile into firstFolder
    set itemDel to "."
  put item 1 of FNM into ShortErName
  put char -4 to -1 of FNM into DropEXT
put getMkey(userMeshTool) into theTOOL
   put GLmouseloc() into XYZ
   
set itemDel to comma
  if MSLOC is within GLR  or MSLOC is within the rect of stack "scenegraph" then loadEmitter shortedFile
set the cursor to arrow
end droppedEmitter

-- --
on loadEmitter which
  ig3d_SetMeshTool_i 999
  put setmkey(blockedEvent,update_mesh) into effect
    if which is empty then put getMkey(emitterImport) into checkem
    if which is empty then 
    put filesin("emitters") into thelist
    put  "emitters/" & line 1 of thelist into checkem
    put setMkey(emitterImport,checkem) into effect
  end if
  put glrect() into theGLRECT
    if the screenMouseloc is within theGLRect then  put glmouseloc() into EmitterPosition
    else   put  getmkey(GLMouseUp) into EmitterPosition
  put ig3d_GetParticle_emittersList__s() into PARLIST
  put which into checkem
  if checkem contains "/" is false then put "emitters/" & checkem into checkem
  if char -4 to -1 of checkem <> ".emt" then put ".emt" after checkem
    set itemDel to "/"
    put item -1 of checkem into Enam
      set itemDel to "."
      put item 1 of enam into enam
      put ig3d_GetParticle_emittersList__s() into parlist
       put num(lines of PARLIST) into n
    filter PARLIST with  char 1 to -2 of enam & "*"
     if num(lines of parlist) = 0 then put 1 into n
     put n+1 after of enam
     put "gParticleEmitters["&n&"]=make(ig3d_particle_emitter," & quoted(enam)&"," & quoted(checkem) & ")" into luaParticleMake
   put ig3d_ExecuteLua_s_i(luaParticleMake) into action
    put "setParticle_emitterInfo(get(ig3d_particle_emitter, " & quote & enam & quote & "), IG3D_POSITION," &  EmitterPosition & ")" into loadParticleToLocation
     put ig3d_ExecuteLua_s_i(loadParticleToLocation) into action

  --put cr & ig3d_GetParticle_emitterInfo_s_s(enam) & cr after action
put chooseATool("particles") into pooltick
end loadEmitter
#####ARROW KEY MULTIPLIER

-- --
Function arrowSensitivity
  put getMkey(editingMode) into EM
  put colt() into selColS
  put item 1 of selCols into RP
  put "background,grid,tint,ambient,diffuse,specular,direction,exponent,attenuation,alpha" into theCOLORSEffects
put "red,green,blue,r,g,b" into thecolors
  if RP is among the items of  theCOLORSEffects or colt(2) is among the items of theColors then
    if the shiftKey is down then return .5
    return .1
  end if
  if the shiftkey is down then return 3
 return 1
end arrowSensitivity
-- --
Function allCprops n
  put the customKeys of stack (the mainStack of this stack) into cpout
  if n is not "" then filter cpout with "*" & n & "*"
  return cpout 
end allCprops
####################################################################################
####### SCENE GRAPH GetCol FIELD TEXT FUNCTIONS MOVED TO MAIN STACK 01 11 07 -- BILL
####################################################################################
-- --
Function getCol1Text rootPick
put getMkey(editingMode) into EM

if em is among the items of "cone,cylinder,cube,sphere,plane,quad,triangles,dropmesh" then 
put num(items of ToolUnits(em,"Root")) into N
return item 1 to n of ToolUnits(em)
end if 

if rootPick is empty then put theRootPick() into rootPick
if em is "path" or  em is "pathSelect" then 
  put ig3dList("paths") into pathlist
  put lineOffset(rootPick,pathlist) into Npath
 put ig3d_GetPathInfo_i_s(Npath) into pathPoints
 repeat with l= 1 to num(lines of pathPoints)
   put l & cr after alist
 end repeat
delete char -1 of alist
return alist
end if
 if rootPick is "visibility" then return visibleElements()
if em is "camera"  then  return sceneGraphCameraData(rootPick)
 if rootpick is "Materials" then return ig3dList("materials")
 if rootPick is among the items of "materials,paths,particles,mesh_tags,bones,sounds,groups" then return ig3dLIst(rootPick)
 if rootPick is in "background,grid,tint" then return parseStateColors(rootPick)
 if rootPick is "fog" then return "show,red,green,blue,start,end"
 if rootPick is in "position,rotation" and EM is "camera" then return sceneGraphCameraData()
 if EM is "snapshot" then return snapShotSettings()
 if EM is "level" then return levelRootPick(rootPick)
if em is "object" or em is "objects" then return objectsRootPick()
if em is "particles" then  return particlesRootPick()
if em is "light" or em is "lights"  or rootPick is "lights" then
   return "on/off,position,type,ambient,diffuse,specular,direction,cutoff,exponent,attenuation"  
end if

if em   is "Terrain" then
   put getmkey(terrainData) into tterrainData
   if tterrainData is empty then put "10,2,16,false,false,false,true,images/default.png" into tterrainData
   set the terrainData of stack (the mainStack of this stack) to tterrainData
   put item -1 of tTerrainData into ttexture
   put item 1 to -2 of tTerrainData into ogTdata
 set itemDel to "/"
      repeat for each item z in ttexture
        put " " after mysp
        put z & cr & mysp   after myLnes
      end repeat
     put ogTdata& comma & mylnes into tterrainData
return tterrainData
end if

if em is "select_mesh"  then return sceneGraphMeshData(rootPick)
set itemDel to comma

return "getCol1Text"
end getCol1Text

-- --
Function getCol2Text rootPick,col1pick
  put coln("col1") into coln
  put getMkey(editingMode) into EM
  if rootPick is empty then put theRootPick() into rootPick
  if col1Pick is empty then put colt("col1") into col1pick
  if em is "select_mesh"  then 
   if  rootPick is "Materials" then return meshMaterialAttributes()
   if rootpick is "mesh_tags" then return "select,set,unset"
     if rootpick is "scale" then return "x:100,y:100,z:100"
  if col1pick is not empty then return sceneGraphMeshData(rootPick,col1pick)
end if

if EM & rootpick is "levelState" then return levelRootPick(rootpick,col1pick) 
  if em is "lights" or em is "light" then return  sceneGraphLightData(rootpick,col1pick)
  if rootPick is  "terrain" then return   getMkey(terrainSettings) 
if em is "object" or em is "objects" then return objectsRootPick(rootPick,col1pick)
  if rootPick is "visibility" then return visibleElements("bool")
  if rootPick is "fog" then return parseStateCOLORS("fog")

  if em is "snapShot" then return "save,,,,,"& FieldArrowHtml("close")
 
if em is "particles" then return particlesRootPick(rootpick,coln,col1pick)
if em is "Terrain" then return "create"
 if em is among the items of "path,pathSelect" then 
  put ig3dList("paths") into pathlist
  put lineOffset(rootPick,pathlist) into Npath
 put ig3d_GetPathInfo_i_s(Npath) into pathPoints
 if col1pick is not a number then put 1 into col1pick
 put line col1pick of pathpoints into pxyz
 if pxyz is empty or num(items of pxyz) < 3 then return "--,--,--,--"
 repeat with h =1 to 3
   put item h of "x,y,z" & ":" before item h of pxyz
 end repeat
  return pxyz
 end if
 if em is among the items of "quad,cube,cylinder,cone,sphere,dropmesh" then return LowRandToolUnits(em)
  return "--,--,--,--"
end getCol2Text

-- --
Function getCol3Text rootPick,Col1Text,col2text
   put coln("root") into rootN
  if rootPick is empty then put theRootPick() into rootPick
put coln("col1")into col1PickN
  if col1text is empty then put colt("col1") into co1ltext
   put coln("col2")into col2PickN
  if col2text is empty then put colt("col2")   into co12text
  put getmkey(editingmode) into em
if  em & rootPick is "select_meshmaterials" then return MaterialsCol2FieldClick(col2PickN,co12text)
if em is among the items of "cone,cylinder,sphere,quad,cube" then
 
  put ig3dList("mesh_tags") into TList
  filter tList with em & "_*"
  return tlist
end if
if em is "particles" then return "start,stop,all start,all stop"
if EM & rootpick is "levelState" then return levelRootPick(rootpick,Col1Text,col2text) 
if em is "dropMesh" then return getMkey(dropMeshTag)
--     put getmkey(pickedshortfile) into tfile
--       set itemDel to "/"
--       put item -1 of tfile into tnam
--       set itemDel to "."
--       if item -1 of tnam is in "WTF obj 3ds mesh lwo" then return ( item 1 of tnam) 
--end if
if em is "objects" and col1text is "materials" and col2text is not empty then return objectsRootPick(rootpick,col1text,col2text)
return "--,--,--,--"
end getCol3Text

-- --
Function MateriaslCol3Text rp,col1,col2
  put ig3d_GetCurrentMaterialNumber__i() into MatN
  put ig3d_GetMeshMaterialInfo_i_s(MatN) into MatData
  put line 3 to -1 of matData into MatCheck
 put lineOffset(col2,matCheck) into N
 ##put l
   switch col2text
      case "texture"
        break
    end switch
    put "MateriaslCol3Text" into col3
return (rp,col1,col2,col3)
end MateriaslCol3Text
-- --
Function objectsRootPick rootPick,col1pick,col2pick
  put the ruggedPath of stack "SceneGraph" into lpath
  if col1Pick is empty then put colt("col1") into col1pick -- the hilitedText of fld "Col1" of lpath into col1pick
  put  "position,rotation,scale,materials,idle" into attributes
  put ig3dList("objects") into objectsList
  if rootPick is empty then return attributes
  if objectsList is empty then return "(no objects)"
  put ig3d_GetSelection__s() into CurrentSelection
  put ig3d_GetObjectInfo_s_s(rootPick) into Ob
  if num(lines of ob)>2 then
    put lineOffset(line 1 of ob,objectsList) into modelNum
    set the hilitedLine of fld "root" of lpath to modelNum
    if col1Pick is among the items of Attributes then 
      put line itemOffset(col1Pick,Attributes)+1 of Ob into dataout
      if col1pick is not among the items of "Materials,idle" then
        repeat with h = 1 to 3
          put item h of "x,y,z" & ":" before item h of dataout
        end repeat
      end if
      if col1pick is "materials" then 
        if col2pick is empty then
          put ig3d_GetObjectMaterialsList_s_s(rootpick) into dataout
        else
          put coln("col2") into matnum
          put ig3d_GetObjectMaterialInfo_si_s(rootpick,matnum) into dataout
        end if
      end if
      return dataout
    end if
  end if
end objectsRootPick

-- --
on SceneGraphSelectEntity evData   
  if word 1 of evData is "particles" then particleRootPick
end SceneGraphSelectEntity

### only called from outside through the SceneGraphSelectEntity handler
-- --
on particleRootPick
  lock  screen
  get ig3dList("particles")
  if it = "" then get "(no particles)"
  put it into fld "col1" of lpath  --stack "sceneGraph"
  put getMkey("pickedEmitter") into pickparticle
  put ig3d_GetSelection__s() into sel
  filter sel with "particle*"
  if sel <> "" then 
    put lineOffset("particles",sel) into selN 
    put word 2 of line selN of sel into pemitter
    put lineOffset(pemitter,fld "col1" of stack "sceneGraph") into pickparticle
  end if
  put getMkey("pickedEmitter") into pickEMIT
  if pickParticle <> 0 then 
    set the hilitedLine of fld "col1" of stack "sceneGraph" to pickparticle
    put setMkey("pickedEmitter",pickParticle) into setit
  end if 
  if the shiftKey is down is false then put chooseAtool("particle") into toolPic
end particleRootPick

-- --
Function particlesRootPick rootpick,coln,colt
  if rootpick is empty then put therootpick() into rootpick
put ig3d_GetParticle_emitterInfo_s_s(rootpick) into EmitterData
put "name=" before line 1 of emitterData
put "file=" before line 2 of emitterData
put "position=" before line 3 of emitterData
put "rotation=" before line 4 of emitterData
set itemDel to "="
repeat for each line EL in emitterData
  put item 1 of EL & cr after EmitterVariables
  put item 2 of EL & cr after EmitterValues
end repeat
put line lineOffset(colt,emitterVariables) of EmitterValues into pickedVal
replace "/" with cr & space in pickedVal
if coln is not empty then return pickedVal
return emitterVariables 
end particlesRootPick

 on inputToEmittersFromf1  myLine,WhatLine
    put therootpick() into rootpick
    put coln("col2") into whatData
put ig3d_GetParticle_emitterInfo_s_s(rootpick) into EmitterData
if whatLine is 2 then put "Data/emitters/" & myline & ".emt" into line 2 of emitterdata
if whatLine is among the items of "3,4" then  put myline into item whatData of line whatLine of EmitterData
put lineOffset("texture=",emitterData) into Tline
if whatLine is tline then put "Data/emitters/" & myline & ".emt" into line whatLine of emitterdata
put lineOffset("model=",emitterData) into Mline
if whatLine is mline then put "Data/WTF/"& myline & ".wtf" into line whatLine  of emitterData
if whatLine > 5 then
  set itemDel to "="
put item 1 of line WhatLine of emitterData & "=" & myLine into line whatLine of EmitterData
end if
ig3d_SetParticle_emitterInfo_2s rootpick,emitterdata

end inputToEmittersFromf1
####################################################################################
####### SCENE GRAPH GetCol FIELD TEXT FUNCTIONS MOVED TO MAIN STACK 01 11 07 -- BILL
####################################################################################

#############################
DEV BUTTON MOVED INTO MAIN STACK
#################################
--The following menuPick handler was generated by the Menu Builder.
-- --
on DevMenuPick pWhich
   set the lastDevMenuPick of stack (the mainStack of this stack) to pWhich
   
   put lineOffset("frontScript",me) into F
   set itemDel to "/"
   put item 1 of pWhich into realItems
   
   switch realItems
      case "edit F1"
         edit script of field "f1"
         break
      case "edit SGScript"
         edit script of stack "scenegraph" 
         break
      case "editRLScript"
         edit script of group "RootLeft" of stack "scenegraph"
         break
      case "Lua"
         open stack "luastack"
         break
      case "Translator"
         send "DoScriptTranslationFileToFile" to stack "Translator"
         break
      case "pointer tool"
         pointerAction
         break
      case "stopIdle"
         lock messages 
         
         put the script of card "User" into U
         if char 1 of line 1 of U is "o" then put "--on Idle" into line 1 of U
         set the script of card "User" to U
         put lineOffset(stopIdle, the text of me) into n
         put "startIdle" into line n of me
         break
      case "startIdle"
         lock messages
         put the script of card "User" into U
         if char 1 of line 1 of U is "-" then put "on Idle" into line 1 of U
         set the script of card "User" to U
         put lineOffset(startIdle, the text of me) into n
         put "stopIdle" into line n of me
         
         break
      case "FindT3D"
         put stackList() into SL
         put folderPath() into rem
         put rem & "Find T3D.rev" into inRoot
         if "Find T3D.rev" is among the lines of files() then 
            go stack inRoot
         else
            put the long name of stack "home" into where
            replace ("stack " ) with empty in where
            replace quote with empty in where
            set itemDel to "/"
            put item 1 to -2 of where  &"/plugins/" into Where
            set the folder to where
            if "Find T3D.rev" is among the lines of files() then go stack (where&"Find T3D.rev")
         end if
         if "Find T3D" is among the lines of the windows is false then open stack "Find T3D"
         set the folder to REM
         break
         
      case "frontScript"
      case " frontScript"
         put getMkey(allowFronts) into checkF
         if checkF is "true" then
            put manageFScript(false) into turnOffFrontScript
            put "frontScript" into line F of button "Dev_2"
         else
            put manageFScript(true) into turnOnFrontScript
            put "!c frontScript" into line F of button "Dev_2"
         end if
         break
         
      case "List Images" 
         send ListStackImages to stack "dev"
         checkDev
         break
      case "Idle Info"
         if the commandKey is down then set the style of stack "dev" to topLevel
         else set the style of stack "dev" to palette
         open stack "dev"
         break
      case "OpenStacks"
         send Liststacks to stack "dev"
         checkDev
         break
      case "Document Manager"
         if the commandKey is down then set style of stack "documentmanager" to topLevel
         else set style of stack "documentManager" to palette
         open stack "documentmanager"
         break
      case "CustomPropLengths"
         send customPropLengthCheck to stack "Dev"
         checkDev
         break
         
      case "Xternals"
         send listXternals to stack "Dev"
         checkDev
         break
      case "RevFunctions"
         send ListRevFunc to stack "Dev"
         checkDev
         break
      case "Reset"
         resetiGame3D
         break
      case "DisableDev"
         devil begone
         break
      case "Edit Dev Menu Script"
         edit the script of me
         break
      case "Modify Dev Menu"
         send ListDevMenu to stack "Dev"
         if the environment is "development" then
            edit script of stack "Dev"
            send ListDevMenu to stack "Dev"
            choose pointer tool
            select btn "Dev" of group "igame3dMenu1" of stack (the mainStack of this stack)
            select btn "Dev" of group "igame3dMenu1" of stack (the mainStack of this stack)
            open stack "revPropertyPalette 1"
            set the rect of field "theMenu" of stack "dev" to the rect of fld "theList" of stack "dev"
         end if
         checkDev
         break
      case "bigMainStack"
         lock screen
         --set the windowShape of stack (the mainStack of this stack) to 0
         put windowBound() into cRec
         set itemDel to comma
         put item 2 of crec + 640 into item 4 of crec
         ##Put crec
         put the windows into tlist
         filter tlist without "*"&( the short name of stack (the mainStack of this stack)) &"*"
         
         put item 4 of crec + 20 into TTOPS
         repeat for each line ST in tList
            set the top of stack ST to tTOPS
         end repeat
         --put the bottom of group "ICONS"+top of group "ICONS" into item 4 of cRec
         set the rect of stack (the mainStack of this stack) to  cRec 
         put setMkey(rectMode,"big") into setBigRectMode
         break
      case "StackScript"
         edit the script of this stack
         pointerAction
         break
      case "littleMainStack"
      case "littleMainStack "
         lock screen
         set the windowShape of stack (the mainStack of this stack) to 0 --4614
         put windowBound() into cRec
         --put the top of stack (the mainStack of this stack)+the top of group "ICONS" of stack (the mainStack of this stack) into item 4 of cRec
         set the rect of stack (the mainStack of this stack) to  cRec 
         put setMkey(rectMode,"little") into setlittleRectMode
         break
      case "scriptHarvester"
         put stackList() into mList
         filter mList with "scriptHarvester*"
         if mList is not empty then 
            put the bottom of stack "Scenegraph" into B
            put the Left of stack "SceneGraph" into R
            put the width of stack "SceneGraph" into X
            put the height of stack "SceneGraph" into Y
            repeat for each line H in mList
               palette stack h
               
               set the width of stack H to X
               set the Height of stack H to Y
               set the top of stack H to B
               set the left of stack H to R
               put the right stack H into R
            end repeat
         end if
         break
         
      case "Modify Inspector Root"
         
         break
      case "resetiGame3D"
         choose pointer tool
         resetiGame3D
         break
      case "Save"
         save stack (the mainStack of this stack)
         break
      case "resetiGame3D"
         resetiGame3D
         break
      case "harvest"
         
         harvest
         break
      case "BackUp"
         answer "this may take a few minutes" with "cancel" and "OK"
         if it is "OK" then
            --answer "disabled see script"
            put Backup()
            put allFunctions(w)
            put allHandlers(w)
         end if
         break
   end switch
end DevMenuPick

-- --
on checkDev
  if the commandKey is down then set style of stack "Dev" to topLevel
  else set style of stack "Dev" to palette
  set the cantModify of stack "Dev" to false
  if "Dev" is in the windows is false then open stack "Dev"
  if  "DevMenu" is in the title of stack "Dev"   then show field "theMenu" of stack "Dev"
  else hide field "theMenu" of stack "Dev"
end checkDev

-- --
on harvest
  palette stack "scriptharvesterig3d"
  send collectthescripts to card id 1002  of stack "ScriptHarvesterig3d"
end harvest

-- --
on helpmenupick phelp
  switch phelp
    
  end switch
  open stack "ExternalReference"
end helpmenupick

#################### BACKUP SCRIPTS ADDED BACK IN APRIL 10 2007
-- --
Function getBackUpPath whatstack whatAction
   --put the short date into tshortDate
   --replace "/" with empty in tshortDate
   put the short name of stack (the mainStack of this stack) into shortStackName
   put   shortStackName & "_" &   tshortDate into   sDefaultBackupFolder
   put   shortStackName into sDefaultBackupFolder
   put folderPath(sDefaultBackupFolder)   into gDefaultBackupFolder
   set the defaultBackupPath of stack(the mainStack of this stack) to gDefaultBackupFolder
   if whatStack is empty then return gDefaultBackupFolder
   put sDefaultBackupFolder & "/" &  whatstack &"/"&whatstack&"_" & whatAction  into tFolder
   put folderpath(tFolder)  into theBackUpPath
   set the defaultBackupPath of stack(the mainStack of this stack) to theBackUpPath
   return theBackUpPath
end getBackUpPath

-- --
Function Backup
   put the seconds into secx
   set the scriptLineCount  of stack (the mainStack of this stack) to 0
   set the scriptBackUpPathList of stack (the mainStack of this stack) to empty
   set the cursor to busy
   put "0" into  TOTALSCRLINES
   put stackList() into allStacks
   filter allStacks without empty
   put "file:/" into fURL
   set itemDel to "/"
   put getBackupPath() into theBackUpPath
   put num(items of theBackUpPath) into GBU
   put AllFunctions("w") into FunctionsToFile 
   set the cursor to clock
   put allHandlers("w")  into HandlersTofile
   set the cursor to busy
   repeat with s =1 to num(lines of allStacks)
      put line s of allStacks into whatStack
      put  getbackupPath(whatStack)&whatStack&"/" into theBackupPathOftheStack
      put fUrl&  theBackUpPath & whatStack &"_index_all.txt" into allPathsOutURL
      set the cursor to busy
      put fUrl&  theBackupPathOftheStack   into htmlOut
      
      put fUrl&  theBackupPathOftheStack & whatStack & "_ScriptsList.txt" into listScriptsOutURL
      put fUrl&  theBackupPathOftheStack & whatStack & "_cPropsList.txt" into allCPropsOutURL
      put fUrl&  theBackupPathOftheStack &  whatStack & "_Properties/_PropsList.txt" into allPropsOutURL
      put fUrl&  theBackupPathOftheStack &"ALLFILES_EXPORTList.txt" into allFILESOutURL
      
      --- LOGGING THE SAVE probably doesn't work 09/11/2021
      set the cursor to clock
      put DetailedStackInfo(whatstack) & cr into DSI
      put DSI  after URL allPropsOutURL -- doesn't work 09/11/2021
      set the cursor to busy
      put stackPropsBackup(whatstack) & cr into SPB  
      put SPB after URL allCPropsOutURL -- doesn't work 09/11/2021
      set the cursor to clock
      put scriptsBackup(whatstack) & cr into SBU
      put SBU after  URL listScriptsOutURL -- doesn't work 09/11/2021
      set the cursor to busy
      put DSI & SPB & SBU  after ARCHIVEstack  
      put saveDataToFile(allPropsOutURL,DSI) into tDone
   end repeat
    put ARCHIVEstack after URL  allPathsOutURL -- doesn't work 09/11/2021
   put saveDataToFile(allPathsOutURL,ARCHIVEstack) into tDone
   put getMkey(scriptBackUpPathList) & cr & ARCHIVEstack into allFiles
   put allFiles into url  allFILESOutURL
   set the cursor to clock
   filter allFiles without "*"&cr&cr&"*"
   --set the scriptBackUpPathList of stack (the mainStack of this stack) to ARCHIVEstack
   set the cursor to busy
   put CollectFromArchiveIndex() into allPathsOutURL
   set the cursor to hand
   put the seconds - secx into TimeTaken
   return      TimeTaken && "seconds"
end Backup
-- --

-- -- 
-- --
Function CollectFromArchiveIndex AllEXportOutURL
  put getMkey(scriptBackUpPathList) into AllFiles
  return allfiles
--put allFiles
--return AllFiles
  sort AllFiles

     put  getbackupPath() into tDBP
      put "file:/" & folderPath(tDBP & "_AllFiles") into AllEXportOutURL
     put "file:/" & folderPath(tDBP & "_AllProps") into AllPropsOutURL
     put "file:/" & folderPath(tDBP) &"_All_ExPort_index.txt" into AllIndexEXPORTOutURL
  put 1 into lnc
  set itemDel to "/"
  put allfiles into AllProps
  filter allProps with "*_prop*"
  filter allFiles without "*_prop*"
  sort allFiles
  put  URL ("file:/" & folderPath("Data/templates/") & "htmlindextemplate.txt") into indexTemp
put  URL ("file:/" & folderPath("Data/templates/")& "htmlssbktemplate.txt")  into SSBKTEMP
   put  URL ("file:/" & folderPath("Data/templates/") &"htmlframetemplate.txt")  into frameTemp

replace "ssbkPageHead" with (the short name of stack (the mainStack of this stack)) in indexTemp
replace "ssbkDate" with (the long date) in indexTemp 
  repeat for each line X in allFiles
    set  itemDel to "/"
    if "file:" is in item 1 of x then 
    if x is not among the lines of theAllXlist  then
      put url x into theFile
      if num(lines of theFile) < 3 then next repeat 
      put -num(chars of lnc) into cnm
      put "0000" into nprefx
      put char 1 to cnm-1 of nprefx & lnc into tIndexVal
      put item -1 of x into TheFileName
      put AllEXportOutURL & TIndexVal &"_"&TheFileName  into FileOut
      replace space with "_" in FileOut
      put theFile into url FileOut
      put fileOut & cr after allFilesOut
      add 1 to lnc
      put x & cr after theAllXlist
      put "<li><a href='" & TheFileName & "' TARGET=SSBKFRAME>"& char 1 to -5 of TheFileName&"</a><br>" & cr after theIndexText
    end if
    end if
  end repeat
  put 1 into lnc
  sort appProps
    repeat for each line X in AllProps
    if "file:" is in item 1 of x and   x is not among the lines of theAllPList  then
      put url x into theFile
      put -num(chars of lnc) into cnm
      put "0000" into nprefx
      put char 1 to cnm of nprefx & lnc into tIndexVal
      put item -1 of x into TheFileName
--      replace "." with cr & "." in theFileName
--      filter theFileName without "*.*"
      put AllPropsOutURL & TheFileName  into FileOut
      put theFile into url FileOut
      put fileOut & cr after allFilesOut
      add 1 to lnc
      put x & cr after theAllplist
       put "<li><a href='" & TheFileName & "' TARGET=SSBKFRAME>"&char 1 to -5 of TheFileName&"</a><br>" & cr after thePIndexText
    end if
  end repeat
  
put line 1 to lineOffset("<ol>",indexTemp) of indextemp & cr & thePIndexText &  "</font>"& cr &"</body>"& cr & "</html>" into theINdexOut
put theIndexOut into url (AllEXportOutURL &"listed.html")

put frameTemp into iFrameT
replace "ssbktemplate.html" with item -1 of line 1 of allFilesOut in iFrameT
put iFrameT into url (AllEXportOutURL &"index.html")

 

put theIndexText into URL AllIndexEXPORTOutURL
return iFramet
  return allFilesOut
end CollectFromArchiveIndex

-- --
Function removeExtraCRs whatText
  replace (cr & cr & cr & cr) with (cr) in whatText
  replace (cr & cr & cr) with (cr) in whatText
  return whatText
end removeExtraCRs

-- --
Function enSureCommentLines someText
  put removeExtraCrs(sometext) into ttx
  replace cr & "on " with cr  & "-- --" & cr & "on " in ttx
  replace cr & "function " with (cr & "-- --" & cr & "Function ") in ttx
  replace "-- --" & cr & "-- --" with "-- --" in ttx
  return ttx
end enSureCommentLines
 
-- ig3d_UI_MAIN_may2007_5607/ig3d_UI_MAIN_may2007/ig3d_UI_MAIN_may2007_Functions/isPropBad(theProp).txt
-- --
Function isPropBad theProp
  if theProp is among the items of globalNames() then return true
  if theProp is among the lines of the commandNames then return true
  if theProp is among the lines of the propertyNames then return true
  if theProp is among the lines of the functionNames then return true
  if theProp is among the lines of the constantNames then return true
  if theProp is "scriptLineCount" then return true
  
  if theProp is "" or theProp is "Sound" then return true
  if theProp is a number then return true 
  if  number of chars of theProp < 2 then return true
  if theProp is " " then return true 
  if theProp is cr then return true 
  if theProp is "empty" then return true 
  put "a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z" into ALPHABET
  if char 1 of theProp is not among the items of ALPHABET then return true
  if theProp contains "/" then return true
  if theProp contains "-" then return true
  if theProp is "player" then return true
  if number of words of theProp > 1 then return true
  return false
end isPropbad
-- --
  
-- --
Function saveDataToFile tpath, tdata 
   open file tpath for write  -- creates a file for LiveCode to write to
   --put field "Rotten Wood" into myText  -- places the text from the field "Rotten Wood" into a local variable
   write tData to file tpath  -- writes the text placed in the local variable into the open text file we created
   close file tPath  -- closes/saves the text file containing the text form the field/local variable into a text file on the desktop
return "done"
end saveDataToFile 
-- --
Function scriptsBackup whatstack
   set itemDel to "/"
   set the scriptBackUpPathList of this stack to empty
   if whatStack is empty then put the short name of stack (the mainStack of this stack) into whatStack 
   put "file:" into fURL
   put 1 into totalClean
   put 1 into totalOG
   put  getbackupPath()into DBP
   put getBackupPath(whatStack,"Scripts") into tPath
   --put "Data/" into TPath
   -- put fURL & 
   put tPath &  whatStack & "_script.txt" into whatstackScrpFile
   --replace "/" with "\" in whatstackScrpFile
   put removeExtraCRs(the script of stack whatStack) into preScriptText
   
   put enSureCommentLines(preScriptText) into theStacksScriptText
   write  "[ig3d]" &&"scriptsBackup" && whatstack & cr to stderr
   put getMkey(scriptBackUpPathList) into allExportedPaths
   --if whatstack is not the short name of stack (the mainStack of this stack) then set the script of stack whatStack to theStacksScriptText
   
   
   if num(lines of theStacksScriptText) > 2 then
      --put theStacksScriptText into uRL whatstackScrpFile -- doesnt work 09/11/2021
      put "-- script of stack" && quote & whatstack & quote &cr before theStacksScriptText
      put saveDataToFile(whatstackscrpfile,theStacksScriptText) into tDone
      put whatstackScrpFile & cr after allExportedPaths
   end if
   
   
   
   ------End stack Scripts	  f
   ------ARCHIVE CardScripts	
   repeat with z = 1 to the number of cards of stack whatstack
      write  "[ig3d]" &&tab & tab & "card" &&  the short name of card z of stack whatstack && "of stack" && whatstack & cr to stderr 
      put the short name of card z of stack whatstack into tscn
      put fixForFileNames(tscn) into shortCardName
      put the name of card z of stack whatStack into tCrdn
      put fixforfilenames(tCrdn) into fCardName
      put tpath & fixforfilenames(whatstack)&"_cards/" &  shortCardName   into CFP
      put folderPath(CFP) into thecardF
      -- put fURL & 
      put  thecardF & fCardName & "_script.txt" into CardScriptFilePath
      put "-" & "-" &"-" &&  tscn &"," & short name of stack whatstack & cr  into commentHeader
      
      if num(lines of theCardSC) > 1 then 
         
         put num(items of theCardF) into RCN
         put the script of card z of stack whatstack into preCardSC
         put removeExtraCRs(preCardSC) into preCardSC
         put enSureCommentLines(preCardSC) into theCardSC
         put commentHeader before theCardsc
         if num(lines of theCardSC) > 2 then 
            put theCardSC into URL CardScriptFilePath -- doesn't work 09/11/20201
            put cardscriptfilepath & cr after AllExportedPaths
            put saveDataToFile(cardscriptfilepath,CardScriptFilePath) into tDone
            
         end if
      end if
      ------End Card Scripts
      	 
      ------ARCHIVE ControlSCRIpts	
      repeat with x = 1 to the number of controls of card z of stack whatstack
         put the short name of control x of card z of stack whatstack into tsn
         put fixForFileNames(tsn) into shortControlName
         
         set the name of control x of card z of stack whatstack to shortControlName
         put the name of control x of card z stack whatstack into fullControlName
         put the long name of control  x of card z stack whatstack into theLongerone
         put fullControlName & cr after taallControls
         put the script of control x of card z of stack whatstack into preConSC
         put removeExtraCRs(preConSC) into preConSC
         put enSureCommentLines(preConSC) into thecontrolsScript
         put "-" & "-" &"-" && the  name of control x of card z of stack whatstack &","& the short name of card z of stack whatstack &"," & short name of stack whatstack & cr  into commentHeader
         
         put  thecardF &word 1 of fullControlName &"/" into theControlFolder
         replace "/"&"/" with "/" in theControlFolder
         put num(items of theControlFolder) into RCN
         -- put  fURL & 
         put folderPath(theControlFolder) into ControlsoutPutPath
         put ControlsoutPutPath & word 1 of fullControlName  &"_"&shortControlName &"_script.txt" into CScriptFilePath
         
         if num(lines of thecontrolsScript) <> 0 then
            
            put  commentHeader before thecontrolsScript
            --put thecontrolsScript into URL CScriptFilePath  -- doesn't work 9/11/202
            put saveDataToFile(CScriptFilePath,thecontrolsScript) into tDone
            put cr& CScriptFilePath & cr after AllExportedPaths
         end if
         ------End COntrol Scripts
         
         ---ARCHIVE CONTROL FIELD TEXT ARCHIVE
         if word 1 of the name of control x of card z of stack whatStack is "field" then 
            put  char 1 to -1 of control x of  card z of stack  whatstack into someTEX
            if num(chars of someTEX) <> 0 then 
               put  ControlsoutPutPath & word 1 of fullControlName  &"_"& shortControlName & "_text.txt" into theTextF
               put "-" & "-" & "-" && theLongerone & cr before someTex
               -- put someTex into URL theTextF -- doesn't work 9/11/202
               put saveDataToFile(theTextF,someTex) into tDone
               put   theTextF & cr after AllExportedPaths
            end if
         end if
         ---- end CONTROL FIELD TEXT ARCHIVE
         
         ------- ARCHIVE CONTROL PROPERTIES
         set itemDel to comma
         put word 1 of the name of control x of card z of stack whatstack into objtyp
         put the long name of control x of card z of stack whatstack into theLongName
         put fixforfilenames(the short name of card z of stack whatstack) into tShortName
         put getBackupPath(whatStack,"_UI") into uPath
         put uPath & fixforfilenames(whatstack)&"_cards/" &  shortCardName  &"/" & objtyp  into UCFP
         put folderPath(UCFP) into UIFolder
         replace "/"&"/" with "/"  in UIFolder
         put fixforfilenames(shortControlName) into CPropFileName
         replace cr empty in CPropFileName
         
         put fURL & folderPath(UIFOLDER) & objtyp & "_" & CPropFileName &".txt"  into CPropFilePath
         replace space with "_" in  CPropFilePath
         put ObjectPropertiesList(objtyp) into PropsList
         put commentHeader into cPropData
         repeat for each item tProp in propsList
            
            put "the" && tPRop && "of" && "control x of card z of stack whatstack into controlPropValue" into GetPropz
            do "put" && getPropz 
            if controlPropValue is not empty then 
               if controlPropValue is not "true" and controlPropValue is not "false" then
                  if char 1 of  controlPropValue is not a number then 
                     if char 2 of controlPropValue is not a number then
                        put quote & controlPropValue & quote into controlPropValue
                     end if
                  end if
               end if
               put CPropFileName & ":"& tProp &"("& controlPropValue & ")" & cr after cPropData
            end if
         end repeat
         
         put cPropData into URL CPropFilePath  -- doesn't work 09/11/2021
         
         --put   fURL  &
         put tPath &  whatStack & "/" & whatstack & "_objectList.txt" into tlistF
         put cr & CPropFilePath after  url tlistF
         put cr & cpropFilePath & cr & tlistF & cr after AllExportedPaths
         set itemDel to "/"
         ------- end CONTROL PROPERTIES
         ------ARCHIVE KEYS
         put the customKeys of control x of card z  of stack whatstack into CPRO
         filter cPro without empty
         sort CPRO
         if CPRO <> "" then 
            repeat with CO = num(lines of CPRO)  down to 1
               put line CO of CPRO into THEK
               if thek is cr then next repeat
               if isPropBad(THEK) is true then
                  delete line CO of CPRO
                  write  "[ig3d]" &&theL &"of"  && the name of card z of stack whatstack &&"of" && the name of stack whatstack && "BAD  PROP" & cr to stderr
                  put   ("the customKeys" && "of" && fullControlName && "of" && the name of card z of stack whatstack &&"of" && the name of stack whatstack && "to CPRO"  )  into doDE
                  do "set" && doDE
                  next repeat
               end if
            end repeat
            put the customKeys of control x of card z  of stack whatstack into CPRO
            if num(lines of cpro) > 0 then
               repeat for each line Ckeyz in CPRO
                  put "the" && cKeyz && "of" && fullControlName && "of" && the name of card z of stack whatstack &&"of" && the name of stack whatstack &&  "into OutProp" into getCkeyz
                  do "put" && getCkeyz
                  if num(chars of outProp) > 0 then 
                     put fURL & folderPath(theControlFolder&word 1 of fullControlName&"_CProps")  &"_"&cKeyz &"_cp.txt" into CCpropFilePath
                     replace space with "_" in CCpropfilepath
                     replace quote with "_" in CCpropfilepath
                     if controlPropValue is not "" then 
                        if outProp is not "true" and outprop is not "false" and outprop is not a number then put quote & outProp & quote into outprop
                        if num(lines of outProp) >1 then put "[[" &outProp & "]]" into outProp
                        put cr& CPropFileName & ":"&cKeyz &"("& outProp & ")" & cr after URL CPropFilePath
                        put commandHeader &","& cKeyz  before outProp
                        put outProp into URL CCpropFilePath  -- doesn't work 09/11/2021
                        put saveDataToFile(CCpropFilePath,outProp) into tDone
                        put cr & CCpropFilePath & cr after allExportedPaths
                     end if
                  end if
               end repeat
            end if
         end if -- ifcprop<>
      end repeat 
   end repeat
   sort allExportedPaths
   replace cr & cr with empty in allExportedPaths
   
   set the scriptBackUpPathList of stack (the mainstack of this stack) to allExportedPaths
   put url ("file:/" & folderPath() &whatStack &"_allcontrols.txt") into Uout
   put  cr &&"##########" &tab & whatStack &cr& taallControls into ALLCO 
   put allco after url Uout
   return AllExportedPaths
end scriptsBackup
-- --
Function ObjectPropertiesList wObj
    if wObj is "button" then return  "rect,short name,label,toolTip,style,visible,showName,autoHilite,opaque,sharedHilite,traversalOn,showfocusBorder,icon,hiliteIcon,borderWidth,textFont,textSize,textAlign" 
      if wObj is "field" then return "rect,short name,toolTip,disabled,visible,sharedText,dontWrap,lockText,opaque,traversalOn,showFocusBorder,autoTab,threeD,showBorder,borderWidth,hScrollbar,vScrollbar,autoHilite,listBehavior,multipleHilite,nonContiquousHilite,toggleHilites,fixedLineHeight,textHeight,firstIndent,textFont,textSize,textAlign" 
      if wObj is "group" then return "rect,short name,label,disabled,showName,opaque,showborder,hScrollbar,vScrollbar,scrollbarWidth,visible,threeD,radioBehavior,traveseralOn,tabGroupBehavior,backgroundBehavior,textFont,textSize,textAlign" 
      if wObj is "scrollbar" then return "rect,short name,type,visible,disabled,traversalOn,focusBorder,orientation,startValue,endValue,thumbPosition,showValue,numberFormat,pageInc,textFont,textSize,textAlign" 
      if wObj is "image" then return "rect,short name,fileName,id,tooltip,visible,dontDither,alwaysBuffer,angle,showBorder,threeD,borderWidth,quality" 
if woBj is "stack" then return "title,rect,visible,decorations,shadow,destroyStack,alwaysBuffer"
end ObjectPropertiesList

-- --
Function DetailedStackInfo whatStack
  if whatStack is empty then put the short name of stack (the mainStack of this stack) into whatStack

   put "file:/" & getBackupPath(whatstack,"_Properties") &   whatstack & "_window.txt" into theStackPropsFile   
    put "set the rect of stack " && quote & whatstack & quote && "to" && the rect of stack whatstack & cr  into DetailedStackInfo
    put "set the loc of stack " && quote & whatstack & quote && "to" && the loc of stack whatstack & cr  after DetailedStackInfo
    put "set the visible of stack " && quote & whatstack & quote && "to" && the visible of stack whatstack & cr  after DetailedStackInfo
    put "set the decorations of stack " && quote & whatstack & quote && "to" && the decorations of stack whatstack & cr  after DetailedStackInfo
    put "set the shadow of stack " && quote & whatstack & quote && "to" && the shadow of stack whatstack & cr  after DetailedStackInfo
    put "set the destroyStack of stack " && quote & whatstack & quote && "to" && the destroyStack of stack whatstack & cr  after DetailedStackInfo
    put "set the alwaysBuffer of stack " && quote & whatstack & quote && "to" && the alwaysBuffer of stack whatstack & cr  after DetailedStackInfo
    put DetailedStackInfo into URL theStackPropsFile
  put the scriptBackUpPathList of stack (the mainStack of this stack)  & cr & theStackPropsFile into allExportedPaths
  set the scriptBackUpPathList of stack (the mainstack of this stack) to allExportedPaths
return DetailedStackInfo
end DetailedStackInfo
  
-- --
Function AllFunctions how
  if how is empty  then write "[ig3d]" &&"gathering all functions list" & cr to stderr
  else write  "[ig3d]" &&"all functions to file data/functionsrecords" & cr to stderr
  set  cursor to busy
--  if how is  "file" or  how is "w" then put theFunc("mainStack","w") & cr into AllOutWrit
--  else put theFunc("mainStack") & cr into AllOutWrit
  put stackList() into myStacks
  repeat with x = 1 to num(lines of myStacks)
    if how is "file" or how is "w"  then put theFunc(line x of myStacks,"w") into checkFunc
    else put theFunc(line x of myStacks) into checkFunc
      
    if checkFunc is not empty then 
      put (checkFunc & cr) after AllOutWrit
    end if 
  end repeat
  if how is empty then set the functionRecord of stack (the mainStack of this stack) to AllOutWrit
  if the idleToggle of stack (the mainStack of this stack) is true then
    set the cursor to hand
  else
    if environment() is "development" then choose pointer tool
    set the cursor to arrow
  end if
  return AllOutWrit
end AllFunctions

-- --
Function theFunc aStack todo
  put 0 into counter
  put 0 into m
  if aStack is  empty then return the functionRecord of stack (the mainStack of this stack) 
  if aStack is  "tabMenu"  then 
    put the functionRecord of stack (the mainStack of this stack)  into theFuncrec
    repeat with x = 1 to num(lines of theFuncrec)
      if line x of theFuncrec contains ")" or line x of theFuncrec contains "(" then
        put tab & tab before line x of theFunCrec
      else
        put tab before line x of theFunCrec
      end if
    end repeat
    return theFunCrec
  end if
 
 
    put stackList() into myStacks
    if aStack is among the lines of myStacks and number of chars of aStack >2 then 
    put the script of stack aStack into theScriptText
      end if
   
 
  replace tab with empty in theScriptText
  replace cr & space with cr in theScriptText
  replace space & space with space in theScriptText
  if theScriptText contains "function" is false then return empty
  put empty into theLongFunc
  put num(lines of theScriptText) into howLongList
  put num(lines of theScriptText) into howLongTheScript
  repeat  with m = 1 to  howLongList
    put line m of theScriptText into suspect
    put line m-4 to howLongList of theScriptText into restLength
      put the short date into DAT
    replace "/" with empty in DAT

    if  word 1 of suspect contains "function"  then 
      add 1 to counter
      put word 2 of suspect into theFuncName
      put number of words of suspect into hwol
      put wordOffset("-",suspect) into comwhen
      put word 3 to (hwol-comwhen) of suspect into  functionalArguments
      put  theFuncName  & "(" & functionalArguments & ")" into Functionized
      put Functionized & return after theMainFun
      put "function" && theFuncName into funName
      put "end" && theFuncName into endName
      put lineOffset(funName,theScriptText) into s
      put line s to -1 of theScriptText into shortScriptText
      put s+lineOffset(endName,shortScriptText) into e
      put line s to e of theScriptText into TheSCrOut
      
      if todo is "read" then put TheScrout & return after line lineoffset(Functionized,theMainFun) of theMainFun
      if char 1 of line m-1 of theScriptText is among the items of "-,#,*,/" then put line m-1 of theScriptText & cr before theScrOut
      if todo is "w" or todo is "file" then
        put "file:/" & getBackupPath(aStack,"Functions") &  Functionized & ".txt" into theFuncFileName
                set itemDel to "/"
                put "-"&"-" && item itemoffset(DAT,theFuncFileName)+1  to -1 of theFuncFileName & cr  before thescrout
        put TheSCrOut into URL theFuncFileName
        put getMkey(scriptBackUpPathList) into SCBUPL
        put theFuncFileName & cr after SCBUPL
        set the scriptBackUpPathList of stack (the mainstack of this stack) to SCBUPL
      end if
    end if
  end repeat
  delete  char -1 of theMainFun
  if todo is not "read" and todo is not "w" then sort theMainFun
  if aStack is not empty then  put (aStack & return  & theMainFun & return) into SomeofTheFunc
  if aStack is empty or aStack is "mainStack" then put unquoted((word 2 the name of stack (the mainStack of this stack)) & return  & theMainFun & return) into SomeofTheFunc
  if word 1 of todo is  "menu"  then 
    repeat with x = 1 to num(lines of SomeofTheFunc)
      if line x of SomeofTheFunc contains ")" or line x of SomeofTheFunc contains "(" then
        put tab & tab before line x of SomeofTheFunc
      else
        put tab before line x of SomeofTheFunc
      end if
    end repeat
  end if
  if word 2 of todo is "text" then 
    replace (tab&tab) with space in SomeofTheFunc
    replace (tab) with "~" in SomeofTheFunc
  end if
  delete last char of SomeofTheFunc
  
  return SomeofTheFunc
end theFunc

-- --
Function AllHandlers how
  -----returns all handlers of all stacks
  write  "[ig3d]" &&"gathering all handlers list" & cr to stderr  
  set  cursor to busy

  put stackList() into myStacks
  repeat with x = 1 to num(lines of myStacks)
    
    if how is "file" or how is "w" then put theHand(line x of myStacks,"w") into checkHand
    else put theHand(line x of myStacks) into checkHand
    if checkHand is not empty then 
      put (checkHand & return) after AllOutWrit
    end if
  end repeat
  if how is empty then set the handlerRecord of stack (the mainStack of this stack) to AllOutWrit
  if the idleToggle of stack (the mainStack of this stack) is true then
    set the cursor to hand
  else
    if environment() is "development" then choose pointer tool
    set the cursor to arrow
  end if
  return AllOutWrit
end AllHandlers

-- --
Function theHand aStack todo
  put 0 into counter
  put 0 into m
  if  aStack is "mainStack" then
    put the script of stack (the mainStack of this stack)  into theScriptText
  else
    put stackList() into myStacks
    if aStack is among the lines of myStacks then 
      if number of chars of aStack >2 then
        put the script of stack aStack into theScriptText
      end if
    end if
  end if
  replace (tab) with empty in theScripttext
  replace (tab & tab) with empty in theScripttext
  replace space & space with space in thescriptText
  replace cr & space with cr in theScriptText
  if theScriptText contains "on" is false then return empty
  put empty into theLonghandle
  put num(lines of theScriptText) into howLongList
  put num(lines of theScriptText) into howLongTheScript
  repeat  with m = 1 to  howLongList
    put line m of theScriptText into suspect
    put line m-4 to howLongList of theScriptText into restLength
      put the short date into DAT
    replace "/" with empty in DAT

    if  word 1 of suspect is "on"  then 
      add 1 to counter
      put word 2 of suspect into theHandleName
      put number of words of suspect into hwol
      put wordOffset("-",suspect) into comwhen
      put word 3 to (hwol-comwhen) of suspect into  OURHandlerStuff
      put  theHandleName  &&  OURHandlerStuff  into Handelize
      if char -1 of handelize is space then delete char -1 of handelize
      put Handelize & cr after theMainHandles
     replace ("on" && theHandleName) with ("on"&theHandleName) in theScriptText
        replace ("end" && theHandleName) with ("end"&theHandleName) in theScriptText
      put "on" & theHandleName into HanName
      put "end" & theHandleName into endName
      put lineOffset(HanName,theScriptText) into s
      put line s to -1 of theScriptText into shortScriptText
      put s+lineOffset(endName,shortScriptText) into e
      put line s to e of theScriptText into TheSCrOut
             if char 1 of line m-1 of theScriptText is among the items of "-,#,*,/" then put line m-1 of theScriptText & cr before theScrOut
      replace HanName with ("on" && theHandleName) in theScrOut
        replace endName with ("end" && theHandleName) in theScrOut
        write theHandleName && num(lines of theScrout) &&hanName &&s && endname && e &cr to stderr
   
      if todo is "read" then put TheScrout & cr after line lineoffset(Handelize, theMainHandles) of theMainHandles
      if char 1 of line m-1 of theScriptText is among the items of "-,#,*,/" then put line m-1 of theScriptText & cr before theScrOut
       if todo is "file" or todo is "w" then
          put getBackUpPath(aStack,"Handlers") into theFolder
     
        put "file:/" & theFolder & Handelize & ".txt" into theHandleFileName
     set itemDel to "/"
                put "-"&"-" && item itemoffset(DAT,theHandleFileName)+1  to -1 of theHandleFileName & cr  before thescrout

        put TheSCrOut into URL theHandleFileName
           put getMkey(scriptBackUpPathList) into SCBUPL
        put theHandleFileName & cr after SCBUPL
        set the scriptBackUpPathList of stack (the mainstack of this stack) to SCBUPL

        end if
    end if
  end repeat
   
  delete last char of theMainFun
  if todo is not "read" and todo is not "w" or todo is not "file" then sort theMainHandles
  if aStack is not empty then  put (aStack & cr  & theMainHandles & cr) into SomeofTheHandle
  if aStack is empty or aStack is "mainStack" then put unquoted((word 2 the name of stack (the mainStack of this stack)) & return  & theMainHandles & return) into SomeofTheHandle
   if word 2 of todo is "text" then 
    replace (tab&tab) with space in SomeofTheHandle
    replace (tab) with "~" in SomeofTheHandle
  end if
  delete last char of SomeofTheHandle
  return SomeofTheHandle
end theHand

-- --
Function stackPropsBackup whatStack whatProps
  if whatStack is empty then put the short name of stack (the mainStack of this stack) into whatStack
   	put getbackupPath() &whatstack &"/"&whatstack &"_Properties" into DSPF
	put folderPath(DSPF)   into stacksF
	put "file:/" into fURL
	 put fURL & stacksF into DVS
if whatProps is empty then  put the customKeys of stack (whatStack) into KLS
else put whatProps into KLS
filter KLS without empty

repeat with x = 1 to the number of lines of KLS
 put line x of KLS into KLSC
    if isPropBad(KLSC) is true then next repeat
	        put "the" && ( KLSC)  && "of stack" &&  quoted(whatStack) && "into pData" into getP
      write  "[ig3d]" &&word 1 to -3 of getP &"="& the  KLSC of stack whatStack& cr to stderr
          do "put" && getP
  if pData is ""    then put "empty" into pData
  put KLSC & comma & pData & cr after thePropList
  put fURL & stacksF & KLSC & ".txt" into theFIL
   put KLSC & comma & pData  into PropLine
  if the number of lines of PropLine > 1 then put PropLine into URL  theFIL
  else put Propline & cr after shortDataPropList
end repeat 
put DVS  & space &   whatStack & "_Properties/all_Props" & ".txt" into saveaLLPRopURL 
put DVS & space &  whatStack && "shortData_Props" &".txt" into saveShortPropURL
put  thePropList into URL saveaLLPRopURL
put shortDataPropList into URL saveShortPropURL
 put getMkey(scriptBackUpPathList) into SCBUPL
        put saveShortPropURL & cr & saveAllPropURL after SCBUPL
        set the scriptBackUpPathList of stack (the mainstack of this stack) to SCBUPL
return thePropList
end stackPropsBackup
-- --
Function fixForFileNames theName
  put "., ,:,*," into badchars
  repeat for each item i in badchars
    replace i with "_" in theName
  end repeat
  return theName
end fixForFileNames
############################ END iGame3D MAIN UI STACK SCRIPT ADDITIONS

############################ MURGALUA
-- --
Function pathToMurgaApp
  put gameRoot() & "Data/Utilities/" into pathToMurgaLua
return pathToMurgaLua
end pathToMurgaApp

-- --
Function fixFLTKrect therect
  put item 3 of  therect-12 into item 3 of theRect
  put item 4 of  therect-12 into item 4 of theRect
  return theRect
end fixFLTKrect
-- --
Function murgaWindowGen whatStack,whatPart
  if whatStack is empty then put the short name of stack (the mainstack of this stack) into whatStack
    put fixForFileNames(whatStack) into stackNam
  put the textSize of stack whatStack into theFontSize
  put the minWidth of stack whatStack into MW
  put the maxWidth of stack whatStack into mxw
  put the minHeight of stack whatstack into mH
  put the maxHeight of stack whatStack into mxh
  put  the resizeable of stack whatStack into resiz
  if theFontSize is empty then put 9 into theFontSize

   ---WindowHeader
     put "-"&"-"&"-murgaWindowGen(" & whatStack & comma & "start" & ")" & cr into WindowHeader
    put "do local" && stackNam & " = fltk:Fl_Window("  after WindowHeader
     put the width of  stack whatStack, the height of  stack whatStack& "," & quote&  stackNam & quote & ");"&cr   after WindowHeader
    put stackNam & ":position("& the left of stack whatStack & "," & the top of stack whatStack & ");"  & cr after WindowHeader
    put stackNam & ":labelsize("& theFontSize &");"&cr after WindowHeader
    put stackNam & ":box(fltk.FL_UP_BOX);"&cr after WindowHeader
    put stackNam & ":labelsize("&theFontSize&");"&cr after WindowHeader
    put stackNam &":set_modal();"&cr after WindowHeader
    if resiz is true then put stackNam & ":resizable(o);" &cr after WindowHeader
  ---Windowfooter
      put "-"&"-"&"-murgaWindowGen(" & whatStack & comma & "end" & ")" & cr into windowFooter
    if resiz is true then  put stackNam &":size_range(" & MW & comma &  mH & comma &  mxw & comma &   mxh & ");" & cr after windowFooter
    put"Fl_Group:current(Fl_Group:current():parent());"& cr after windowFooter
    put stackNam&":show();" & cr &"Fl:scheme("&quote&"plastic"&quote&")"&cr& "end;"  & cr after windowFooter
    put cr & "Fl:wait();"&cr& "Fl:run();" & cr after windowFooter
   
   if whatPart is "start" then return windowHeader
    if whatPart is "end" then return windowFooter
    return windowHeader & windowFooter
end murgaWindowGen

-- --
-- --
Function murgaFieldGen z,whatStack
  
  if whatStack is empty then put the short name of stack (the mainStack of this stack) into whatStack
if z< 1 then put 1 into z
  put fixForFileNames(the short name of control z of stack whatstack) into cName
 put word 1 of the  Name of control z of stack whatstack into ObjType
   put fixFLTKrect(the rect of control z of  stack whatStack) into theRect
  put  ObjType &"_"&cname into theField
  put  the height of control z of stack WhatStack into item 4 of therect

      if num(lines of control z of stack whatstack) < 2 then 
        put "do" && theField & "= fltk:Fl_Input(" & theRect & ");" & cr  into  MLFS  
       put theField&":textfont(4);" & cr after MLFS  
       put theField&":textsize("&the textSize of control z of stack whatStack &");" & cr after MLFS
       put "-"&"-"&theField&":callback("&theField&"_callback"&"consoleRun);" & cr after MLFS
       put "-"&"-"&theField&":when(fltk.FL_WHEN_ENTER_KEY);" & cr after MLFS
     put "end -- Fl_Input*"&& theField& cr & cr after MLFS
end if
      if num(lines of control z of stack whatstack) > 2 then 
        put item 3 of theRect into VSc
        put item 4 of theRect into HSc
if the vScrollBar of control z of stack whatstack is true then put 2048 into VSc
if the hScrollBar of control z of stack whatstack is true then put 2048 into HSc

  put "do" &&  cname &"_"&"scroller = fltk:Fl_Scroll(" & theRect & ");" & cr into MLFS  
      put "do" && theField &&" = fltk:Fl_Multiline_Input(" & theRect & ");"& cr after MLFS
        put theField & ":textfont(4);"& cr after MLFS
        put theField & ":textsize("& the textSize of control z of stack whatStack & ");" & cr after MLFS
        put "-"&"-"&&theField & ":callback(" & theField & "_callback" & ");"& cr after MLFS
        put"-"&"-"&& theField  & ":when(fltk.FL:_WHEN_CHANGED);" &cr  after MLFS
        put "Fl_Group:current():resizable("&theField&");" &cr  after MLFS
      put "end -- Fl_Multiline_Input*" & theField & cr after MLFS
       put "-"&"-"&&"Fl_Group:current(Fl_Group:current():parent());" &cr  after MLFS
       put "-"&"-"&"Fl_Group:current():resizable("&&cname &"_"&scroller&");" &cr  after MLFS
     put "end -- Fl_Scroll*"&&cname &"_"&scroller &cr&cr  after MLFS
   end if
   
    return mlfs
end murgaFieldGen
-- --

-- --
Function murgaButtonGen  z,whatStack
  if whatStack is empty then put the short name of stack (the mainStack of this stack) into whatStack
  if z is empty then put 1 into z
  put the short name of control z of stack whatStack into shortn
  put the style of control z of stack whatStack into tStyle
  put the tooltip of control z of stack whatstack into tooltipz
  put the textSize of control z of stack whatstack into textSIZ
 put fixFLTKrect(the rect of control z of  stack whatStack) into theRect
  put  the height of control z of stack WhatStack into item 4 of therect
  put the default of control z of stack whatStack into tDefault
  put the script of control z of stack whatStack into tSCript
   put fixforfilenames(the label of control z of stack whatStack) into TLabel
   replace cr with empty in tLabel
  if tDefault is true then put "defaultButton" into tStyle
  put fixForFileNames(shortn) into theShort
  put "=fltk:Fl"into FLHEAD
  put tStyle &"_btn_"& theShort   into doLocalPrefix
  put "Check,Round,Return" into FLbuttonTypes
  switch tStyle
  case "checkbox"
    put "_Check" into  btnHead
    put doLocalPrefix&":down_box(fltk.FL_DOWN_BOX);" into postB
    break
  case "radioButton"
    put "_Round" into btnHead
    put doLocalPrefix&":down_box(fltk.FL_ROUND_DOWN_BOX);" into postB
    break
  case "defaultButton"
    put "_Return" into btnHead
    break
  end switch
   if tLabel is empty then put dolocalPrefix into tLabel
  put "do" && doLocalPrefix &&FLHEAD& btnHead &"_Button("& theRect & comma & quote & TLabel & quote & ");" &cr  into fltkFLButtons
  put doLocalPrefix&":tooltip(" & quote&tooltipz&quote & ");"  &cr  after fltkFLButtons
  if postB is not empty then put postB & cr after fltkFLButtons
  put doLocalPrefix&":labelsize(" & textSIZ & ");" & cr   after fltkFLButtons
  put doLocalPrefix&":callback(" &doLocalPrefix &"_callback);end;"&&"-"&"-"&doLocalPrefix & cr & cr  after fltkFLButtons
   
  put "file:/" & folderPath("GUI/Callbacks/Buttons") & doLocalPrefix &"_cb.txt" into tScriptOut
  put tSCript into url (tScriptOut)
  
  return fltkFLButtons
end murgaButtonGen

-- --
Function murgaScrollGen z,whatStack
  if whatStack is empty then put the short name of stack (the mainStack of this stack) into whatStack
     if z is empty then put 1 into z
   put the short name of control z of stack whatStack into shortn
   put fixForFileNames(shortN) into theShort
     put the style of control z of stack whatStack into tStyle
     put the tooltip of control z of stack whatstack into tooltipz
     put the textSize of control z of stack whatstack into textSIZ
   put fixFLTKrect(the rect of control z of  stack whatStack) into theRect
    put "-"&"-[["&doLocalPrefix & shead & theRect & comma & quote & theShort & quote & ")" &cr after fltkFLSliders
        put "slider:type(1);slider:range(5, 55);slider:step(1);slider:value(firstButton:labelsize())" into slideDef
        put ";slider:callback(;function("&shortn&"_callback);" after slideDef
     put "firstButton:labelsize(slider:value());;firstButton:label(" & quote & "My size is " &quote &" .. slider:value());firstButton:redraw();" & cr &"end;]]-"&"-;" after slideDef
        replace ";" with ";"&cr in slideDef
        put cr & slideDef & cr after fltkFLSliders
return fltkFLSliders
end murgaScrollGen
-- --
Function murgaTheControls whatStack
 
  put stackList()   into allStacks
  sort allStacks
  put the windows into OGWin
  repeat for each Line whatStack in allStacks
    
    open stack whatStack
      put fixforfilenames(whatStack) into stackoutN
    write whatSTack & cr to stderr
    put "fltk:Fl_Input(" into  Fhead
    
    put "fltk:Fl_Slider(" into  Shead
    if whatStack is empty then put the short name of stack (the mainStack of this stack) into whatStack
    put (the number of controls of stack whatStack) into nControls
     put "-"&"-"&"- " & whatStack && "fltklua" &&nControls&&"controls"& cr  into fltkOUTOK
     put "-"&"-"&"- " & whatStack && "hidden-fltklua" &&nControls&&"controls"& cr  into hiddenActive 
       put "-"&"-"&"- " & whatStack && "disabled-fltklua" &&nControls&&"controls"& cr  into tDisabled 
    repeat with z = 1 to nControls
     
     put the visible of control z of stack whatStack & the disabled of control z of stack whatStack into visDis
       put the name of control z of stack whatStack into theLongname
      put word 1 of theLongName into ObjType
      put the short name of control z of stack whatStack into shortName
      put  the long name of control z of stack whatStack into longestName
      put the rect of control z of  stack whatStack into theRect
      put fixForFileNames(shortName) into theShort
      set itemDel to comma
      
      put  ObjType&"_"&theShort &"="  into doLocalPrefix
      switch (ObjType)
      case "field"
        put murgaFieldGen(z,whatStack) into FLTKSCR --after fltkFLFields
        break
      case "button"
     put murgaButtonGen(z,whatStack) into FLTKSCR --after fltkFLButtons
        break
      case "scrollBar"
      put murgaScrollGen(z,whatstack) into FLTKSCR --after fltkFLSliders
        break
      end switch
      
    switch visDis
      case "truefalse"
        put FLTKSCR after FltkoutOK
        break
      case "falsefalse"
        put FLTKSCR after hiddenActive
        break
      case "falsetrue"
        case "truetrue"
          put FLTKSCR after tDisabled
          break
    end switch
      put theLongname & cr after allcontrols
      if whatStack is not in OGWin then close stack whatStack
    end repeat

   
    
    put murgaWindowGen(whatStack,"start") into fltkWindowStart
    put "Fl_Group:current(Fl_Group:current():parent());" &cr  after fltkWindowStart
    put murgaWindowGen(whatstack,"end") into fltkWindowEnd

    put fltkWindowStart & cr & FltkoutOK & fltkWindowEnd  into theShowLua
   
    put  folderPath("GUI/visible") & stackoutN &"_UI.lua" into theGUIPath
    put theShowLua into URL ("file:/"  & theGUIPath)

    put fltkWindowStart & cr & tDisabled & fltkWindowEnd  into thedisabledlua
    put folderPath("GUI/hiddenordisabled") & stackoutN &"_UI.lua" into thedisablePath
         put thedisabledlua into URL ("file:/"  & thedisablePath)

    put fltkWindowStart & cr & hiddenActive & fltkWindowEnd  into thehiddenActiveLua
    put  folderPath("GUI/activeHidden") & stackoutN &"_UI.lua" into theActiveHiddenPath
    put thehiddenActiveLua into URL ("file:/"  & theActiveHiddenPath)
    
    put fltkWindowStart & cr & FltkoutOK & hiddenActive &"-"&"-"&"[["& cr  & tDisabled &"-"&"-"&"]]"&&"-"&"-"&cr into ALLOUTGUI
 put folderPath("GUI") & stackoutN &"_UI.lua" into allPath
 put ALLOUTGUI into url allPath
  end repeat 
  
  return ALLOUTGUI
end murgaTheControls
-- --
on setDoMurgaCommand thePath
  put pathToMurgaApp() &"murgaLua" into tshel
  set the domurgaLuaCommand of stack (the mainStack of this stack) to tshel && thePath 
  put URL ("file:/"  & thePath) into theLua
set the newrevlua of stack (the mainstack this stack) to theLua
end setDoMurgaCommand
-- --
Function ViewFLTKList whatStack
  if whatStack is empty then put the short name of stack (the mainStack of this stack) into whatStack
  replace space with "_" in whatStack
  put  folderPath("GUI") & whatStack  into thePath
  if ".lua" is not in thePath then put ".lua" after thePath
  setDoMurgaCommand thePath
  
  put ("file:/" & thePath) into fullPath
  
  put URL fullPath into murgaLuaFltkList
  put murgaLuaFltkList into flist
  put murgaLuaFltkList into fld "ConsoleOut" of stack ("murgaRevOut")
  filter flist with "*fltk:*"
  return flist
--  repeat for each line FLN in flist
--    set itemDel to "="
--    put FLN into theDoline
--    put word 2 of item 1 of theDoline into doWhatObject
--    replace "(" with cr in theDoline
--    put word -1 of line 1 of theDoLine into FltkClass
--    set itemDel to ":"
--    put item 2 of FltkClass into FltkFunction
--    put "end -- "&FltkFunction&"* " into EndOffset
--    put lineOffset(FLN,murgaLuaFltkList) into TStart
--    put lineOffset(EndOffset,murgaLuaFltkList) into Tend
--    put doWhatObject & cr after allFunc
--  end repeat
  return allFunc
  
end ViewFLTKList

-- --
on doMurgaShell
  put the domurgaLuaCommand of stack (the mainStack of this stack)  &&";" & "echo" && quote & "murgaLua Quit" & quote into doShell
  put shell(doShell) into tData
  put tdata into fld "shellout"
end doMurgaShell

-- --
on murgaConvertCxxtoLua theFolder
  put folderPath() into rootFolder
  set the folder to rootFolder
  put rootFolder  & "Utilities/" into pathToMurgaLua
  put pathToMurgaLua & "murgaLua" into tShellAPP
  put rootFolder & "Lua/" into luaOutFolder
  put rootFolder & "Utilities/convertFluidToMurgaLua.lua" into theShellScript

  if theFolder is empty then put rootFolder & "cxx/" into theFolder
  set the folder to theFolder
  put theFolder into CxxFolder
  put the files into flst
  filter flst with "*.cxx"
 
  
  if num(chars of flst) >= 1 then 
    repeat for each line acxxfile in flst
      put CxxFolder  & acxxfile into cxxFilePath
      put luaOutFolder   & char 1 to -4 of acxxfile & "lua"  into tLuaoutput
      put tShellAPP && theShellScript && cxxFilePath && ">" && tLuaoutput  into shellAction
      put cxxfilepath & cr & tLuaOutput & cr & shellAction & cr after Fld "ConsoleOut" of stack "murgaRevOut"
      put shell(shellAction)  & cr after  fld "consoleOut" of stack "murgaRevOut"
      set the folder to luaOutFolder
      put the files into LLst
      filter LLst with "*.lua"
      put LLst into fld "list2"
    end repeat
  end if
replace rootFolder with empty in fld "consoleout" of stack "murgaRevOut"
end murgaConvertCxxtoLua

-- --
on murgaLuaRunFile tFile
  put folderPath("Lua") & tFile into TPath
      put url ("file:/" & tPath) into fld "consoleOut" of stack "murgaRevOut"
    put folderPath("Utilities") &"murgaLua"  into TShellAPP
    put "cd " & folderPath("Utilities")  into tShellhead
    put shell(tShellhead & ";" & TShellAPP  && tPath)
    write tshellapp && tpath &cr  to stderr
end murgaLuaRunFile
-- --
Function saveAsMurgaLua 
  put folderPath( "_allControlProps/" & whatStack& "_card_" &  the short name of card z of stack whatstack) into tCopyPath
put "file:/" & fixForFileNames(tCopyPath) into tCopyPath
  repeat for each line PL in allCpropPaths
    put tcopyPath  & item -1 of PL into tnNam
    put URL PL into URL tnNam
  end repeat

end saveAsMurgaLua
-- --
